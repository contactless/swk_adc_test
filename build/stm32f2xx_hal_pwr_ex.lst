ARM GAS  /tmp/ccBd5Qgo.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f2xx_hal_pwr_ex.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_PWREx_EnableBkUpReg,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_PWREx_EnableBkUpReg
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_PWREx_EnableBkUpReg:
  24              	.LFB66:
  25              		.file 1 "Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c"
   1:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** /**
   2:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   ******************************************************************************
   3:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * @file    stm32f2xx_hal_pwr_ex.c
   4:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * @author  MCD Application Team
   5:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * @brief   Extended PWR HAL module driver.
   6:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   *          This file provides firmware functions to manage the following 
   7:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   *          functionalities of PWR extension peripheral:           
   8:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   *           + Peripheral Extended features functions
   9:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   *         
  10:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   ******************************************************************************
  11:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * @attention
  12:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   *
  13:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  14:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   *
  15:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * Redistribution and use in source and binary forms, with or without modification,
  16:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * are permitted provided that the following conditions are met:
  17:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  18:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   *      this list of conditions and the following disclaimer.
  19:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  20:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   *      this list of conditions and the following disclaimer in the documentation
  21:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   *      and/or other materials provided with the distribution.
  22:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  23:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   *      may be used to endorse or promote products derived from this software
  24:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   *      without specific prior written permission.
  25:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   *
  26:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  27:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  28:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  29:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  30:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  31:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  32:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  33:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
ARM GAS  /tmp/ccBd5Qgo.s 			page 2


  34:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  35:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   *
  37:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   ******************************************************************************
  38:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   */ 
  39:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** 
  40:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** /* Includes ------------------------------------------------------------------*/
  41:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** #include "stm32f2xx_hal.h"
  42:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** 
  43:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** /** @addtogroup STM32F2xx_HAL_Driver
  44:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * @{
  45:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   */
  46:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** 
  47:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** /** @defgroup PWREx PWREx
  48:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * @brief PWR HAL module driver
  49:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * @{
  50:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   */
  51:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** 
  52:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** #ifdef HAL_PWR_MODULE_ENABLED
  53:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** 
  54:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** /* Private typedef -----------------------------------------------------------*/
  55:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** /* Private define ------------------------------------------------------------*/
  56:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** /** @addtogroup PWREx_Private_Constants
  57:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * @{
  58:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   */    
  59:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** #define PWR_BKPREG_TIMEOUT_VALUE     1000U
  60:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** /**
  61:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * @}
  62:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   */
  63:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** 
  64:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****    
  65:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** /* Private macro -------------------------------------------------------------*/
  66:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** /* Private variables ---------------------------------------------------------*/
  67:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** /* Private function prototypes -----------------------------------------------*/
  68:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** /* Private functions ---------------------------------------------------------*/
  69:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions PWR Exported Functions
  70:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   *  @{
  71:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   */
  72:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** 
  73:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group1 Peripheral Extended features functions 
  74:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   *  @brief Peripheral Extended features functions 
  75:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   *
  76:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** @verbatim   
  77:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** 
  78:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****  ===============================================================================
  79:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****                  ##### Peripheral extended features functions #####
  80:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****  ===============================================================================
  81:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** 
  82:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****     *** Main and Backup Regulators configuration ***
  83:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****     ================================================
  84:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****     [..] 
  85:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****       (+) The backup domain includes 4 Kbytes of backup SRAM accessible only from 
  86:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****           the CPU, and address in 32-bit, 16-bit or 8-bit mode. Its content is 
  87:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****           retained even in Standby or VBAT mode when the low power backup regulator
  88:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****           is enabled. It can be considered as an internal EEPROM when VBAT is 
  89:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****           always present. You can use the HAL_PWREx_EnableBkUpReg() function to 
  90:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****           enable the low power backup regulator. 
ARM GAS  /tmp/ccBd5Qgo.s 			page 3


  91:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** 
  92:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****       (+) When the backup domain is supplied by VDD (analog switch connected to VDD) 
  93:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****           the backup SRAM is powered from VDD which replaces the VBAT power supply to 
  94:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****           save battery life.
  95:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** 
  96:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****       (+) The backup SRAM is not mass erased by a tamper event. It is read 
  97:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****           protected to prevent confidential data, such as cryptographic private 
  98:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****           key, from being accessed. The backup SRAM can be erased only through 
  99:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****           the Flash interface when a protection level change from level 1 to 
 100:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****           level 0 is requested. 
 101:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****       -@- Refer to the description of Read protection (RDP) in the Flash 
 102:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****           programming manual.
 103:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** 
 104:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****         Refer to the product datasheets for more details.
 105:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** 
 106:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****     *** FLASH Power Down configuration ****
 107:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****     =======================================
 108:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****     [..] 
 109:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****       (+) By setting the FPDS bit in the PWR_CR register by using the 
 110:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****           HAL_PWREx_EnableFlashPowerDown() function, the Flash memory also enters power 
 111:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****           down mode when the device enters Stop mode. When the Flash memory 
 112:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****           is in power down mode, an additional startup delay is incurred when 
 113:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****           waking up from Stop mode.
 114:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****           
 115:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** @endverbatim
 116:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * @{
 117:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   */
 118:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** 
 119:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** /**
 120:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * @brief Enables the Backup Regulator.
 121:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * @retval HAL status
 122:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   */
 123:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
 124:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** {
  26              		.loc 1 124 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 10B5     		push	{r4, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 4, -8
  34              		.cfi_offset 14, -4
  35              	.LVL0:
  36              	.LBB10:
  37              	.LBB11:
  38              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
ARM GAS  /tmp/ccBd5Qgo.s 			page 4


  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
ARM GAS  /tmp/ccBd5Qgo.s 			page 5


  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccBd5Qgo.s 			page 6


 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccBd5Qgo.s 			page 7


 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccBd5Qgo.s 			page 8


 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
ARM GAS  /tmp/ccBd5Qgo.s 			page 9


 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
ARM GAS  /tmp/ccBd5Qgo.s 			page 10


 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccBd5Qgo.s 			page 11


 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
ARM GAS  /tmp/ccBd5Qgo.s 			page 12


 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
ARM GAS  /tmp/ccBd5Qgo.s 			page 13


 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
  39              		.loc 2 531 0
  40 0002 4FF40072 		mov	r2, #512
  41              		.syntax unified
  42              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  43 0006 92FAA2F2 		rbit r2, r2
  44              	@ 0 "" 2
  45              	.LVL1:
  46              		.thumb
  47              		.syntax unified
  48              	.LBE11:
  49              	.LBE10:
 125:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   uint32_t tickstart = 0U;
 126:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** 
 127:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
  50              		.loc 1 127 0
  51 000a B2FA82F2 		clz	r2, r2
  52 000e 0B4B     		ldr	r3, .L8
  53 0010 1344     		add	r3, r3, r2
  54 0012 9B00     		lsls	r3, r3, #2
  55 0014 0122     		movs	r2, #1
  56 0016 1A60     		str	r2, [r3]
 128:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** 
 129:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   /* Get tick */
 130:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick();
  57              		.loc 1 130 0
  58 0018 FFF7FEFF 		bl	HAL_GetTick
  59              	.LVL2:
  60 001c 0446     		mov	r4, r0
  61              	.LVL3:
  62              	.L2:
 131:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** 
 132:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   /* Wait till Backup regulator ready flag is set */  
 133:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
  63              		.loc 1 133 0
  64 001e 084B     		ldr	r3, .L8+4
  65 0020 5B68     		ldr	r3, [r3, #4]
  66 0022 13F0080F 		tst	r3, #8
  67 0026 07D1     		bne	.L7
 134:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   {
 135:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****     if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
  68              		.loc 1 135 0
  69 0028 FFF7FEFF 		bl	HAL_GetTick
  70              	.LVL4:
  71 002c 001B     		subs	r0, r0, r4
  72 002e B0F57A7F 		cmp	r0, #1000
  73 0032 F4D9     		bls	.L2
 136:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****     {
 137:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****       return HAL_TIMEOUT;
  74              		.loc 1 137 0
ARM GAS  /tmp/ccBd5Qgo.s 			page 14


  75 0034 0320     		movs	r0, #3
  76 0036 00E0     		b	.L3
  77              	.L7:
 138:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****     } 
 139:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   }
 140:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   return HAL_OK;
  78              		.loc 1 140 0
  79 0038 0020     		movs	r0, #0
  80              	.L3:
 141:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** }
  81              		.loc 1 141 0
  82 003a 10BD     		pop	{r4, pc}
  83              	.LVL5:
  84              	.L9:
  85              		.align	2
  86              	.L8:
  87 003c 20808310 		.word	277053472
  88 0040 00700040 		.word	1073770496
  89              		.cfi_endproc
  90              	.LFE66:
  92              		.section	.text.HAL_PWREx_DisableBkUpReg,"ax",%progbits
  93              		.align	1
  94              		.global	HAL_PWREx_DisableBkUpReg
  95              		.syntax unified
  96              		.thumb
  97              		.thumb_func
  98              		.fpu softvfp
 100              	HAL_PWREx_DisableBkUpReg:
 101              	.LFB67:
 142:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** 
 143:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** /**
 144:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * @brief Disables the Backup Regulator.
 145:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * @retval HAL status
 146:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   */
 147:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
 148:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** {
 102              		.loc 1 148 0
 103              		.cfi_startproc
 104              		@ args = 0, pretend = 0, frame = 0
 105              		@ frame_needed = 0, uses_anonymous_args = 0
 106 0000 10B5     		push	{r4, lr}
 107              	.LCFI1:
 108              		.cfi_def_cfa_offset 8
 109              		.cfi_offset 4, -8
 110              		.cfi_offset 14, -4
 111              	.LVL6:
 112              	.LBB12:
 113              	.LBB13:
 114              		.loc 2 531 0
 115 0002 4FF40072 		mov	r2, #512
 116              		.syntax unified
 117              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 118 0006 92FAA2F2 		rbit r2, r2
 119              	@ 0 "" 2
 120              	.LVL7:
 121              		.thumb
 122              		.syntax unified
ARM GAS  /tmp/ccBd5Qgo.s 			page 15


 123              	.LBE13:
 124              	.LBE12:
 149:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   uint32_t tickstart = 0U;
 150:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** 
 151:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)DISABLE;
 125              		.loc 1 151 0
 126 000a B2FA82F2 		clz	r2, r2
 127 000e 0B4B     		ldr	r3, .L17
 128 0010 1344     		add	r3, r3, r2
 129 0012 9B00     		lsls	r3, r3, #2
 130 0014 0022     		movs	r2, #0
 131 0016 1A60     		str	r2, [r3]
 152:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** 
 153:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   /* Get tick */
 154:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick();
 132              		.loc 1 154 0
 133 0018 FFF7FEFF 		bl	HAL_GetTick
 134              	.LVL8:
 135 001c 0446     		mov	r4, r0
 136              	.LVL9:
 137              	.L11:
 155:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** 
 156:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   /* Wait till Backup regulator ready flag is set */  
 157:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 138              		.loc 1 157 0
 139 001e 084B     		ldr	r3, .L17+4
 140 0020 5B68     		ldr	r3, [r3, #4]
 141 0022 13F0080F 		tst	r3, #8
 142 0026 07D0     		beq	.L16
 158:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   {
 159:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****     if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 143              		.loc 1 159 0
 144 0028 FFF7FEFF 		bl	HAL_GetTick
 145              	.LVL10:
 146 002c 001B     		subs	r0, r0, r4
 147 002e B0F57A7F 		cmp	r0, #1000
 148 0032 F4D9     		bls	.L11
 160:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****     {
 161:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****       return HAL_TIMEOUT;
 149              		.loc 1 161 0
 150 0034 0320     		movs	r0, #3
 151 0036 00E0     		b	.L12
 152              	.L16:
 162:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****     } 
 163:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   }
 164:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   return HAL_OK;
 153              		.loc 1 164 0
 154 0038 0020     		movs	r0, #0
 155              	.L12:
 165:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** }
 156              		.loc 1 165 0
 157 003a 10BD     		pop	{r4, pc}
 158              	.LVL11:
 159              	.L18:
 160              		.align	2
 161              	.L17:
 162 003c 20808310 		.word	277053472
ARM GAS  /tmp/ccBd5Qgo.s 			page 16


 163 0040 00700040 		.word	1073770496
 164              		.cfi_endproc
 165              	.LFE67:
 167              		.section	.text.HAL_PWREx_EnableFlashPowerDown,"ax",%progbits
 168              		.align	1
 169              		.global	HAL_PWREx_EnableFlashPowerDown
 170              		.syntax unified
 171              		.thumb
 172              		.thumb_func
 173              		.fpu softvfp
 175              	HAL_PWREx_EnableFlashPowerDown:
 176              	.LFB68:
 166:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** 
 167:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** /**
 168:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * @brief Enables the Flash Power Down in Stop mode.
 169:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * @retval None
 170:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   */
 171:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** void HAL_PWREx_EnableFlashPowerDown(void)
 172:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** {
 177              		.loc 1 172 0
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 0
 180              		@ frame_needed = 0, uses_anonymous_args = 0
 181              		@ link register save eliminated.
 182              	.LVL12:
 183              	.LBB14:
 184              	.LBB15:
 185              		.loc 2 531 0
 186 0000 4FF40073 		mov	r3, #512
 187              		.syntax unified
 188              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 189 0004 93FAA3F3 		rbit r3, r3
 190              	@ 0 "" 2
 191              	.LVL13:
 192              		.thumb
 193              		.syntax unified
 194              	.LBE15:
 195              	.LBE14:
 173:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
 196              		.loc 1 173 0
 197 0008 B3FA83F3 		clz	r3, r3
 198 000c 03F18453 		add	r3, r3, #276824064
 199 0010 03F56033 		add	r3, r3, #229376
 200 0014 9B00     		lsls	r3, r3, #2
 201 0016 0122     		movs	r2, #1
 202 0018 1A60     		str	r2, [r3]
 174:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** }
 203              		.loc 1 174 0
 204 001a 7047     		bx	lr
 205              		.cfi_endproc
 206              	.LFE68:
 208              		.section	.text.HAL_PWREx_DisableFlashPowerDown,"ax",%progbits
 209              		.align	1
 210              		.global	HAL_PWREx_DisableFlashPowerDown
 211              		.syntax unified
 212              		.thumb
 213              		.thumb_func
ARM GAS  /tmp/ccBd5Qgo.s 			page 17


 214              		.fpu softvfp
 216              	HAL_PWREx_DisableFlashPowerDown:
 217              	.LFB69:
 175:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** 
 176:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** /**
 177:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * @brief Disables the Flash Power Down in Stop mode.
 178:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   * @retval None
 179:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   */
 180:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** void HAL_PWREx_DisableFlashPowerDown(void)
 181:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** {
 218              		.loc 1 181 0
 219              		.cfi_startproc
 220              		@ args = 0, pretend = 0, frame = 0
 221              		@ frame_needed = 0, uses_anonymous_args = 0
 222              		@ link register save eliminated.
 223              	.LVL14:
 224              	.LBB16:
 225              	.LBB17:
 226              		.loc 2 531 0
 227 0000 4FF40073 		mov	r3, #512
 228              		.syntax unified
 229              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 230 0004 93FAA3F3 		rbit r3, r3
 231              	@ 0 "" 2
 232              	.LVL15:
 233              		.thumb
 234              		.syntax unified
 235              	.LBE17:
 236              	.LBE16:
 182:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c ****   *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
 237              		.loc 1 182 0
 238 0008 B3FA83F3 		clz	r3, r3
 239 000c 03F18453 		add	r3, r3, #276824064
 240 0010 03F56033 		add	r3, r3, #229376
 241 0014 9B00     		lsls	r3, r3, #2
 242 0016 0022     		movs	r2, #0
 243 0018 1A60     		str	r2, [r3]
 183:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr_ex.c **** }
 244              		.loc 1 183 0
 245 001a 7047     		bx	lr
 246              		.cfi_endproc
 247              	.LFE69:
 249              		.text
 250              	.Letext0:
 251              		.file 3 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_d
 252              		.file 4 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdin
 253              		.file 5 "Drivers/CMSIS/Include/core_cm3.h"
 254              		.file 6 "Drivers/CMSIS/Device/ST/STM32F2xx/Include/system_stm32f2xx.h"
 255              		.file 7 "Drivers/CMSIS/Device/ST/STM32F2xx/Include/stm32f205xx.h"
 256              		.file 8 "Drivers/CMSIS/Device/ST/STM32F2xx/Include/stm32f2xx.h"
 257              		.file 9 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h
 258              		.file 10 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_type
 259              		.file 11 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/inc
 260              		.file 12 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent
 261              		.file 13 "Drivers/STM32F2xx_HAL_Driver/Inc/stm32f2xx_hal_def.h"
 262              		.file 14 "Drivers/STM32F2xx_HAL_Driver/Inc/stm32f2xx_hal.h"
ARM GAS  /tmp/ccBd5Qgo.s 			page 18


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f2xx_hal_pwr_ex.c
     /tmp/ccBd5Qgo.s:16     .text.HAL_PWREx_EnableBkUpReg:0000000000000000 $t
     /tmp/ccBd5Qgo.s:23     .text.HAL_PWREx_EnableBkUpReg:0000000000000000 HAL_PWREx_EnableBkUpReg
     /tmp/ccBd5Qgo.s:87     .text.HAL_PWREx_EnableBkUpReg:000000000000003c $d
     /tmp/ccBd5Qgo.s:93     .text.HAL_PWREx_DisableBkUpReg:0000000000000000 $t
     /tmp/ccBd5Qgo.s:100    .text.HAL_PWREx_DisableBkUpReg:0000000000000000 HAL_PWREx_DisableBkUpReg
     /tmp/ccBd5Qgo.s:162    .text.HAL_PWREx_DisableBkUpReg:000000000000003c $d
     /tmp/ccBd5Qgo.s:168    .text.HAL_PWREx_EnableFlashPowerDown:0000000000000000 $t
     /tmp/ccBd5Qgo.s:175    .text.HAL_PWREx_EnableFlashPowerDown:0000000000000000 HAL_PWREx_EnableFlashPowerDown
     /tmp/ccBd5Qgo.s:209    .text.HAL_PWREx_DisableFlashPowerDown:0000000000000000 $t
     /tmp/ccBd5Qgo.s:216    .text.HAL_PWREx_DisableFlashPowerDown:0000000000000000 HAL_PWREx_DisableFlashPowerDown

UNDEFINED SYMBOLS
HAL_GetTick
