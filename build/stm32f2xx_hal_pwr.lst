ARM GAS  /tmp/ccXfv3W6.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f2xx_hal_pwr.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_PWR_DeInit,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_PWR_DeInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_PWR_DeInit:
  24              	.LFB66:
  25              		.file 1 "Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c"
   1:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
   2:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   ******************************************************************************
   3:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @file    stm32f2xx_hal_pwr.c
   4:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @author  MCD Application Team
   5:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief   PWR HAL module driver.
   6:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *          This file provides firmware functions to manage the following 
   7:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:
   8:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *           + Peripheral Control functions 
  10:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         
  11:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   ******************************************************************************
  12:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @attention
  13:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *
  14:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  15:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *
  16:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * Redistribution and use in source and binary forms, with or without modification,
  17:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * are permitted provided that the following conditions are met:
  18:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  19:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *      this list of conditions and the following disclaimer.
  20:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  21:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *      this list of conditions and the following disclaimer in the documentation
  22:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *      and/or other materials provided with the distribution.
  23:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  24:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *      may be used to endorse or promote products derived from this software
  25:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *      without specific prior written permission.
  26:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *
  27:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  28:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  29:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  30:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  31:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  32:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  33:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
ARM GAS  /tmp/ccXfv3W6.s 			page 2


  34:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  35:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  36:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  37:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *
  38:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   ******************************************************************************
  39:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */ 
  40:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
  41:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /* Includes ------------------------------------------------------------------*/
  42:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** #include "stm32f2xx_hal.h"
  43:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
  44:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /** @addtogroup STM32F2xx_HAL_Driver
  45:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @{
  46:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
  47:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
  48:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /** @defgroup PWR PWR
  49:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief PWR HAL module driver
  50:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @{
  51:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
  52:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
  53:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** #ifdef HAL_PWR_MODULE_ENABLED
  54:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
  55:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  56:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /* Private define ------------------------------------------------------------*/
  57:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /** @addtogroup PWR_Private_Constants
  58:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @{
  59:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
  60:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
  61:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /** @defgroup PWR_PVD_Mode_Mask PWR PVD Mode Mask
  62:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @{
  63:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */     
  64:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** #define PVD_MODE_IT               0x00010000U
  65:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** #define PVD_MODE_EVT              0x00020000U
  66:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** #define PVD_RISING_EDGE           0x00000001U
  67:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** #define PVD_FALLING_EDGE          0x00000002U
  68:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
  69:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @}
  70:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
  71:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
  72:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
  73:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @}
  74:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */    
  75:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /* Private macro -------------------------------------------------------------*/
  76:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /* Private variables ---------------------------------------------------------*/
  77:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  78:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /* Private functions ---------------------------------------------------------*/
  79:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
  80:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions PWR Exported Functions
  81:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @{
  82:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
  83:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
  84:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group1 Initialization and de-initialization functions 
  85:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *  @brief    Initialization and de-initialization functions
  86:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *
  87:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** @verbatim
  88:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****  ===============================================================================
  89:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****               ##### Initialization and de-initialization functions #####
  90:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****  ===============================================================================
ARM GAS  /tmp/ccXfv3W6.s 			page 3


  91:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     [..]
  92:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       After reset, the backup domain (RTC registers, RTC backup data 
  93:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       registers and backup SRAM) is protected against possible unwanted 
  94:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       write accesses. 
  95:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       To enable access to the RTC Domain and RTC registers, proceed as follows:
  96:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         (+) Enable the Power Controller (PWR) APB1 interface clock using the
  97:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****             __HAL_RCC_PWR_CLK_ENABLE() macro.
  98:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         (+) Enable access to RTC domain using the HAL_PWR_EnableBkUpAccess() function.
  99:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****  
 100:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** @endverbatim
 101:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @{
 102:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 103:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 104:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 105:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Deinitializes the HAL PWR peripheral registers to their default reset values.
 106:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 107:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 108:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_DeInit(void)
 109:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
  26              		.loc 1 109 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 110:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   __HAL_RCC_PWR_FORCE_RESET();
  31              		.loc 1 110 0
  32 0000 044B     		ldr	r3, .L2
  33 0002 1A6A     		ldr	r2, [r3, #32]
  34 0004 42F08052 		orr	r2, r2, #268435456
  35 0008 1A62     		str	r2, [r3, #32]
 111:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   __HAL_RCC_PWR_RELEASE_RESET();
  36              		.loc 1 111 0
  37 000a 1A6A     		ldr	r2, [r3, #32]
  38 000c 22F08052 		bic	r2, r2, #268435456
  39 0010 1A62     		str	r2, [r3, #32]
 112:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
  40              		.loc 1 112 0
  41 0012 7047     		bx	lr
  42              	.L3:
  43              		.align	2
  44              	.L2:
  45 0014 00380240 		.word	1073887232
  46              		.cfi_endproc
  47              	.LFE66:
  49              		.section	.text.HAL_PWR_EnableBkUpAccess,"ax",%progbits
  50              		.align	1
  51              		.global	HAL_PWR_EnableBkUpAccess
  52              		.syntax unified
  53              		.thumb
  54              		.thumb_func
  55              		.fpu softvfp
  57              	HAL_PWR_EnableBkUpAccess:
  58              	.LFB67:
 113:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 114:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 115:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Enables access to the backup domain (RTC registers, RTC 
 116:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         backup data registers and backup SRAM).
ARM GAS  /tmp/ccXfv3W6.s 			page 4


 117:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
 118:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         Backup Domain Access should be kept enabled.
 119:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 120:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 121:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_EnableBkUpAccess(void)
 122:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
  59              		.loc 1 122 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 0
  62              		@ frame_needed = 0, uses_anonymous_args = 0
  63              		@ link register save eliminated.
  64              	.LVL0:
  65              	.LBB28:
  66              	.LBB29:
  67              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
ARM GAS  /tmp/ccXfv3W6.s 			page 5


  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccXfv3W6.s 			page 6


 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccXfv3W6.s 			page 7


 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
ARM GAS  /tmp/ccXfv3W6.s 			page 8


 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
ARM GAS  /tmp/ccXfv3W6.s 			page 9


 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccXfv3W6.s 			page 10


 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccXfv3W6.s 			page 11


 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccXfv3W6.s 			page 12


 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
ARM GAS  /tmp/ccXfv3W6.s 			page 13


 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
  68              		.loc 2 531 0
  69 0000 4FF48073 		mov	r3, #256
  70              		.syntax unified
  71              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  72 0004 93FAA3F3 		rbit r3, r3
  73              	@ 0 "" 2
  74              	.LVL1:
  75              		.thumb
  76              		.syntax unified
  77              	.LBE29:
  78              	.LBE28:
 123:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
  79              		.loc 1 123 0
  80 0008 B3FA83F3 		clz	r3, r3
  81 000c 03F18453 		add	r3, r3, #276824064
  82 0010 03F56033 		add	r3, r3, #229376
  83 0014 9B00     		lsls	r3, r3, #2
  84 0016 0122     		movs	r2, #1
  85 0018 1A60     		str	r2, [r3]
 124:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
  86              		.loc 1 124 0
  87 001a 7047     		bx	lr
  88              		.cfi_endproc
  89              	.LFE67:
ARM GAS  /tmp/ccXfv3W6.s 			page 14


  91              		.section	.text.HAL_PWR_DisableBkUpAccess,"ax",%progbits
  92              		.align	1
  93              		.global	HAL_PWR_DisableBkUpAccess
  94              		.syntax unified
  95              		.thumb
  96              		.thumb_func
  97              		.fpu softvfp
  99              	HAL_PWR_DisableBkUpAccess:
 100              	.LFB68:
 125:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 126:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 127:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Disables access to the backup domain (RTC registers, RTC 
 128:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         backup data registers and backup SRAM).
 129:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
 130:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         Backup Domain Access should be kept enabled.
 131:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 132:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 133:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_DisableBkUpAccess(void)
 134:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 101              		.loc 1 134 0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105              		@ link register save eliminated.
 106              	.LVL2:
 107              	.LBB30:
 108              	.LBB31:
 109              		.loc 2 531 0
 110 0000 4FF48073 		mov	r3, #256
 111              		.syntax unified
 112              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 113 0004 93FAA3F3 		rbit r3, r3
 114              	@ 0 "" 2
 115              	.LVL3:
 116              		.thumb
 117              		.syntax unified
 118              	.LBE31:
 119              	.LBE30:
 135:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 120              		.loc 1 135 0
 121 0008 B3FA83F3 		clz	r3, r3
 122 000c 03F18453 		add	r3, r3, #276824064
 123 0010 03F56033 		add	r3, r3, #229376
 124 0014 9B00     		lsls	r3, r3, #2
 125 0016 0022     		movs	r2, #0
 126 0018 1A60     		str	r2, [r3]
 136:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 127              		.loc 1 136 0
 128 001a 7047     		bx	lr
 129              		.cfi_endproc
 130              	.LFE68:
 132              		.section	.text.HAL_PWR_ConfigPVD,"ax",%progbits
 133              		.align	1
 134              		.global	HAL_PWR_ConfigPVD
 135              		.syntax unified
 136              		.thumb
 137              		.thumb_func
ARM GAS  /tmp/ccXfv3W6.s 			page 15


 138              		.fpu softvfp
 140              	HAL_PWR_ConfigPVD:
 141              	.LFB69:
 137:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 138:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 139:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @}
 140:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 141:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 142:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group2 Peripheral Control functions 
 143:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *  @brief Low Power modes configuration functions 
 144:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *
 145:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** @verbatim
 146:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 147:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****  ===============================================================================
 148:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****                  ##### Peripheral Control functions #####
 149:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****  ===============================================================================
 150:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****      
 151:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     *** PVD configuration ***
 152:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     =========================
 153:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     [..]
 154:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) The PVD is used to monitor the VDD power supply by comparing it to a 
 155:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           threshold selected by the PVD Level (PLS[2:0] bits in the PWR_CR).
 156:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) A PVDO flag is available to indicate if VDD/VDDA is higher or lower 
 157:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           than the PVD threshold. This event is internally connected to the EXTI 
 158:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           line16 and can generate an interrupt if enabled. This is done through
 159:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           __HAL_PWR_PVD_EXTI_ENABLE_IT() macro.
 160:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) The PVD is stopped in Standby mode.
 161:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 162:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     *** Wake-up pin configuration ***
 163:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     ================================
 164:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     [..]
 165:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) Wake-up pin is used to wake up the system from Standby mode. This pin is 
 166:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           forced in input pull-down configuration and is active on rising edges.
 167:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) There is one Wake-up pin: Wake-up Pin 1 on PA.00.
 168:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 169:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     *** Low Power modes configuration ***
 170:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     =====================================
 171:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     [..]
 172:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       The devices feature 3 low-power modes:
 173:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) Sleep mode: Cortex-M3 core stopped, peripherals kept running.
 174:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) Stop mode: all clocks are stopped, regulator running, regulator 
 175:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           in low power mode
 176:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) Standby mode: 1.2V domain powered off.
 177:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    
 178:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    *** Sleep mode ***
 179:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    ==================
 180:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     [..]
 181:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) Entry:
 182:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         The Sleep mode is entered by using the HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLE
 183:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****               functions with
 184:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
 185:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
 186:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       
 187:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       -@@- The Regulator parameter is not used for the STM32F2 family 
 188:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****               and is kept as parameter just to maintain compatibility with the 
 189:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****               lower power families (STM32L).
 190:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) Exit:
ARM GAS  /tmp/ccXfv3W6.s 			page 16


 191:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         Any peripheral interrupt acknowledged by the nested vectored interrupt 
 192:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****               controller (NVIC) can wake up the device from Sleep mode.
 193:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 194:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    *** Stop mode ***
 195:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    =================
 196:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     [..]
 197:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       In Stop mode, all clocks in the 1.2V domain are stopped, the PLL, the HSI,
 198:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       and the HSE RC oscillators are disabled. Internal SRAM and register contents 
 199:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       are preserved.
 200:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       The voltage regulator can be configured either in normal or low-power mode.
 201:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       To minimize the consumption In Stop mode, FLASH can be powered off before 
 202:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       entering the Stop mode using the HAL_PWREx_EnableFlashPowerDown() function.
 203:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       It can be switched on again by software after exiting the Stop mode using
 204:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       the HAL_PWREx_DisableFlashPowerDown() function. 
 205:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 206:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) Entry:
 207:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****          The Stop mode is entered using the HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON) 
 208:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****              function with:
 209:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           (++) Main regulator ON.
 210:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****           (++) Low Power regulator ON.
 211:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) Exit:
 212:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
 213:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 214:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    *** Standby mode ***
 215:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    ====================
 216:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     [..]
 217:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     (+)
 218:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       The Standby mode allows to achieve the lowest power consumption. It is based 
 219:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       on the Cortex-M3 deep sleep mode, with the voltage regulator disabled. 
 220:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       The 1.2V domain is consequently powered off. The PLL, the HSI oscillator and 
 221:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       the HSE oscillator are also switched off. SRAM and register contents are lost 
 222:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       except for the RTC registers, RTC backup registers, backup SRAM and Standby 
 223:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       circuitry.
 224:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    
 225:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       The voltage regulator is OFF.
 226:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       
 227:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (++) Entry:
 228:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         (+++) The Standby mode is entered using the HAL_PWR_EnterSTANDBYMode() function.
 229:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (++) Exit:
 230:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         (+++) WKUP pin rising edge, RTC alarm (Alarm A and Alarm B), RTC wake-up,
 231:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****              tamper event, time-stamp event, external reset in NRST pin, IWDG reset.
 232:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 233:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    *** Auto-wake-up (AWU) from low-power mode ***
 234:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    =============================================
 235:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     [..]
 236:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     
 237:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****      (+) The MCU can be woken up from low-power mode by an RTC Alarm event, an RTC 
 238:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       Wake-up event, a tamper event or a time-stamp event, without depending on 
 239:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       an external interrupt (Auto-wake-up mode).
 240:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 241:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****       (+) RTC auto-wake-up (AWU) from the Stop and Standby modes
 242:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****        
 243:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC alarm event, it is necessary to 
 244:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****               configure the RTC to generate the RTC alarm using the HAL_RTC_SetAlarm_IT() function.
 245:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 246:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC Tamper or time stamp event, it 
 247:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****              is necessary to configure the RTC to detect the tamper or time stamp event using the
ARM GAS  /tmp/ccXfv3W6.s 			page 17


 248:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****                 HAL_RTCEx_SetTimeStamp_IT() or HAL_RTCEx_SetTamper_IT() functions.
 249:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****                   
 250:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC Wake-up event, it is necessary to
 251:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****               configure the RTC to generate the RTC Wake-up event using the HAL_RTCEx_SetWakeUpTime
 252:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 253:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** @endverbatim
 254:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @{
 255:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 256:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 257:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 258:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 259:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param sConfigPVD pointer to an PWR_PVDTypeDef structure that contains the configuration
 260:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *        information for the PVD.
 261:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note Refer to the electrical characteristics of your device datasheet for
 262:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         more details about the voltage threshold corresponding to each 
 263:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         detection level.
 264:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 265:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 266:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
 267:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 142              		.loc 1 267 0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 0
 145              		@ frame_needed = 0, uses_anonymous_args = 0
 146              		@ link register save eliminated.
 147              	.LVL4:
 268:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Check the parameters */
 269:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
 270:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
 271:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 272:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Set PLS[7:5] bits according to PVDLevel value */
 273:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 148              		.loc 1 273 0
 149 0000 1E4A     		ldr	r2, .L11
 150 0002 1368     		ldr	r3, [r2]
 151 0004 23F0E003 		bic	r3, r3, #224
 152 0008 0168     		ldr	r1, [r0]
 153 000a 0B43     		orrs	r3, r3, r1
 154 000c 1360     		str	r3, [r2]
 274:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 275:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Clear any previous config. Keep it clear if no event or IT mode is selected */
 276:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 155              		.loc 1 276 0
 156 000e 1C4B     		ldr	r3, .L11+4
 157 0010 5A68     		ldr	r2, [r3, #4]
 158 0012 22F48032 		bic	r2, r2, #65536
 159 0016 5A60     		str	r2, [r3, #4]
 277:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_IT();
 160              		.loc 1 277 0
 161 0018 1A68     		ldr	r2, [r3]
 162 001a 22F48032 		bic	r2, r2, #65536
 163 001e 1A60     		str	r2, [r3]
 278:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 164              		.loc 1 278 0
 165 0020 9A68     		ldr	r2, [r3, #8]
 166 0022 22F48032 		bic	r2, r2, #65536
 167 0026 9A60     		str	r2, [r3, #8]
ARM GAS  /tmp/ccXfv3W6.s 			page 18


 279:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 168              		.loc 1 279 0
 169 0028 DA68     		ldr	r2, [r3, #12]
 170 002a 22F48032 		bic	r2, r2, #65536
 171 002e DA60     		str	r2, [r3, #12]
 280:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 281:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Configure interrupt mode */
 282:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 172              		.loc 1 282 0
 173 0030 4368     		ldr	r3, [r0, #4]
 174 0032 13F4803F 		tst	r3, #65536
 175 0036 04D0     		beq	.L7
 283:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {
 284:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_IT();
 176              		.loc 1 284 0
 177 0038 114A     		ldr	r2, .L11+4
 178 003a 1368     		ldr	r3, [r2]
 179 003c 43F48033 		orr	r3, r3, #65536
 180 0040 1360     		str	r3, [r2]
 181              	.L7:
 285:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 286:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 287:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Configure event mode */
 288:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 182              		.loc 1 288 0
 183 0042 4368     		ldr	r3, [r0, #4]
 184 0044 13F4003F 		tst	r3, #131072
 185 0048 04D0     		beq	.L8
 289:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {
 290:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 186              		.loc 1 290 0
 187 004a 0D4A     		ldr	r2, .L11+4
 188 004c 5368     		ldr	r3, [r2, #4]
 189 004e 43F48033 		orr	r3, r3, #65536
 190 0052 5360     		str	r3, [r2, #4]
 191              	.L8:
 291:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 292:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 293:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Configure the edge */
 294:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 192              		.loc 1 294 0
 193 0054 4368     		ldr	r3, [r0, #4]
 194 0056 13F0010F 		tst	r3, #1
 195 005a 04D0     		beq	.L9
 295:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {
 296:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 196              		.loc 1 296 0
 197 005c 084A     		ldr	r2, .L11+4
 198 005e 9368     		ldr	r3, [r2, #8]
 199 0060 43F48033 		orr	r3, r3, #65536
 200 0064 9360     		str	r3, [r2, #8]
 201              	.L9:
 297:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 298:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 299:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 202              		.loc 1 299 0
 203 0066 4368     		ldr	r3, [r0, #4]
ARM GAS  /tmp/ccXfv3W6.s 			page 19


 204 0068 13F0020F 		tst	r3, #2
 205 006c 04D0     		beq	.L6
 300:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {
 301:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 206              		.loc 1 301 0
 207 006e 044A     		ldr	r2, .L11+4
 208 0070 D368     		ldr	r3, [r2, #12]
 209 0072 43F48033 		orr	r3, r3, #65536
 210 0076 D360     		str	r3, [r2, #12]
 211              	.L6:
 302:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 303:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 212              		.loc 1 303 0
 213 0078 7047     		bx	lr
 214              	.L12:
 215 007a 00BF     		.align	2
 216              	.L11:
 217 007c 00700040 		.word	1073770496
 218 0080 003C0140 		.word	1073822720
 219              		.cfi_endproc
 220              	.LFE69:
 222              		.section	.text.HAL_PWR_EnablePVD,"ax",%progbits
 223              		.align	1
 224              		.global	HAL_PWR_EnablePVD
 225              		.syntax unified
 226              		.thumb
 227              		.thumb_func
 228              		.fpu softvfp
 230              	HAL_PWR_EnablePVD:
 231              	.LFB70:
 304:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 305:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 306:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Enables the Power Voltage Detector(PVD).
 307:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 308:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 309:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_EnablePVD(void)
 310:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 232              		.loc 1 310 0
 233              		.cfi_startproc
 234              		@ args = 0, pretend = 0, frame = 0
 235              		@ frame_needed = 0, uses_anonymous_args = 0
 236              		@ link register save eliminated.
 237              	.LVL5:
 238              	.LBB32:
 239              	.LBB33:
 240              		.loc 2 531 0
 241 0000 1023     		movs	r3, #16
 242              		.syntax unified
 243              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 244 0002 93FAA3F3 		rbit r3, r3
 245              	@ 0 "" 2
 246              	.LVL6:
 247              		.thumb
 248              		.syntax unified
 249              	.LBE33:
 250              	.LBE32:
 311:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
ARM GAS  /tmp/ccXfv3W6.s 			page 20


 251              		.loc 1 311 0
 252 0006 B3FA83F3 		clz	r3, r3
 253 000a 03F18453 		add	r3, r3, #276824064
 254 000e 03F56033 		add	r3, r3, #229376
 255 0012 9B00     		lsls	r3, r3, #2
 256 0014 0122     		movs	r2, #1
 257 0016 1A60     		str	r2, [r3]
 312:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 258              		.loc 1 312 0
 259 0018 7047     		bx	lr
 260              		.cfi_endproc
 261              	.LFE70:
 263              		.section	.text.HAL_PWR_DisablePVD,"ax",%progbits
 264              		.align	1
 265              		.global	HAL_PWR_DisablePVD
 266              		.syntax unified
 267              		.thumb
 268              		.thumb_func
 269              		.fpu softvfp
 271              	HAL_PWR_DisablePVD:
 272              	.LFB71:
 313:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 314:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 315:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Disables the Power Voltage Detector(PVD).
 316:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 317:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 318:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_DisablePVD(void)
 319:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 273              		.loc 1 319 0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 0
 276              		@ frame_needed = 0, uses_anonymous_args = 0
 277              		@ link register save eliminated.
 278              	.LVL7:
 279              	.LBB34:
 280              	.LBB35:
 281              		.loc 2 531 0
 282 0000 1023     		movs	r3, #16
 283              		.syntax unified
 284              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 285 0002 93FAA3F3 		rbit r3, r3
 286              	@ 0 "" 2
 287              	.LVL8:
 288              		.thumb
 289              		.syntax unified
 290              	.LBE35:
 291              	.LBE34:
 320:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 292              		.loc 1 320 0
 293 0006 B3FA83F3 		clz	r3, r3
 294 000a 03F18453 		add	r3, r3, #276824064
 295 000e 03F56033 		add	r3, r3, #229376
 296 0012 9B00     		lsls	r3, r3, #2
 297 0014 0022     		movs	r2, #0
 298 0016 1A60     		str	r2, [r3]
 321:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 299              		.loc 1 321 0
ARM GAS  /tmp/ccXfv3W6.s 			page 21


 300 0018 7047     		bx	lr
 301              		.cfi_endproc
 302              	.LFE71:
 304              		.section	.text.HAL_PWR_EnableWakeUpPin,"ax",%progbits
 305              		.align	1
 306              		.global	HAL_PWR_EnableWakeUpPin
 307              		.syntax unified
 308              		.thumb
 309              		.thumb_func
 310              		.fpu softvfp
 312              	HAL_PWR_EnableWakeUpPin:
 313              	.LFB72:
 322:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 323:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 324:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Enables the Wake-up PINx functionality.
 325:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param WakeUpPinx Specifies the Power Wake-Up pin to enable.
 326:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         This parameter can be one of the following values:
 327:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN1
 328:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 329:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 330:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
 331:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 314              		.loc 1 331 0
 315              		.cfi_startproc
 316              		@ args = 0, pretend = 0, frame = 0
 317              		@ frame_needed = 0, uses_anonymous_args = 0
 318              		@ link register save eliminated.
 319              	.LVL9:
 332:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Check the parameter */
 333:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 334:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 335:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Enable the wake up pin */
 336:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   SET_BIT(PWR->CSR, WakeUpPinx);
 320              		.loc 1 336 0
 321 0000 024A     		ldr	r2, .L16
 322 0002 5368     		ldr	r3, [r2, #4]
 323 0004 1843     		orrs	r0, r0, r3
 324              	.LVL10:
 325 0006 5060     		str	r0, [r2, #4]
 337:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 326              		.loc 1 337 0
 327 0008 7047     		bx	lr
 328              	.L17:
 329 000a 00BF     		.align	2
 330              	.L16:
 331 000c 00700040 		.word	1073770496
 332              		.cfi_endproc
 333              	.LFE72:
 335              		.section	.text.HAL_PWR_DisableWakeUpPin,"ax",%progbits
 336              		.align	1
 337              		.global	HAL_PWR_DisableWakeUpPin
 338              		.syntax unified
 339              		.thumb
 340              		.thumb_func
 341              		.fpu softvfp
 343              	HAL_PWR_DisableWakeUpPin:
 344              	.LFB73:
ARM GAS  /tmp/ccXfv3W6.s 			page 22


 338:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 339:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 340:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Disables the Wake-up PINx functionality.
 341:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param WakeUpPinx Specifies the Power Wake-Up pin to disable.
 342:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         This parameter can be one of the following values:
 343:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN1
 344:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 345:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 346:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
 347:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 345              		.loc 1 347 0
 346              		.cfi_startproc
 347              		@ args = 0, pretend = 0, frame = 0
 348              		@ frame_needed = 0, uses_anonymous_args = 0
 349              		@ link register save eliminated.
 350              	.LVL11:
 348:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Check the parameter */
 349:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  
 350:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 351:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Disable the wake up pin */
 352:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   CLEAR_BIT(PWR->CSR, WakeUpPinx);
 351              		.loc 1 352 0
 352 0000 024A     		ldr	r2, .L19
 353 0002 5368     		ldr	r3, [r2, #4]
 354 0004 23EA0000 		bic	r0, r3, r0
 355              	.LVL12:
 356 0008 5060     		str	r0, [r2, #4]
 353:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 357              		.loc 1 353 0
 358 000a 7047     		bx	lr
 359              	.L20:
 360              		.align	2
 361              	.L19:
 362 000c 00700040 		.word	1073770496
 363              		.cfi_endproc
 364              	.LFE73:
 366              		.section	.text.HAL_PWR_EnterSLEEPMode,"ax",%progbits
 367              		.align	1
 368              		.global	HAL_PWR_EnterSLEEPMode
 369              		.syntax unified
 370              		.thumb
 371              		.thumb_func
 372              		.fpu softvfp
 374              	HAL_PWR_EnterSLEEPMode:
 375              	.LFB74:
 354:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 355:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 356:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Enters Sleep mode.
 357:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *   
 358:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note In Sleep mode, all I/O pins keep the same state as in Run mode.
 359:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * 
 360:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note In Sleep mode, the systick is stopped to avoid exit from this mode with
 361:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *       systick interrupt when used as time base for Timeout 
 362:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *                
 363:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param Regulator Specifies the regulator state in SLEEP mode.
 364:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            This parameter can be one of the following values:
 365:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            @arg PWR_MAINREGULATOR_ON: SLEEP mode with regulator ON
ARM GAS  /tmp/ccXfv3W6.s 			page 23


 366:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON: SLEEP mode with low power regulator ON
 367:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note This parameter is not used for the STM32F2 family and is kept as parameter
 368:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *       just to maintain compatibility with the lower power families.
 369:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param  SLEEPEntry Specifies if SLEEP mode in entered with WFI or WFE instruction.
 370:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 371:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
 372:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
 373:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 374:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 375:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
 376:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 376              		.loc 1 376 0
 377              		.cfi_startproc
 378              		@ args = 0, pretend = 0, frame = 0
 379              		@ frame_needed = 0, uses_anonymous_args = 0
 380              		@ link register save eliminated.
 381              	.LVL13:
 377:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Prevent unused argument(s) compilation warning */
 378:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   UNUSED(Regulator);
 379:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 380:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Check the parameters */
 381:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   assert_param(IS_PWR_REGULATOR(Regulator));
 382:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
 383:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 384:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Clear SLEEPDEEP bit of Cortex System Control Register */
 385:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 382              		.loc 1 385 0
 383 0000 064A     		ldr	r2, .L25
 384 0002 1369     		ldr	r3, [r2, #16]
 385 0004 23F00403 		bic	r3, r3, #4
 386 0008 1361     		str	r3, [r2, #16]
 386:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 387:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Select SLEEP mode entry -------------------------------------------------*/
 388:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 387              		.loc 1 388 0
 388 000a 0129     		cmp	r1, #1
 389 000c 03D0     		beq	.L24
 390              	.LBB36:
 391              	.LBB37:
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 392              		.loc 2 406 0
 393              		.syntax unified
 394              	@ 406 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 395 000e 40BF     		sev
 396              	@ 0 "" 2
 397              		.thumb
 398              		.syntax unified
 399              	.LBE37:
 400              	.LBE36:
 401              	.LBB38:
 402              	.LBB39:
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 403              		.loc 2 396 0
 404              		.syntax unified
 405              	@ 396 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 406 0010 20BF     		wfe
 407              	@ 0 "" 2
ARM GAS  /tmp/ccXfv3W6.s 			page 24


 408              		.thumb
 409              		.syntax unified
 410              	.LBE39:
 411              	.LBE38:
 412              	.LBB40:
 413              	.LBB41:
 414              		.syntax unified
 415              	@ 396 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 416 0012 20BF     		wfe
 417              	@ 0 "" 2
 418              		.thumb
 419              		.syntax unified
 420              	.LBE41:
 421              	.LBE40:
 389:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {   
 390:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 391:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __WFI();
 392:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 393:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   else
 394:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {
 395:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     /* Request Wait For Event */
 396:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __SEV();
 397:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __WFE();
 398:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __WFE();
 399:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 400:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 422              		.loc 1 400 0
 423 0014 7047     		bx	lr
 424              	.L24:
 425              	.LBB42:
 426              	.LBB43:
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 427              		.loc 2 385 0
 428              		.syntax unified
 429              	@ 385 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 430 0016 30BF     		wfi
 431              	@ 0 "" 2
 432              		.thumb
 433              		.syntax unified
 434 0018 7047     		bx	lr
 435              	.L26:
 436 001a 00BF     		.align	2
 437              	.L25:
 438 001c 00ED00E0 		.word	-536810240
 439              	.LBE43:
 440              	.LBE42:
 441              		.cfi_endproc
 442              	.LFE74:
 444              		.section	.text.HAL_PWR_EnterSTOPMode,"ax",%progbits
 445              		.align	1
 446              		.global	HAL_PWR_EnterSTOPMode
 447              		.syntax unified
 448              		.thumb
 449              		.thumb_func
 450              		.fpu softvfp
 452              	HAL_PWR_EnterSTOPMode:
 453              	.LFB75:
ARM GAS  /tmp/ccXfv3W6.s 			page 25


 401:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 402:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 403:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Enters Stop mode. 
 404:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note In Stop mode, all I/O pins keep the same state as in Run mode.
 405:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note When exiting Stop mode by issuing an interrupt or a wake-up event, 
 406:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         the HSI RC oscillator is selected as system clock.
 407:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note When the voltage regulator operates in low power mode, an additional 
 408:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 409:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption 
 410:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *         is higher although the startup time is reduced.    
 411:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param  Regulator Specifies the regulator state in Stop mode.
 412:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 413:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            @arg PWR_MAINREGULATOR_ON: Stop mode with regulator ON
 414:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON: Stop mode with low power regulator ON
 415:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @param  STOPEntry Specifies if Stop mode in entered with WFI or WFE instruction.
 416:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 417:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
 418:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
 419:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 420:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 421:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
 422:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 454              		.loc 1 422 0
 455              		.cfi_startproc
 456              		@ args = 0, pretend = 0, frame = 0
 457              		@ frame_needed = 0, uses_anonymous_args = 0
 458              		@ link register save eliminated.
 459              	.LVL14:
 423:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Check the parameters */
 424:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   assert_param(IS_PWR_REGULATOR(Regulator));
 425:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
 426:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 427:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator val
 428:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 460              		.loc 1 428 0
 461 0000 0B4A     		ldr	r2, .L31
 462 0002 1368     		ldr	r3, [r2]
 463 0004 23F00303 		bic	r3, r3, #3
 464 0008 1843     		orrs	r0, r0, r3
 465              	.LVL15:
 466 000a 1060     		str	r0, [r2]
 429:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 430:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 431:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 467              		.loc 1 431 0
 468 000c 094A     		ldr	r2, .L31+4
 469 000e 1369     		ldr	r3, [r2, #16]
 470 0010 43F00403 		orr	r3, r3, #4
 471 0014 1361     		str	r3, [r2, #16]
 432:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 433:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Select Stop mode entry --------------------------------------------------*/
 434:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   if(STOPEntry == PWR_STOPENTRY_WFI)
 472              		.loc 1 434 0
 473 0016 0129     		cmp	r1, #1
 474 0018 08D0     		beq	.L30
 475              	.LBB44:
 476              	.LBB45:
ARM GAS  /tmp/ccXfv3W6.s 			page 26


 406:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 477              		.loc 2 406 0
 478              		.syntax unified
 479              	@ 406 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 480 001a 40BF     		sev
 481              	@ 0 "" 2
 482              		.thumb
 483              		.syntax unified
 484              	.LBE45:
 485              	.LBE44:
 486              	.LBB46:
 487              	.LBB47:
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 488              		.loc 2 396 0
 489              		.syntax unified
 490              	@ 396 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 491 001c 20BF     		wfe
 492              	@ 0 "" 2
 493              		.thumb
 494              		.syntax unified
 495              	.LBE47:
 496              	.LBE46:
 497              	.LBB48:
 498              	.LBB49:
 499              		.syntax unified
 500              	@ 396 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 501 001e 20BF     		wfe
 502              	@ 0 "" 2
 503              		.thumb
 504              		.syntax unified
 505              	.L29:
 506              	.LBE49:
 507              	.LBE48:
 435:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {   
 436:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 437:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __WFI();
 438:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 439:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   else
 440:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {
 441:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     /* Request Wait For Event */
 442:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __SEV();
 443:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __WFE();
 444:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __WFE();
 445:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 446:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 447:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 508              		.loc 1 447 0
 509 0020 044A     		ldr	r2, .L31+4
 510 0022 1369     		ldr	r3, [r2, #16]
 511 0024 23F00403 		bic	r3, r3, #4
 512 0028 1361     		str	r3, [r2, #16]
 448:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 513              		.loc 1 448 0
 514 002a 7047     		bx	lr
 515              	.L30:
 516              	.LBB50:
 517              	.LBB51:
ARM GAS  /tmp/ccXfv3W6.s 			page 27


 385:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 518              		.loc 2 385 0
 519              		.syntax unified
 520              	@ 385 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 521 002c 30BF     		wfi
 522              	@ 0 "" 2
 523              		.thumb
 524              		.syntax unified
 525 002e F7E7     		b	.L29
 526              	.L32:
 527              		.align	2
 528              	.L31:
 529 0030 00700040 		.word	1073770496
 530 0034 00ED00E0 		.word	-536810240
 531              	.LBE51:
 532              	.LBE50:
 533              		.cfi_endproc
 534              	.LFE75:
 536              		.section	.text.HAL_PWR_EnterSTANDBYMode,"ax",%progbits
 537              		.align	1
 538              		.global	HAL_PWR_EnterSTANDBYMode
 539              		.syntax unified
 540              		.thumb
 541              		.thumb_func
 542              		.fpu softvfp
 544              	HAL_PWR_EnterSTANDBYMode:
 545              	.LFB76:
 449:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 450:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 451:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Enters Standby mode.
 452:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note In Standby mode, all I/O pins are high impedance except for:
 453:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *          - Reset pad (still available) 
 454:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *          - RTC_AF1 pin (PC13) if configured for tamper, time-stamp, RTC 
 455:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *            Alarm out, or RTC clock calibration out.
 456:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
 457:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *          - WKUP pin 1 (PA0) if enabled.       
 458:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 459:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 460:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_EnterSTANDBYMode(void)
 461:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 546              		.loc 1 461 0
 547              		.cfi_startproc
 548              		@ args = 0, pretend = 0, frame = 0
 549              		@ frame_needed = 0, uses_anonymous_args = 0
 550              		@ link register save eliminated.
 462:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Select Standby mode */
 463:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   SET_BIT(PWR->CR, PWR_CR_PDDS);
 551              		.loc 1 463 0
 552 0000 054A     		ldr	r2, .L34
 553 0002 1368     		ldr	r3, [r2]
 554 0004 43F00203 		orr	r3, r3, #2
 555 0008 1360     		str	r3, [r2]
 464:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 465:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 466:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 556              		.loc 1 466 0
 557 000a 044A     		ldr	r2, .L34+4
ARM GAS  /tmp/ccXfv3W6.s 			page 28


 558 000c 1369     		ldr	r3, [r2, #16]
 559 000e 43F00403 		orr	r3, r3, #4
 560 0012 1361     		str	r3, [r2, #16]
 561              	.LBB52:
 562              	.LBB53:
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 563              		.loc 2 385 0
 564              		.syntax unified
 565              	@ 385 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 566 0014 30BF     		wfi
 567              	@ 0 "" 2
 568              		.thumb
 569              		.syntax unified
 570              	.LBE53:
 571              	.LBE52:
 467:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   
 468:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* This option is used to ensure that store operations are completed */
 469:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** #if defined ( __CC_ARM)
 470:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   __force_stores();
 471:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** #endif
 472:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Request Wait For Interrupt */
 473:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   __WFI();
 474:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 572              		.loc 1 474 0
 573 0016 7047     		bx	lr
 574              	.L35:
 575              		.align	2
 576              	.L34:
 577 0018 00700040 		.word	1073770496
 578 001c 00ED00E0 		.word	-536810240
 579              		.cfi_endproc
 580              	.LFE76:
 582              		.section	.text.HAL_PWR_PVDCallback,"ax",%progbits
 583              		.align	1
 584              		.weak	HAL_PWR_PVDCallback
 585              		.syntax unified
 586              		.thumb
 587              		.thumb_func
 588              		.fpu softvfp
 590              	HAL_PWR_PVDCallback:
 591              	.LFB78:
 475:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 476:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 477:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief This function handles the PWR PVD interrupt request.
 478:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note This API should be called under the PVD_IRQHandler().
 479:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 480:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 481:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_PVD_IRQHandler(void)
 482:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 483:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Check PWR Exti flag */
 484:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 485:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {
 486:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     /* PWR PVD interrupt user callback */
 487:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     HAL_PWR_PVDCallback();
 488:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     
 489:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     /* Clear PWR Exti pending bit */
 490:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
ARM GAS  /tmp/ccXfv3W6.s 			page 29


 491:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
 492:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 493:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 494:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 495:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief  PWR PVD interrupt callback
 496:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 497:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 498:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** __weak void HAL_PWR_PVDCallback(void)
 499:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 592              		.loc 1 499 0
 593              		.cfi_startproc
 594              		@ args = 0, pretend = 0, frame = 0
 595              		@ frame_needed = 0, uses_anonymous_args = 0
 596              		@ link register save eliminated.
 500:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 501:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****             the HAL_PWR_PVDCallback could be implemented in the user file
 502:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****    */ 
 503:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 597              		.loc 1 503 0
 598 0000 7047     		bx	lr
 599              		.cfi_endproc
 600              	.LFE78:
 602              		.section	.text.HAL_PWR_PVD_IRQHandler,"ax",%progbits
 603              		.align	1
 604              		.global	HAL_PWR_PVD_IRQHandler
 605              		.syntax unified
 606              		.thumb
 607              		.thumb_func
 608              		.fpu softvfp
 610              	HAL_PWR_PVD_IRQHandler:
 611              	.LFB77:
 482:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Check PWR Exti flag */
 612              		.loc 1 482 0
 613              		.cfi_startproc
 614              		@ args = 0, pretend = 0, frame = 0
 615              		@ frame_needed = 0, uses_anonymous_args = 0
 616 0000 08B5     		push	{r3, lr}
 617              	.LCFI0:
 618              		.cfi_def_cfa_offset 8
 619              		.cfi_offset 3, -8
 620              		.cfi_offset 14, -4
 484:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   {
 621              		.loc 1 484 0
 622 0002 064B     		ldr	r3, .L41
 623 0004 5B69     		ldr	r3, [r3, #20]
 624 0006 13F4803F 		tst	r3, #65536
 625 000a 00D1     		bne	.L40
 626              	.L37:
 492:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 627              		.loc 1 492 0
 628 000c 08BD     		pop	{r3, pc}
 629              	.L40:
 487:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****     
 630              		.loc 1 487 0
 631 000e FFF7FEFF 		bl	HAL_PWR_PVDCallback
 632              	.LVL16:
 490:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   }
ARM GAS  /tmp/ccXfv3W6.s 			page 30


 633              		.loc 1 490 0
 634 0012 024B     		ldr	r3, .L41
 635 0014 4FF48032 		mov	r2, #65536
 636 0018 5A61     		str	r2, [r3, #20]
 492:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 637              		.loc 1 492 0
 638 001a F7E7     		b	.L37
 639              	.L42:
 640              		.align	2
 641              	.L41:
 642 001c 003C0140 		.word	1073822720
 643              		.cfi_endproc
 644              	.LFE77:
 646              		.section	.text.HAL_PWR_EnableSleepOnExit,"ax",%progbits
 647              		.align	1
 648              		.global	HAL_PWR_EnableSleepOnExit
 649              		.syntax unified
 650              		.thumb
 651              		.thumb_func
 652              		.fpu softvfp
 654              	HAL_PWR_EnableSleepOnExit:
 655              	.LFB79:
 504:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 505:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 506:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Indicates Sleep-On-Exit when returning from Handler mode to Thread mode. 
 507:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note Set SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
 508:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *       re-enters SLEEP mode when an interruption handling is over.
 509:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *       Setting this bit is useful when the processor is expected to run only on
 510:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *       interruptions handling.         
 511:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 512:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 513:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_EnableSleepOnExit(void)
 514:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 656              		.loc 1 514 0
 657              		.cfi_startproc
 658              		@ args = 0, pretend = 0, frame = 0
 659              		@ frame_needed = 0, uses_anonymous_args = 0
 660              		@ link register save eliminated.
 515:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Set SLEEPONEXIT bit of Cortex System Control Register */
 516:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 661              		.loc 1 516 0
 662 0000 024A     		ldr	r2, .L44
 663 0002 1369     		ldr	r3, [r2, #16]
 664 0004 43F00203 		orr	r3, r3, #2
 665 0008 1361     		str	r3, [r2, #16]
 517:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 666              		.loc 1 517 0
 667 000a 7047     		bx	lr
 668              	.L45:
 669              		.align	2
 670              	.L44:
 671 000c 00ED00E0 		.word	-536810240
 672              		.cfi_endproc
 673              	.LFE79:
 675              		.section	.text.HAL_PWR_DisableSleepOnExit,"ax",%progbits
 676              		.align	1
 677              		.global	HAL_PWR_DisableSleepOnExit
ARM GAS  /tmp/ccXfv3W6.s 			page 31


 678              		.syntax unified
 679              		.thumb
 680              		.thumb_func
 681              		.fpu softvfp
 683              	HAL_PWR_DisableSleepOnExit:
 684              	.LFB80:
 518:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 519:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 520:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Disables Sleep-On-Exit feature when returning from Handler mode to Thread mode. 
 521:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
 522:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *       re-enters SLEEP mode when an interruption handling is over.          
 523:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 524:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 525:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_DisableSleepOnExit(void)
 526:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 685              		.loc 1 526 0
 686              		.cfi_startproc
 687              		@ args = 0, pretend = 0, frame = 0
 688              		@ frame_needed = 0, uses_anonymous_args = 0
 689              		@ link register save eliminated.
 527:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Clear SLEEPONEXIT bit of Cortex System Control Register */
 528:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 690              		.loc 1 528 0
 691 0000 024A     		ldr	r2, .L47
 692 0002 1369     		ldr	r3, [r2, #16]
 693 0004 23F00203 		bic	r3, r3, #2
 694 0008 1361     		str	r3, [r2, #16]
 529:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 695              		.loc 1 529 0
 696 000a 7047     		bx	lr
 697              	.L48:
 698              		.align	2
 699              	.L47:
 700 000c 00ED00E0 		.word	-536810240
 701              		.cfi_endproc
 702              	.LFE80:
 704              		.section	.text.HAL_PWR_EnableSEVOnPend,"ax",%progbits
 705              		.align	1
 706              		.global	HAL_PWR_EnableSEVOnPend
 707              		.syntax unified
 708              		.thumb
 709              		.thumb_func
 710              		.fpu softvfp
 712              	HAL_PWR_EnableSEVOnPend:
 713              	.LFB81:
 530:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 531:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 532:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Enables CORTEX M3 SEVONPEND bit. 
 533:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
 534:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *       WFE to wake up when an interrupt moves from inactive to pended.
 535:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 536:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 537:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_EnableSEVOnPend(void)
 538:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 714              		.loc 1 538 0
 715              		.cfi_startproc
 716              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccXfv3W6.s 			page 32


 717              		@ frame_needed = 0, uses_anonymous_args = 0
 718              		@ link register save eliminated.
 539:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Set SEVONPEND bit of Cortex System Control Register */
 540:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 719              		.loc 1 540 0
 720 0000 024A     		ldr	r2, .L50
 721 0002 1369     		ldr	r3, [r2, #16]
 722 0004 43F01003 		orr	r3, r3, #16
 723 0008 1361     		str	r3, [r2, #16]
 541:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 724              		.loc 1 541 0
 725 000a 7047     		bx	lr
 726              	.L51:
 727              		.align	2
 728              	.L50:
 729 000c 00ED00E0 		.word	-536810240
 730              		.cfi_endproc
 731              	.LFE81:
 733              		.section	.text.HAL_PWR_DisableSEVOnPend,"ax",%progbits
 734              		.align	1
 735              		.global	HAL_PWR_DisableSEVOnPend
 736              		.syntax unified
 737              		.thumb
 738              		.thumb_func
 739              		.fpu softvfp
 741              	HAL_PWR_DisableSEVOnPend:
 742              	.LFB82:
 542:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** 
 543:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** /**
 544:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @brief Disables CORTEX M3 SEVONPEND bit. 
 545:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
 546:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   *       WFE to wake up when an interrupt moves from inactive to pended.         
 547:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   * @retval None
 548:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   */
 549:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** void HAL_PWR_DisableSEVOnPend(void)
 550:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** {
 743              		.loc 1 550 0
 744              		.cfi_startproc
 745              		@ args = 0, pretend = 0, frame = 0
 746              		@ frame_needed = 0, uses_anonymous_args = 0
 747              		@ link register save eliminated.
 551:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   /* Clear SEVONPEND bit of Cortex System Control Register */
 552:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 748              		.loc 1 552 0
 749 0000 024A     		ldr	r2, .L53
 750 0002 1369     		ldr	r3, [r2, #16]
 751 0004 23F01003 		bic	r3, r3, #16
 752 0008 1361     		str	r3, [r2, #16]
 553:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_pwr.c **** }
 753              		.loc 1 553 0
 754 000a 7047     		bx	lr
 755              	.L54:
 756              		.align	2
 757              	.L53:
 758 000c 00ED00E0 		.word	-536810240
 759              		.cfi_endproc
 760              	.LFE82:
ARM GAS  /tmp/ccXfv3W6.s 			page 33


 762              		.text
 763              	.Letext0:
 764              		.file 3 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_d
 765              		.file 4 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdin
 766              		.file 5 "Drivers/CMSIS/Include/core_cm3.h"
 767              		.file 6 "Drivers/CMSIS/Device/ST/STM32F2xx/Include/system_stm32f2xx.h"
 768              		.file 7 "Drivers/CMSIS/Device/ST/STM32F2xx/Include/stm32f205xx.h"
 769              		.file 8 "Drivers/CMSIS/Device/ST/STM32F2xx/Include/stm32f2xx.h"
 770              		.file 9 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h
 771              		.file 10 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_type
 772              		.file 11 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/inc
 773              		.file 12 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent
 774              		.file 13 "Drivers/STM32F2xx_HAL_Driver/Inc/stm32f2xx_hal_pwr.h"
ARM GAS  /tmp/ccXfv3W6.s 			page 34


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f2xx_hal_pwr.c
     /tmp/ccXfv3W6.s:16     .text.HAL_PWR_DeInit:0000000000000000 $t
     /tmp/ccXfv3W6.s:23     .text.HAL_PWR_DeInit:0000000000000000 HAL_PWR_DeInit
     /tmp/ccXfv3W6.s:45     .text.HAL_PWR_DeInit:0000000000000014 $d
     /tmp/ccXfv3W6.s:50     .text.HAL_PWR_EnableBkUpAccess:0000000000000000 $t
     /tmp/ccXfv3W6.s:57     .text.HAL_PWR_EnableBkUpAccess:0000000000000000 HAL_PWR_EnableBkUpAccess
     /tmp/ccXfv3W6.s:92     .text.HAL_PWR_DisableBkUpAccess:0000000000000000 $t
     /tmp/ccXfv3W6.s:99     .text.HAL_PWR_DisableBkUpAccess:0000000000000000 HAL_PWR_DisableBkUpAccess
     /tmp/ccXfv3W6.s:133    .text.HAL_PWR_ConfigPVD:0000000000000000 $t
     /tmp/ccXfv3W6.s:140    .text.HAL_PWR_ConfigPVD:0000000000000000 HAL_PWR_ConfigPVD
     /tmp/ccXfv3W6.s:217    .text.HAL_PWR_ConfigPVD:000000000000007c $d
     /tmp/ccXfv3W6.s:223    .text.HAL_PWR_EnablePVD:0000000000000000 $t
     /tmp/ccXfv3W6.s:230    .text.HAL_PWR_EnablePVD:0000000000000000 HAL_PWR_EnablePVD
     /tmp/ccXfv3W6.s:264    .text.HAL_PWR_DisablePVD:0000000000000000 $t
     /tmp/ccXfv3W6.s:271    .text.HAL_PWR_DisablePVD:0000000000000000 HAL_PWR_DisablePVD
     /tmp/ccXfv3W6.s:305    .text.HAL_PWR_EnableWakeUpPin:0000000000000000 $t
     /tmp/ccXfv3W6.s:312    .text.HAL_PWR_EnableWakeUpPin:0000000000000000 HAL_PWR_EnableWakeUpPin
     /tmp/ccXfv3W6.s:331    .text.HAL_PWR_EnableWakeUpPin:000000000000000c $d
     /tmp/ccXfv3W6.s:336    .text.HAL_PWR_DisableWakeUpPin:0000000000000000 $t
     /tmp/ccXfv3W6.s:343    .text.HAL_PWR_DisableWakeUpPin:0000000000000000 HAL_PWR_DisableWakeUpPin
     /tmp/ccXfv3W6.s:362    .text.HAL_PWR_DisableWakeUpPin:000000000000000c $d
     /tmp/ccXfv3W6.s:367    .text.HAL_PWR_EnterSLEEPMode:0000000000000000 $t
     /tmp/ccXfv3W6.s:374    .text.HAL_PWR_EnterSLEEPMode:0000000000000000 HAL_PWR_EnterSLEEPMode
     /tmp/ccXfv3W6.s:438    .text.HAL_PWR_EnterSLEEPMode:000000000000001c $d
     /tmp/ccXfv3W6.s:445    .text.HAL_PWR_EnterSTOPMode:0000000000000000 $t
     /tmp/ccXfv3W6.s:452    .text.HAL_PWR_EnterSTOPMode:0000000000000000 HAL_PWR_EnterSTOPMode
     /tmp/ccXfv3W6.s:529    .text.HAL_PWR_EnterSTOPMode:0000000000000030 $d
     /tmp/ccXfv3W6.s:537    .text.HAL_PWR_EnterSTANDBYMode:0000000000000000 $t
     /tmp/ccXfv3W6.s:544    .text.HAL_PWR_EnterSTANDBYMode:0000000000000000 HAL_PWR_EnterSTANDBYMode
     /tmp/ccXfv3W6.s:577    .text.HAL_PWR_EnterSTANDBYMode:0000000000000018 $d
     /tmp/ccXfv3W6.s:583    .text.HAL_PWR_PVDCallback:0000000000000000 $t
     /tmp/ccXfv3W6.s:590    .text.HAL_PWR_PVDCallback:0000000000000000 HAL_PWR_PVDCallback
     /tmp/ccXfv3W6.s:603    .text.HAL_PWR_PVD_IRQHandler:0000000000000000 $t
     /tmp/ccXfv3W6.s:610    .text.HAL_PWR_PVD_IRQHandler:0000000000000000 HAL_PWR_PVD_IRQHandler
     /tmp/ccXfv3W6.s:642    .text.HAL_PWR_PVD_IRQHandler:000000000000001c $d
     /tmp/ccXfv3W6.s:647    .text.HAL_PWR_EnableSleepOnExit:0000000000000000 $t
     /tmp/ccXfv3W6.s:654    .text.HAL_PWR_EnableSleepOnExit:0000000000000000 HAL_PWR_EnableSleepOnExit
     /tmp/ccXfv3W6.s:671    .text.HAL_PWR_EnableSleepOnExit:000000000000000c $d
     /tmp/ccXfv3W6.s:676    .text.HAL_PWR_DisableSleepOnExit:0000000000000000 $t
     /tmp/ccXfv3W6.s:683    .text.HAL_PWR_DisableSleepOnExit:0000000000000000 HAL_PWR_DisableSleepOnExit
     /tmp/ccXfv3W6.s:700    .text.HAL_PWR_DisableSleepOnExit:000000000000000c $d
     /tmp/ccXfv3W6.s:705    .text.HAL_PWR_EnableSEVOnPend:0000000000000000 $t
     /tmp/ccXfv3W6.s:712    .text.HAL_PWR_EnableSEVOnPend:0000000000000000 HAL_PWR_EnableSEVOnPend
     /tmp/ccXfv3W6.s:729    .text.HAL_PWR_EnableSEVOnPend:000000000000000c $d
     /tmp/ccXfv3W6.s:734    .text.HAL_PWR_DisableSEVOnPend:0000000000000000 $t
     /tmp/ccXfv3W6.s:741    .text.HAL_PWR_DisableSEVOnPend:0000000000000000 HAL_PWR_DisableSEVOnPend
     /tmp/ccXfv3W6.s:758    .text.HAL_PWR_DisableSEVOnPend:000000000000000c $d

NO UNDEFINED SYMBOLS
