ARM GAS  /tmp/cccRIBfL.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f2xx_hal_adc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.ADC_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  22              	ADC_Init:
  23              	.LFB88:
  24              		.file 1 "Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c"
   1:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
   2:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   ******************************************************************************
   3:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @file    stm32f2xx_hal_adc.c
   4:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   6:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC) peripheral:
   7:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *           + Initialization and de-initialization functions
   8:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *           + IO operation functions
   9:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *           + State and errors functions
  10:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         
  11:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   @verbatim
  12:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   ==============================================================================
  13:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                     ##### ADC Peripheral features #####
  14:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   ==============================================================================
  15:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   [..] 
  16:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) 12-bit, 10-bit, 8-bit or 6-bit configurable resolution.
  17:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) Interrupt generation at the end of conversion, end of injected conversion,  
  18:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       and in case of analog watchdog or overrun events
  19:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) Single and continuous conversion modes.
  20:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) Scan mode for automatic conversion of channel 0 to channel x.
  21:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) Data alignment with in-built data coherency.
  22:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) Channel-wise programmable sampling time.
  23:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) External trigger option with configurable polarity for both regular and 
  24:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       injected conversion.
  25:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) Dual/Triple mode (on devices with 2 ADCs or more).
  26:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) Configurable DMA data storage in Dual/Triple ADC mode. 
  27:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) Configurable delay between conversions in Dual/Triple interleaved mode.
  28:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) ADC conversion type (refer to the datasheets).
  29:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) ADC supply requirements: 2.4 V to 3.6 V at full speed and down to 1.8 V at 
  30:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       slower speed.
  31:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) ADC input range: VREF(minus) = VIN = VREF(plus).
  32:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) DMA request generation during regular channel conversion.
  33:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
  34:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
ARM GAS  /tmp/cccRIBfL.s 			page 2


  35:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                      ##### How to use this driver #####
  36:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   ==============================================================================
  37:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   [..]
  38:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#)Initialize the ADC low level resources by implementing the HAL_ADC_MspInit():
  39:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (##) Enable the ADC interface clock using __HAL_RCC_ADC_CLK_ENABLE()
  40:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (##) ADC pins configuration
  41:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****              (+++) Enable the clock for the ADC GPIOs using the following function:
  42:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                    __HAL_RCC_GPIOx_CLK_ENABLE()  
  43:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****              (+++) Configure these ADC pins in analog mode using HAL_GPIO_Init() 
  44:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (##) In case of using interrupts (e.g. HAL_ADC_Start_IT())
  45:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****              (+++) Configure the ADC interrupt priority using HAL_NVIC_SetPriority()
  46:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****              (+++) Enable the ADC IRQ handler using HAL_NVIC_EnableIRQ()
  47:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****              (+++) In ADC IRQ handler, call HAL_ADC_IRQHandler()
  48:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (##) In case of using DMA to control data transfer (e.g. HAL_ADC_Start_DMA())
  49:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****              (+++) Enable the DMAx interface clock using __HAL_RCC_DMAx_CLK_ENABLE()
  50:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****              (+++) Configure and enable two DMA streams stream for managing data
  51:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                  transfer from peripheral to memory (output stream)
  52:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****              (+++) Associate the initialized DMA handle to the CRYP DMA handle
  53:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                  using  __HAL_LINKDMA()
  54:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****              (+++) Configure the priority and enable the NVIC for the transfer complete
  55:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                  interrupt on the two DMA Streams. The output stream should have higher
  56:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                  priority than the input stream.
  57:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                        
  58:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     *** Configuration of ADC, groups regular/injected, channels parameters ***
  59:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   ==============================================================================
  60:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   [..]
  61:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) Configure the ADC parameters (resolution, data alignment, ...)
  62:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       and regular group parameters (conversion trigger, sequencer, ...)
  63:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       using function HAL_ADC_Init().
  64:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
  65:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) Configure the channels for regular group parameters (channel number, 
  66:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       channel rank into sequencer, ..., into regular group)
  67:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       using function HAL_ADC_ConfigChannel().
  68:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
  69:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) Optionally, configure the injected group parameters (conversion trigger, 
  70:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       sequencer, ..., of injected group)
  71:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       and the channels for injected group parameters (channel number, 
  72:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       channel rank into sequencer, ..., into injected group)
  73:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       using function HAL_ADCEx_InjectedConfigChannel().
  74:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
  75:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) Optionally, configure the analog watchdog parameters (channels
  76:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       monitored, thresholds, ...) using function HAL_ADC_AnalogWDGConfig().
  77:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
  78:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) Optionally, for devices with several ADC instances: configure the 
  79:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       multimode parameters using function HAL_ADCEx_MultiModeConfigChannel().
  80:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
  81:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                        *** Execution of ADC conversions ***
  82:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   ==============================================================================
  83:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   [..]  
  84:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) ADC driver can be used among three modes: polling, interruption,
  85:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       transfer by DMA.    
  86:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
  87:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      *** Polling mode IO operation ***
  88:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      =================================
  89:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      [..]    
  90:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (+) Start the ADC peripheral using HAL_ADC_Start() 
  91:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (+) Wait for end of conversion using HAL_ADC_PollForConversion(), at this stage
ARM GAS  /tmp/cccRIBfL.s 			page 3


  92:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****            user can specify the value of timeout according to his end application      
  93:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (+) To read the ADC converted values, use the HAL_ADC_GetValue() function.
  94:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (+) Stop the ADC peripheral using HAL_ADC_Stop()
  95:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        
  96:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      *** Interrupt mode IO operation ***    
  97:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      ===================================
  98:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      [..]    
  99:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (+) Start the ADC peripheral using HAL_ADC_Start_IT() 
 100:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (+) Use HAL_ADC_IRQHandler() called under ADC_IRQHandler() Interrupt subroutine
 101:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (+) At ADC end of conversion HAL_ADC_ConvCpltCallback() function is executed and user can 
 102:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****            add his own code by customization of function pointer HAL_ADC_ConvCpltCallback 
 103:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (+) In case of ADC Error, HAL_ADC_ErrorCallback() function is executed and user can 
 104:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****            add his own code by customization of function pointer HAL_ADC_ErrorCallback
 105:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (+) Stop the ADC peripheral using HAL_ADC_Stop_IT()     
 106:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 107:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      *** DMA mode IO operation ***    
 108:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      ==============================
 109:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      [..]    
 110:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (+) Start the ADC peripheral using HAL_ADC_Start_DMA(), at this stage the user specify the l
 111:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****            of data to be transferred at each end of conversion 
 112:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (+) At The end of data transfer by HAL_ADC_ConvCpltCallback() function is executed and user 
 113:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****            add his own code by customization of function pointer HAL_ADC_ConvCpltCallback 
 114:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (+) In case of transfer Error, HAL_ADC_ErrorCallback() function is executed and user can 
 115:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****            add his own code by customization of function pointer HAL_ADC_ErrorCallback
 116:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (+) Stop the ADC peripheral using HAL_ADC_Stop_DMA()
 117:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                     
 118:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      *** ADC HAL driver macros list ***
 119:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      ============================================= 
 120:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      [..]
 121:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        Below the list of most used macros in ADC HAL driver.
 122:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        
 123:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) __HAL_ADC_ENABLE : Enable the ADC peripheral
 124:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) __HAL_ADC_DISABLE : Disable the ADC peripheral
 125:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) __HAL_ADC_ENABLE_IT: Enable the ADC end of conversion interrupt
 126:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) __HAL_ADC_DISABLE_IT: Disable the ADC end of conversion interrupt
 127:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) __HAL_ADC_GET_IT_SOURCE: Check if the specified ADC interrupt source is enabled or disabl
 128:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) __HAL_ADC_CLEAR_FLAG: Clear the ADC's pending flags
 129:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) __HAL_ADC_GET_FLAG: Get the selected ADC's flag status
 130:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) ADC_GET_RESOLUTION: Return resolution bits in CR1 register 
 131:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       
 132:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      [..] 
 133:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (@) You can refer to the ADC HAL driver header file for more useful macros 
 134:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 135:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                       *** Deinitialization of ADC ***
 136:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   ==============================================================================
 137:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   [..]
 138:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) Disable the ADC interface
 139:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      (++) ADC clock can be hard reset and disabled at RCC top level.
 140:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      (++) Hard reset of ADC peripherals
 141:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****           using macro __HAL_RCC_ADC_FORCE_RESET(), __HAL_RCC_ADC_RELEASE_RESET().
 142:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      (++) ADC clock disable using the equivalent macro/functions as configuration step.
 143:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                (+++) Example:
 144:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 145:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                    other device clock parameters configuration:
 146:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                (+++) HAL_RCC_GetOscConfig(&RCC_OscInitStructure);
 147:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                (+++) RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 148:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                (+++) RCC_OscInitStructure.HSIState = RCC_HSI_OFF; (if not used for system clock)
ARM GAS  /tmp/cccRIBfL.s 			page 4


 149:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                (+++) HAL_RCC_OscConfig(&RCC_OscInitStructure);
 150:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 151:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) ADC pins configuration
 152:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      (++) Disable the clock for the ADC GPIOs using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 153:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 154:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) Optionally, in case of usage of ADC with interruptions:
 155:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      (++) Disable the NVIC for ADC using function HAL_NVIC_DisableIRQ(ADCx_IRQn)
 156:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 157:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   (#) Optionally, in case of usage of DMA:
 158:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         (++) Deinitialize the DMA using function HAL_DMA_DeInit().
 159:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         (++) Disable the NVIC for DMA using function HAL_NVIC_DisableIRQ(DMAx_Channelx_IRQn)   
 160:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 161:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     @endverbatim
 162:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   ******************************************************************************
 163:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @attention
 164:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *
 165:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
 166:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *
 167:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * Redistribution and use in source and binary forms, with or without modification,
 168:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * are permitted provided that the following conditions are met:
 169:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
 170:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *      this list of conditions and the following disclaimer.
 171:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
 172:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *      this list of conditions and the following disclaimer in the documentation
 173:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *      and/or other materials provided with the distribution.
 174:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
 175:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *      may be used to endorse or promote products derived from this software
 176:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *      without specific prior written permission.
 177:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *
 178:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 179:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 180:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 181:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 182:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 183:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 184:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 185:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 186:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 187:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 188:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *
 189:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   ******************************************************************************
 190:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */ 
 191:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 192:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 193:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** #include "stm32f2xx_hal.h"
 194:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 195:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /** @addtogroup STM32F2xx_HAL_Driver
 196:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @{
 197:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 198:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 199:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /** @defgroup ADC ADC
 200:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief ADC driver modules
 201:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @{
 202:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */ 
 203:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 204:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 205:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
ARM GAS  /tmp/cccRIBfL.s 			page 5


 206:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 207:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 208:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 209:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 210:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /** @addtogroup ADC_Private_Functions
 211:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @{
 212:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 213:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 214:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** static void ADC_Init(ADC_HandleTypeDef* hadc);
 215:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma);
 216:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma);
 217:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma);
 218:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 219:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @}
 220:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 221:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /* Exported functions --------------------------------------------------------*/
 222:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 223:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @{
 224:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 225:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 226:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization and de-initialization functions 
 227:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  *  @brief    Initialization and Configuration functions 
 228:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  *
 229:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** @verbatim    
 230:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  ===============================================================================
 231:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 232:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  ===============================================================================
 233:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 234:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Initialize and configure the ADC. 
 235:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) De-initialize the ADC. 
 236:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****          
 237:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** @endverbatim
 238:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @{
 239:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 240:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 241:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 242:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
 243:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         in the ADC_InitStruct and initializes the ADC MSP.
 244:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *           
 245:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @note   This function is used to configure the global features of the ADC ( 
 246:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         ClockPrescaler, Resolution, Data Alignment and number of conversion), however,
 247:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the rest of the configuration parameters are specific to the regular
 248:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         channels group (scan mode activation, continuous mode activation,
 249:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         External trigger source and edge, DMA continuous request after the  
 250:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         last transfer and End of conversion selection).
 251:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *             
 252:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 253:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
 254:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval HAL status
 255:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 256:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
 257:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 258:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 259:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 260:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check ADC handle */
 261:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(hadc == NULL)
 262:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
ARM GAS  /tmp/cccRIBfL.s 			page 6


 263:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     return HAL_ERROR;
 264:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 265:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 266:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check the parameters */
 267:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 268:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 269:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 270:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 271:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 272:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 273:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 274:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 275:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 276:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 277:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 278:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 279:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 280:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 281:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 282:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 283:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 284:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(hadc->State == HAL_ADC_STATE_RESET)
 285:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 286:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Initialize ADC error code */
 287:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 288:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 289:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Allocate lock resource and initialize it */
 290:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
 291:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 292:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Init the low level hardware */
 293:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
 294:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 295:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 296:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 297:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* correctly completed.                                                     */
 298:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 299:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 300:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set ADC state */
 301:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 302:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 303:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 304:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 305:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set ADC parameters */
 306:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     ADC_Init(hadc);
 307:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 308:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set ADC error code to none */
 309:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 310:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 311:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set the ADC state */
 312:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 313:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL,
 314:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
 315:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 316:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   else
 317:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 318:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 319:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
ARM GAS  /tmp/cccRIBfL.s 			page 7


 320:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 321:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Release Lock */
 322:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 323:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 324:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return function status */
 325:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return tmp_hal_status;
 326:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 327:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 328:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 329:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Deinitializes the ADCx peripheral registers to their default reset values. 
 330:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 331:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
 332:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval HAL status
 333:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 334:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
 335:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 336:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 337:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 338:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check ADC handle */
 339:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(hadc == NULL)
 340:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 341:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     return HAL_ERROR;
 342:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 343:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 344:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check the parameters */
 345:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 346:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 347:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set ADC state */
 348:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 349:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 350:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 351:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Disable ADC peripheral */
 352:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_ADC_DISABLE(hadc);
 353:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 354:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */ 
 355:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* correctly completed.                                                     */
 356:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 357:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 358:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* DeInit the low level hardware */
 359:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     HAL_ADC_MspDeInit(hadc);
 360:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 361:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set ADC error code to none */
 362:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
 363:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 364:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set ADC state */
 365:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->State = HAL_ADC_STATE_RESET;
 366:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 367:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 368:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Process unlocked */
 369:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 370:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 371:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return function status */
 372:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return tmp_hal_status;
 373:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 374:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 375:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 376:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Initializes the ADC MSP.
ARM GAS  /tmp/cccRIBfL.s 			page 8


 377:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 378:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
 379:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval None
 380:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 381:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
 382:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 383:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 384:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   UNUSED(hadc);
 385:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 386:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****             the HAL_ADC_MspInit could be implemented in the user file
 387:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****    */ 
 388:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 389:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 390:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 391:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  DeInitializes the ADC MSP.
 392:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 393:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
 394:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval None
 395:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 396:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
 397:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 398:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 399:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   UNUSED(hadc);
 400:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 401:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****             the HAL_ADC_MspDeInit could be implemented in the user file
 402:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****    */ 
 403:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 404:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 405:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 406:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @}
 407:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 408:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 409:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 IO operation functions
 410:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  *  @brief    IO operation functions 
 411:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  *
 412:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** @verbatim   
 413:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  ===============================================================================
 414:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****              ##### IO operation functions #####
 415:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  ===============================================================================  
 416:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 417:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Start conversion of regular channel.
 418:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Stop conversion of regular channel.
 419:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Start conversion of regular channel and enable interrupt.
 420:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Stop conversion of regular channel and disable interrupt.
 421:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Start conversion of regular channel and enable DMA transfer.
 422:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Stop conversion of regular channel and disable DMA transfer.
 423:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Handle ADC interrupt request. 
 424:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                
 425:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** @endverbatim
 426:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @{
 427:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 428:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 429:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 430:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Enables ADC and starts conversion of the regular channels.
 431:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 432:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 433:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval HAL status
ARM GAS  /tmp/cccRIBfL.s 			page 9


 434:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 435:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
 436:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 437:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __IO uint32_t counter = 0U;
 438:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 439:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check the parameters */
 440:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 441:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 442:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 443:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Process locked */
 444:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_LOCK(hadc);
 445:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 446:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Enable the ADC peripheral */
 447:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check if ADC peripheral is disabled in order to enable it and wait during 
 448:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   Tstab time the ADC's stabilization */
 449:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 450:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {  
 451:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Enable the Peripheral */
 452:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
 453:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 454:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Delay for ADC stabilization time */
 455:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
 456:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 457:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     while(counter != 0U)
 458:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 459:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       counter--;
 460:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 461:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 462:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 463:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
 464:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 465:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 466:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set ADC state                                                          */
 467:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
 468:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* - Set state bitfield related to regular group operation                */
 469:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 470:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 471:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
 472:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 473:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* If conversions on group regular are also triggering group injected,    */
 474:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* update ADC state.                                                      */
 475:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 476:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 477:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 478:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 479:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 480:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
 481:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 482:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 483:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
 484:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 485:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 486:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     else
 487:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 488:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Reset ADC all error code fields */
 489:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 490:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
ARM GAS  /tmp/cccRIBfL.s 			page 10


 491:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 492:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Process unlocked */
 493:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 494:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 495:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 496:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 497:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
 498:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 499:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 500:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 501:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Check if Multimode enabled */
 502:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 503:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 504:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* if no external trigger present enable software conversion of regular channels */
 505:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 506:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
 507:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
 508:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 509:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
 510:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 511:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     else
 512:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 513:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* if instance of handle correspond to ADC1 and  no external trigger present enable software 
 514:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 515:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
 516:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
 517:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****           hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 518:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
 519:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 520:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 521:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 522:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return function status */
 523:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return HAL_OK;
 524:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 525:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 526:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 527:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Disables ADC and stop conversion of regular channels.
 528:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * 
 529:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @note   Caution: This function will stop also injected channels.  
 530:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *
 531:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 532:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 533:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *
 534:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval HAL status.
 535:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 536:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
 537:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 538:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check the parameters */
 539:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 540:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 541:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Process locked */
 542:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_LOCK(hadc);
 543:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 544:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 545:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Disable ADC peripheral */
 546:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_ADC_DISABLE(hadc);
 547:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
ARM GAS  /tmp/cccRIBfL.s 			page 11


 548:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
 549:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 550:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 551:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set ADC state */
 552:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 553:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 554:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
 555:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 556:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 557:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Process unlocked */
 558:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 559:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 560:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return function status */
 561:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return HAL_OK;
 562:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 563:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 564:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 565:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Poll for regular conversion complete
 566:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @note   ADC conversion flags EOS (end of sequence) and EOC (end of
 567:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         conversion) are cleared by this function.
 568:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured 
 569:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         in DMA mode and polling for end of each conversion (ADC init
 570:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SINGLE_CONV).
 571:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
 572:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         performed on each conversion. Nevertheless, polling can still 
 573:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         be performed on the complete sequence.
 574:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 575:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 576:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  Timeout Timeout value in millisecond.  
 577:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval HAL status
 578:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 579:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
 580:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 581:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   uint32_t tickstart = 0U;
 582:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  
 583:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Verification that ADC configuration is compliant with polling for      */
 584:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* each conversion:                                                       */
 585:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
 586:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* several ranks and polling for end of each conversion.                  */
 587:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* For code simplicity sake, this particular case is generalized to       */
 588:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* ADC configured in DMA mode and polling for end of each conversion.     */
 589:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 590:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 591:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 592:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Update ADC state machine to error */
 593:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 594:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 595:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Process unlocked */
 596:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 597:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 598:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     return HAL_ERROR;
 599:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 600:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 601:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Get tick */ 
 602:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   tickstart = HAL_GetTick();
 603:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 604:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check End of conversion flag */
ARM GAS  /tmp/cccRIBfL.s 			page 12


 605:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 606:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 607:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
 608:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 609:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 610:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 611:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
 612:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         /* Update ADC state machine to timeout */
 613:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 614:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         
 615:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         /* Process unlocked */
 616:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 617:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         
 618:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         return HAL_TIMEOUT;
 619:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
 620:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 621:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 622:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 623:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Clear regular group conversion flag */
 624:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 625:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 626:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Update ADC state machine */
 627:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 628:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 629:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
 630:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
 631:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Note: On STM32F2, there is no independent flag of end of sequence.       */
 632:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /*       The test of scan sequence on going is done either with scan        */
 633:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /*       sequence disabled or with end of conversion flag set to            */
 634:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /*       of end of sequence.                                                */
 635:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 636:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 637:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 638:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 639:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 640:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set ADC state */
 641:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 642:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 643:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 644:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     { 
 645:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 646:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 647:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 648:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 649:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return ADC state */
 650:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return HAL_OK;
 651:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 652:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 653:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 654:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Poll for conversion event
 655:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 656:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 657:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  EventType the ADC event type.
 658:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *          This parameter can be one of the following values:
 659:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *            @arg ADC_AWD_EVENT: ADC Analog watch Dog event.
 660:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *            @arg ADC_OVR_EVENT: ADC Overrun event.
 661:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  Timeout Timeout value in millisecond.   
ARM GAS  /tmp/cccRIBfL.s 			page 13


 662:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval HAL status
 663:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 664:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeou
 665:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 666:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   uint32_t tickstart = 0U;
 667:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 668:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check the parameters */
 669:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 670:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
 671:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 672:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Get tick */
 673:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   tickstart = HAL_GetTick();
 674:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 675:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check selected event flag */
 676:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   while(!(__HAL_ADC_GET_FLAG(hadc,EventType)))
 677:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 678:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Check for the Timeout */
 679:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if(Timeout != HAL_MAX_DELAY)
 680:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 681:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 682:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
 683:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         /* Update ADC state machine to timeout */
 684:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 685:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         
 686:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         /* Process unlocked */
 687:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 688:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         
 689:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         return HAL_TIMEOUT;
 690:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
 691:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 692:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 693:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 694:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Analog watchdog (level out of window) event */
 695:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(EventType == ADC_AWD_EVENT)
 696:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 697:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set ADC state */
 698:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 699:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       
 700:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
 701:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 702:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 703:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Overrun event */
 704:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   else
 705:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 706:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set ADC state */
 707:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 708:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set ADC error code to overrun */
 709:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 710:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 711:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Clear ADC overrun flag */
 712:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 713:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 714:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 715:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return ADC state */
 716:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return HAL_OK;
 717:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 718:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
ARM GAS  /tmp/cccRIBfL.s 			page 14


 719:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 720:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 721:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Enables the interrupt and starts ADC conversion of regular channels.
 722:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 723:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 724:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval HAL status.
 725:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 726:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
 727:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 728:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __IO uint32_t counter = 0U;
 729:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 730:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check the parameters */
 731:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 732:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 733:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 734:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Process locked */
 735:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_LOCK(hadc);
 736:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 737:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Enable the ADC peripheral */
 738:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check if ADC peripheral is disabled in order to enable it and wait during 
 739:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   Tstab time the ADC's stabilization */
 740:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 741:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {  
 742:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Enable the Peripheral */
 743:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
 744:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 745:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Delay for ADC stabilization time */
 746:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
 747:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 748:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     while(counter != 0U)
 749:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 750:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       counter--;
 751:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 752:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 753:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 754:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
 755:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 756:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 757:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set ADC state                                                          */
 758:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
 759:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* - Set state bitfield related to regular group operation                */
 760:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 761:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 762:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
 763:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 764:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* If conversions on group regular are also triggering group injected,    */
 765:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* update ADC state.                                                      */
 766:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 767:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 768:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 769:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 770:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 771:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
 772:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 773:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 774:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
 775:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
ARM GAS  /tmp/cccRIBfL.s 			page 15


 776:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 777:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     else
 778:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 779:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Reset ADC all error code fields */
 780:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
 781:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 782:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 783:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Process unlocked */
 784:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
 785:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
 786:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_UNLOCK(hadc);
 787:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 788:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
 789:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
 790:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 791:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 792:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Enable end of conversion interrupt for regular group */
 793:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 794:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 795:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Check if Multimode enabled */
 796:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 797:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 798:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* if no external trigger present enable software conversion of regular channels */
 799:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
 801:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
 802:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 803:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
 804:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 805:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     else
 806:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 807:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* if instance of handle correspond to ADC1 and  no external trigger present enable software 
 808:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 809:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
 810:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
 811:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****           hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 812:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
 813:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 814:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 815:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 816:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return function status */
 817:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return HAL_OK;
 818:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 819:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 820:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 821:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Disables the interrupt and stop ADC conversion of regular channels.
 822:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * 
 823:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @note   Caution: This function will stop also injected channels.  
 824:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *
 825:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 826:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 827:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval HAL status.
 828:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 829:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
 830:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 831:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check the parameters */
 832:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
ARM GAS  /tmp/cccRIBfL.s 			page 16


 833:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 834:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Process locked */
 835:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_LOCK(hadc);
 836:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 837:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
 838:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Disable ADC peripheral */
 839:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_ADC_DISABLE(hadc);
 840:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 841:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
 842:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 843:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 844:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   	/* Disable ADC end of conversion interrupt for regular group */
 845:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 846:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 847:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set ADC state */
 848:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
 849:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 850:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
 851:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 852:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 853:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Process unlocked */
 854:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
 855:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 856:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return function status */
 857:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return HAL_OK;
 858:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 859:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 860:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
 861:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Handles ADC interrupt request  
 862:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
 863:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
 864:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval None
 865:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
 866:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
 867:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 868:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   uint32_t tmp1 = 0U, tmp2 = 0U;
 869:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 870:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check the parameters */
 871:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 872:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 873:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 874:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 875:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 876:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 877:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check End of conversion flag for regular channels */
 878:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(tmp1 && tmp2)
 879:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 880:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
 881:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 882:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 883:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Set ADC state */
 884:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 885:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 886:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 887:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular   */
 888:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.      */
 889:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Note: On STM32F2, there is no independent flag of end of sequence.   */
ARM GAS  /tmp/cccRIBfL.s 			page 17


 890:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /*       The test of scan sequence on going is done either with scan    */
 891:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /*       sequence disabled or with end of conversion flag set to        */
 892:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /*       of end of sequence.                                            */
 893:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 894:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 895:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 896:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 897:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 898:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Disable ADC end of single conversion interrupt on group regular */
 899:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Note: Overrun interrupt was enabled with EOC interrupt in          */
 900:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
 901:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* by overrun IRQ process below.                                      */
 902:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 903:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       
 904:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Set ADC state */
 905:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 906:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       
 907:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 908:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
 909:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 910:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
 911:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 912:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 913:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Conversion complete callback */ 
 914:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
 915:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 916:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Clear regular group conversion flag */
 917:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 918:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 919:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 920:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 921:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 922:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check End of conversion flag for injected channels */
 923:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(tmp1 && tmp2)
 924:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 925:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
 926:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 927:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 928:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Set ADC state */
 929:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 930:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 931:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 932:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group injected  */
 933:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* by external trigger, scan sequence on going or by automatic injected */
 934:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* conversion from group regular (same conditions as group regular      */
 935:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* interruption disabling above).                                       */
 936:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 937:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 938:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 939:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 940:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 941:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 942:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 943:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Disable ADC end of single conversion interrupt on group injected */
 944:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 945:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       
 946:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Set ADC state */
ARM GAS  /tmp/cccRIBfL.s 			page 18


 947:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 948:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 949:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 950:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       { 
 951:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 952:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
 953:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 954:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 955:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Conversion complete callback */ 
 956:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     HAL_ADCEx_InjectedConvCpltCallback(hadc);
 957:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 958:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Clear injected group conversion flag */
 959:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 960:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 961:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 962:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 963:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 964:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check Analog watchdog flag */
 965:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(tmp1 && tmp2)
 966:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 967:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 968:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 969:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Set ADC state */
 970:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 971:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       
 972:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Level out of window callback */ 
 973:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       HAL_ADC_LevelOutOfWindowCallback(hadc);
 974:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       
 975:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Clear the ADC analog watchdog flag */
 976:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 977:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 978:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 979:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 980:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 981:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 982:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check Overrun flag */
 983:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(tmp1 && tmp2)
 984:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 985:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Note: On STM32F2, ADC overrun can be set through other parameters    */
 986:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /*       refer to description of parameter "EOCSelection" for more      */
 987:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /*       details.                                                       */
 988:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 989:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set ADC error code to overrun */
 990:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 991:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 992:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Clear ADC overrun flag */
 993:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 994:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 995:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Error callback */ 
 996:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     HAL_ADC_ErrorCallback(hadc);
 997:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 998:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Clear the Overrun flag */
 999:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1000:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1001:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
1002:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1003:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
ARM GAS  /tmp/cccRIBfL.s 			page 19


1004:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Enables ADC DMA request after last transfer (Single-ADC mode) and enables ADC periphera
1005:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1006:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1007:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  pData The destination Buffer address.
1008:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  Length The length of data to be transferred from ADC peripheral to memory.
1009:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval HAL status
1010:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1011:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
1012:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
1013:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __IO uint32_t counter = 0U;
1014:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1015:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check the parameters */
1016:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1017:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
1018:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1019:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Process locked */
1020:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_LOCK(hadc);
1021:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1022:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Enable the ADC peripheral */
1023:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check if ADC peripheral is disabled in order to enable it and wait during 
1024:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   Tstab time the ADC's stabilization */
1025:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
1026:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {  
1027:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Enable the Peripheral */
1028:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_ADC_ENABLE(hadc);
1029:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1030:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Delay for ADC stabilization time */
1031:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Compute number of CPU cycles to wait for */
1032:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
1033:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     while(counter != 0U)
1034:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
1035:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       counter--;
1036:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
1037:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1038:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1039:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Start conversion if ADC is effectively enabled */
1040:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
1041:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
1042:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set ADC state                                                          */
1043:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* - Clear state bitfield related to regular group conversion results     */
1044:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* - Set state bitfield related to regular group operation                */
1045:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1046:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
1047:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY);
1048:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1049:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* If conversions on group regular are also triggering group injected,    */
1050:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* update ADC state.                                                      */
1051:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
1052:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
1053:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
1054:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
1055:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1056:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* State machine update: Check if an injected conversion is ongoing */
1057:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1058:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
1059:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Reset ADC error code fields related to conversions on group regular */
1060:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
ARM GAS  /tmp/cccRIBfL.s 			page 20


1061:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
1062:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     else
1063:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
1064:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Reset ADC all error code fields */
1065:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       ADC_CLEAR_ERRORCODE(hadc);
1066:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
1067:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1068:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Process unlocked */
1069:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Unlock before starting ADC conversions: in case of potential           */
1070:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* interruption, to let the process to ADC IRQ Handler.                   */
1071:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_UNLOCK(hadc);   
1072:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1073:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set the DMA transfer complete callback */
1074:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
1075:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1076:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set the DMA half transfer complete callback */
1077:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
1078:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1079:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set the DMA error callback */
1080:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
1081:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1082:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1083:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
1084:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* start (in case of SW start):                                           */
1085:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1086:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Clear regular group conversion flag and overrun flag */
1087:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* (To ensure of no unknown state from potential previous ADC operations) */
1088:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
1089:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1090:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Enable ADC overrun interrupt */
1091:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
1092:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1093:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Enable ADC DMA mode */
1094:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->CR2 |= ADC_CR2_DMA;
1095:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1096:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Start the DMA channel */
1097:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
1098:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1099:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Check if Multimode enabled */
1100:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
1101:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
1102:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* if no external trigger present enable software conversion of regular channels */
1103:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
1104:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
1105:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
1106:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
1107:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
1108:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
1109:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     else
1110:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
1111:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* if instance of handle correspond to ADC1 and  no external trigger present enable software 
1112:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
1113:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
1114:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         /* Enable the selected ADC software conversion for regular group */
1115:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****           hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
1116:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
1117:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
ARM GAS  /tmp/cccRIBfL.s 			page 21


1118:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1119:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1120:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return function status */
1121:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return HAL_OK;
1122:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
1123:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1124:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
1125:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Disables ADC DMA (Single-ADC mode) and disables ADC peripheral    
1126:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1127:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1128:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval HAL status
1129:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1130:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
1131:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
1132:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1133:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1134:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check the parameters */
1135:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1136:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1137:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Process locked */
1138:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_LOCK(hadc);
1139:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1140:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Stop potential conversion on going, on regular and injected groups */
1141:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Disable ADC peripheral */
1142:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_ADC_DISABLE(hadc);
1143:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1144:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check if ADC is effectively disabled */
1145:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
1146:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
1147:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Disable the selected ADC DMA mode */
1148:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->CR2 &= ~ADC_CR2_DMA;
1149:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1150:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
1151:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* DMA transfer is on going)                                              */
1152:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
1153:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1154:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
1155:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
1156:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1157:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set ADC state */
1158:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
1159:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1160:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                       HAL_ADC_STATE_READY);
1161:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1162:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1163:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Process unlocked */
1164:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1165:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1166:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return function status */
1167:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return tmp_hal_status;
1168:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
1169:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1170:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
1171:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Gets the converted value from data register of regular channel.
1172:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1173:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1174:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval Converted value
ARM GAS  /tmp/cccRIBfL.s 			page 22


1175:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1176:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
1177:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {       
1178:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return the selected ADC converted value */ 
1179:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return hadc->Instance->DR;
1180:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
1181:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1182:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
1183:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Regular conversion complete callback in non blocking mode 
1184:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1185:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1186:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval None
1187:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1188:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
1189:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
1190:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1191:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   UNUSED(hadc);
1192:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1193:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****             the HAL_ADC_ConvCpltCallback could be implemented in the user file
1194:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****    */
1195:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
1196:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1197:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
1198:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Regular conversion half DMA transfer callback in non blocking mode 
1199:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1200:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1201:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval None
1202:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1203:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
1204:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
1205:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1206:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   UNUSED(hadc);
1207:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1208:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****             the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
1209:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****    */
1210:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
1211:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1212:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
1213:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Analog watchdog callback in non blocking mode 
1214:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1215:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1216:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval None
1217:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1218:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
1219:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
1220:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1221:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   UNUSED(hadc);
1222:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1223:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****             the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
1224:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****    */
1225:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
1226:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1227:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
1228:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Error ADC callback.
1229:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @note   In case of error due to overrun when using ADC with DMA transfer 
1230:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         (HAL ADC handle paramater "ErrorCode" to state "HAL_ADC_ERROR_OVR"):
1231:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         - Reinitialize the DMA using function "HAL_ADC_Stop_DMA()".
ARM GAS  /tmp/cccRIBfL.s 			page 23


1232:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         - If needed, restart a new ADC conversion using function
1233:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *           "HAL_ADC_Start_DMA()"
1234:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *           (this function is also clearing overrun flag)
1235:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1236:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1237:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval None
1238:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1239:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
1240:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
1241:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1242:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   UNUSED(hadc);
1243:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1244:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****             the HAL_ADC_ErrorCallback could be implemented in the user file
1245:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****    */
1246:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
1247:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1248:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
1249:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @}
1250:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1251:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1252:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
1253:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  *  @brief   	Peripheral Control functions 
1254:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  *
1255:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** @verbatim   
1256:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  ===============================================================================
1257:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****              ##### Peripheral Control functions #####
1258:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  ===============================================================================  
1259:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1260:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Configure regular channels. 
1261:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Configure injected channels.
1262:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Configure multimode.
1263:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Configure the analog watch dog.
1264:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       
1265:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** @endverbatim
1266:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @{
1267:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1268:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1269:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /**
1270:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
1271:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         rank in the sequencer and its sample time.
1272:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1273:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1274:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  sConfig ADC configuration structure. 
1275:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval HAL status
1276:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1277:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
1278:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
1279:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __IO uint32_t counter = 0U;
1280:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1281:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check the parameters */
1282:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(sConfig->Channel));
1283:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
1284:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
1285:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1286:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Process locked */
1287:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_LOCK(hadc);
1288:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
ARM GAS  /tmp/cccRIBfL.s 			page 24


1289:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
1290:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if (sConfig->Channel > ADC_CHANNEL_9)
1291:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
1292:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Clear the old sample time */
1293:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
1294:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1295:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set the new sample time */
1296:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
1297:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1298:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
1299:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
1300:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Clear the old sample time */
1301:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
1302:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1303:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set the new sample time */
1304:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
1305:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1306:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1307:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* For Rank 1 to 6 */
1308:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if (sConfig->Rank < 7U)
1309:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
1310:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Clear the old SQx bits for the selected rank */
1311:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
1312:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1313:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set the SQx bits for the selected rank */
1314:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
1315:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1316:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* For Rank 7 to 12 */
1317:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   else if (sConfig->Rank < 13U)
1318:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
1319:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Clear the old SQx bits for the selected rank */
1320:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
1321:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1322:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set the SQx bits for the selected rank */
1323:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
1324:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1325:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* For Rank 13 to 16 */
1326:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   else
1327:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
1328:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Clear the old SQx bits for the selected rank */
1329:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
1330:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1331:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set the SQx bits for the selected rank */
1332:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
1333:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1334:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1335:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* if ADC1 Channel_18 is selected enable VBAT Channel */
1336:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
1337:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
1338:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Enable the VBAT channel*/
1339:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     ADC->CCR |= ADC_CCR_VBATE;
1340:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1341:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1342:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VRE
1343:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channe
1344:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
1345:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Enable the TSVREFE channel*/
ARM GAS  /tmp/cccRIBfL.s 			page 25


1346:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     ADC->CCR |= ADC_CCR_TSVREFE;
1347:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1348:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
1349:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
1350:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Delay for temperature sensor stabilization time */
1351:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Compute number of CPU cycles to wait for */
1352:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
1353:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       while(counter != 0U)
1354:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
1355:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         counter--;
1356:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
1357:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
1358:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1359:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1360:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Process unlocked */
1361:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1362:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1363:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return function status */
1364:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return HAL_OK;
1365:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
1366:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1367:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
1368:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Configures the analog watchdog.
1369:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @note Analog watchdog thresholds can be modified while ADC conversion
1370:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * is on going.
1371:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * In this case, some constraints must be taken into account:
1372:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * The programmed threshold values are effective from the next
1373:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * ADC EOC (end of unitary conversion).
1374:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * Considering that registers write delay may happen due to
1375:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * bus activity, this might cause an uncertainty on the
1376:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * effective timing of the new programmed threshold values.
1377:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1378:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1379:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  AnalogWDGConfig pointer to an ADC_AnalogWDGConfTypeDef structure 
1380:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         that contains the configuration information of ADC analog watchdog.
1381:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval HAL status	  
1382:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1383:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* Analog
1384:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
1385:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** #ifdef USE_FULL_ASSERT  
1386:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   uint32_t tmp = 0U;
1387:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** #endif /* USE_FULL_ASSERT  */  
1388:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1389:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check the parameters */
1390:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(AnalogWDGConfig->WatchdogMode));
1391:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
1392:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
1393:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1394:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** #ifdef USE_FULL_ASSERT  
1395:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   tmp = ADC_GET_RESOLUTION(hadc);
1396:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
1397:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
1398:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** #endif /* USE_FULL_ASSERT  */
1399:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1400:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Process locked */
1401:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_LOCK(hadc);
1402:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
ARM GAS  /tmp/cccRIBfL.s 			page 26


1403:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(AnalogWDGConfig->ITMode == ENABLE)
1404:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
1405:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Enable the ADC Analog watchdog interrupt */
1406:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
1407:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1408:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   else
1409:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
1410:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Disable the ADC Analog watchdog interrupt */
1411:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
1412:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1413:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1414:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Clear AWDEN, JAWDEN and AWDSGL bits */
1415:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
1416:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1417:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set the analog watchdog enable mode */
1418:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
1419:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1420:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set the high threshold */
1421:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
1422:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1423:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set the low threshold */
1424:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
1425:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1426:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Clear the Analog watchdog channel select bits */
1427:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
1428:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1429:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set the Analog watchdog channel */
1430:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
1431:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1432:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Process unlocked */
1433:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1434:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1435:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return function status */
1436:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return HAL_OK;
1437:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
1438:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1439:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
1440:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @}
1441:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1442:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1443:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 ADC Peripheral State functions
1444:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  *  @brief   ADC Peripheral State functions 
1445:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  *
1446:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** @verbatim   
1447:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  ===============================================================================
1448:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****             ##### Peripheral State and errors functions #####
1449:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****  ===============================================================================  
1450:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     [..]
1451:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     This subsection provides functions allowing to
1452:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Check the ADC state
1453:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       (+) Check the ADC Error
1454:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****          
1455:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** @endverbatim
1456:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @{
1457:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1458:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1459:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
ARM GAS  /tmp/cccRIBfL.s 			page 27


1460:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  return the ADC state
1461:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1462:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1463:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval HAL state
1464:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1465:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
1466:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
1467:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return ADC state */
1468:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return hadc->State;
1469:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
1470:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1471:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
1472:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Return the ADC error code
1473:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1474:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.
1475:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval ADC Error Code
1476:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1477:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
1478:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
1479:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return hadc->ErrorCode;
1480:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
1481:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1482:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
1483:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @}
1484:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1485:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1486:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /** @addtogroup ADC_Private_Functions
1487:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @{
1488:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1489:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1490:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
1491:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
1492:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         in the ADC_InitStruct without initializing the ADC MSP.       
1493:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
1494:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *         the configuration information for the specified ADC.  
1495:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval None
1496:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1497:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** static void ADC_Init(ADC_HandleTypeDef* hadc)
1498:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
  25              		.loc 1 1498 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
1499:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set ADC parameters */
1500:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set the ADC clock prescaler */
1501:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   ADC->CCR &= ~(ADC_CCR_ADCPRE);
  31              		.loc 1 1501 0
  32 0000 4C4B     		ldr	r3, .L7
  33 0002 5A68     		ldr	r2, [r3, #4]
  34 0004 22F44032 		bic	r2, r2, #196608
  35 0008 5A60     		str	r2, [r3, #4]
1502:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   ADC->CCR |=  hadc->Init.ClockPrescaler;
  36              		.loc 1 1502 0
  37 000a 5A68     		ldr	r2, [r3, #4]
  38 000c 4168     		ldr	r1, [r0, #4]
ARM GAS  /tmp/cccRIBfL.s 			page 28


  39 000e 0A43     		orrs	r2, r2, r1
  40 0010 5A60     		str	r2, [r3, #4]
1503:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1504:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set ADC scan mode */
1505:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
  41              		.loc 1 1505 0
  42 0012 0268     		ldr	r2, [r0]
  43 0014 5368     		ldr	r3, [r2, #4]
  44 0016 23F48073 		bic	r3, r3, #256
  45 001a 5360     		str	r3, [r2, #4]
1506:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
  46              		.loc 1 1506 0
  47 001c 0268     		ldr	r2, [r0]
  48 001e 5368     		ldr	r3, [r2, #4]
  49 0020 0169     		ldr	r1, [r0, #16]
  50 0022 43EA0123 		orr	r3, r3, r1, lsl #8
  51 0026 5360     		str	r3, [r2, #4]
1507:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1508:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set ADC resolution */
1509:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  52              		.loc 1 1509 0
  53 0028 0268     		ldr	r2, [r0]
  54 002a 5368     		ldr	r3, [r2, #4]
  55 002c 23F04073 		bic	r3, r3, #50331648
  56 0030 5360     		str	r3, [r2, #4]
1510:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR1 |=  hadc->Init.Resolution;
  57              		.loc 1 1510 0
  58 0032 0268     		ldr	r2, [r0]
  59 0034 5368     		ldr	r3, [r2, #4]
  60 0036 8168     		ldr	r1, [r0, #8]
  61 0038 0B43     		orrs	r3, r3, r1
  62 003a 5360     		str	r3, [r2, #4]
1511:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1512:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set ADC data alignment */
1513:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  63              		.loc 1 1513 0
  64 003c 0268     		ldr	r2, [r0]
  65 003e 9368     		ldr	r3, [r2, #8]
  66 0040 23F40063 		bic	r3, r3, #2048
  67 0044 9360     		str	r3, [r2, #8]
1514:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR2 |= hadc->Init.DataAlign;
  68              		.loc 1 1514 0
  69 0046 0268     		ldr	r2, [r0]
  70 0048 9368     		ldr	r3, [r2, #8]
  71 004a C168     		ldr	r1, [r0, #12]
  72 004c 0B43     		orrs	r3, r3, r1
  73 004e 9360     		str	r3, [r2, #8]
1515:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1516:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Enable external trigger if trigger selection is different of software  */
1517:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* start.                                                                 */
1518:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Note: This configuration keeps the hardware feature of parameter       */
1519:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
1520:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /*       software start.                                                  */
1521:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  74              		.loc 1 1521 0
  75 0050 826A     		ldr	r2, [r0, #40]
  76 0052 394B     		ldr	r3, .L7+4
ARM GAS  /tmp/cccRIBfL.s 			page 29


  77 0054 9A42     		cmp	r2, r3
  78 0056 49D0     		beq	.L2
1522:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
1523:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Select external trigger to start conversion */
1524:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
  79              		.loc 1 1524 0
  80 0058 0268     		ldr	r2, [r0]
  81 005a 9368     		ldr	r3, [r2, #8]
  82 005c 23F07063 		bic	r3, r3, #251658240
  83 0060 9360     		str	r3, [r2, #8]
1525:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
  84              		.loc 1 1525 0
  85 0062 0268     		ldr	r2, [r0]
  86 0064 9368     		ldr	r3, [r2, #8]
  87 0066 816A     		ldr	r1, [r0, #40]
  88 0068 0B43     		orrs	r3, r3, r1
  89 006a 9360     		str	r3, [r2, #8]
1526:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1527:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Select external trigger polarity */
1528:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  90              		.loc 1 1528 0
  91 006c 0268     		ldr	r2, [r0]
  92 006e 9368     		ldr	r3, [r2, #8]
  93 0070 23F04053 		bic	r3, r3, #805306368
  94 0074 9360     		str	r3, [r2, #8]
1529:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
  95              		.loc 1 1529 0
  96 0076 0268     		ldr	r2, [r0]
  97 0078 9368     		ldr	r3, [r2, #8]
  98 007a C16A     		ldr	r1, [r0, #44]
  99 007c 0B43     		orrs	r3, r3, r1
 100 007e 9360     		str	r3, [r2, #8]
 101              	.L3:
1530:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1531:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   else
1532:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
1533:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Reset the external trigger */
1534:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
1535:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
1536:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1537:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1538:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Enable or disable ADC continuous conversion mode */
1539:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 102              		.loc 1 1539 0
 103 0080 0268     		ldr	r2, [r0]
 104 0082 9368     		ldr	r3, [r2, #8]
 105 0084 23F00203 		bic	r3, r3, #2
 106 0088 9360     		str	r3, [r2, #8]
1540:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 107              		.loc 1 1540 0
 108 008a 0268     		ldr	r2, [r0]
 109 008c 9368     		ldr	r3, [r2, #8]
 110 008e 8169     		ldr	r1, [r0, #24]
 111 0090 43EA4103 		orr	r3, r3, r1, lsl #1
 112 0094 9360     		str	r3, [r2, #8]
1541:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1542:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if(hadc->Init.DiscontinuousConvMode != DISABLE)
ARM GAS  /tmp/cccRIBfL.s 			page 30


 113              		.loc 1 1542 0
 114 0096 036A     		ldr	r3, [r0, #32]
 115 0098 002B     		cmp	r3, #0
 116 009a 32D1     		bne	.L6
1543:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
1544:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
1545:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1546:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
1547:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
1548:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1549:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set the number of channels to be converted in discontinuous mode */
1550:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
1551:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
1552:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1553:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   else
1554:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
1555:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
1556:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 117              		.loc 1 1556 0
 118 009c 0268     		ldr	r2, [r0]
 119 009e 5368     		ldr	r3, [r2, #4]
 120 00a0 23F40063 		bic	r3, r3, #2048
 121 00a4 5360     		str	r3, [r2, #4]
 122              	.L5:
1557:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1558:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1559:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set ADC number of conversion */
1560:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 123              		.loc 1 1560 0
 124 00a6 0268     		ldr	r2, [r0]
 125 00a8 D36A     		ldr	r3, [r2, #44]
 126 00aa 23F47003 		bic	r3, r3, #15728640
 127 00ae D362     		str	r3, [r2, #44]
1561:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 128              		.loc 1 1561 0
 129 00b0 0168     		ldr	r1, [r0]
 130 00b2 CB6A     		ldr	r3, [r1, #44]
 131 00b4 C269     		ldr	r2, [r0, #28]
 132 00b6 013A     		subs	r2, r2, #1
 133 00b8 43EA0253 		orr	r3, r3, r2, lsl #20
 134 00bc CB62     		str	r3, [r1, #44]
1562:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1563:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Enable or disable ADC DMA continuous request */
1564:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 135              		.loc 1 1564 0
 136 00be 0268     		ldr	r2, [r0]
 137 00c0 9368     		ldr	r3, [r2, #8]
 138 00c2 23F40073 		bic	r3, r3, #512
 139 00c6 9360     		str	r3, [r2, #8]
1565:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 140              		.loc 1 1565 0
 141 00c8 0268     		ldr	r2, [r0]
 142 00ca 9368     		ldr	r3, [r2, #8]
 143 00cc 016B     		ldr	r1, [r0, #48]
 144 00ce 43EA4123 		orr	r3, r3, r1, lsl #9
 145 00d2 9360     		str	r3, [r2, #8]
1566:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
ARM GAS  /tmp/cccRIBfL.s 			page 31


1567:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Enable or disable ADC end of conversion selection */
1568:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 146              		.loc 1 1568 0
 147 00d4 0268     		ldr	r2, [r0]
 148 00d6 9368     		ldr	r3, [r2, #8]
 149 00d8 23F48063 		bic	r3, r3, #1024
 150 00dc 9360     		str	r3, [r2, #8]
1569:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 151              		.loc 1 1569 0
 152 00de 0268     		ldr	r2, [r0]
 153 00e0 9368     		ldr	r3, [r2, #8]
 154 00e2 4169     		ldr	r1, [r0, #20]
 155 00e4 43EA8123 		orr	r3, r3, r1, lsl #10
 156 00e8 9360     		str	r3, [r2, #8]
1570:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 157              		.loc 1 1570 0
 158 00ea 7047     		bx	lr
 159              	.L2:
1534:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 160              		.loc 1 1534 0
 161 00ec 0268     		ldr	r2, [r0]
 162 00ee 9368     		ldr	r3, [r2, #8]
 163 00f0 23F07063 		bic	r3, r3, #251658240
 164 00f4 9360     		str	r3, [r2, #8]
1535:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 165              		.loc 1 1535 0
 166 00f6 0268     		ldr	r2, [r0]
 167 00f8 9368     		ldr	r3, [r2, #8]
 168 00fa 23F04053 		bic	r3, r3, #805306368
 169 00fe 9360     		str	r3, [r2, #8]
 170 0100 BEE7     		b	.L3
 171              	.L6:
1547:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 172              		.loc 1 1547 0
 173 0102 0268     		ldr	r2, [r0]
 174 0104 5368     		ldr	r3, [r2, #4]
 175 0106 43F40063 		orr	r3, r3, #2048
 176 010a 5360     		str	r3, [r2, #4]
1550:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 177              		.loc 1 1550 0
 178 010c 0268     		ldr	r2, [r0]
 179 010e 5368     		ldr	r3, [r2, #4]
 180 0110 23F46043 		bic	r3, r3, #57344
 181 0114 5360     		str	r3, [r2, #4]
1551:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 182              		.loc 1 1551 0
 183 0116 436A     		ldr	r3, [r0, #36]
 184 0118 013B     		subs	r3, r3, #1
 185              	.LVL1:
 186              	.LBB4:
 187              	.LBB5:
 188              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
ARM GAS  /tmp/cccRIBfL.s 			page 32


   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cccRIBfL.s 			page 33


  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
ARM GAS  /tmp/cccRIBfL.s 			page 34


 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cccRIBfL.s 			page 35


 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
ARM GAS  /tmp/cccRIBfL.s 			page 36


 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/cccRIBfL.s 			page 37


 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cccRIBfL.s 			page 38


 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
ARM GAS  /tmp/cccRIBfL.s 			page 39


 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cccRIBfL.s 			page 40


 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cccRIBfL.s 			page 41


 519:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 189              		.loc 2 531 0
 190 011a 4FF46042 		mov	r2, #57344
 191              		.syntax unified
 192              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 193 011e 92FAA2F2 		rbit r2, r2
 194              	@ 0 "" 2
 195              	.LVL2:
 196              		.thumb
 197              		.syntax unified
 198              	.LBE5:
 199              	.LBE4:
1551:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 200              		.loc 1 1551 0
 201 0122 B2FA82F2 		clz	r2, r2
 202 0126 9340     		lsls	r3, r3, r2
 203 0128 0168     		ldr	r1, [r0]
 204 012a 4A68     		ldr	r2, [r1, #4]
 205 012c 1343     		orrs	r3, r3, r2
 206 012e 4B60     		str	r3, [r1, #4]
 207 0130 B9E7     		b	.L5
 208              	.L8:
 209 0132 00BF     		.align	2
 210              	.L7:
 211 0134 00230140 		.word	1073816320
 212 0138 0100000F 		.word	251658241
 213              		.cfi_endproc
 214              	.LFE88:
 216              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
 217              		.align	1
 218              		.weak	HAL_ADC_MspInit
 219              		.syntax unified
 220              		.thumb
 221              		.thumb_func
 222              		.fpu softvfp
 224              	HAL_ADC_MspInit:
 225              	.LFB68:
 382:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 226              		.loc 1 382 0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 0
 229              		@ frame_needed = 0, uses_anonymous_args = 0
 230              		@ link register save eliminated.
 231              	.LVL3:
 388:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
ARM GAS  /tmp/cccRIBfL.s 			page 42


 232              		.loc 1 388 0
 233 0000 7047     		bx	lr
 234              		.cfi_endproc
 235              	.LFE68:
 237              		.section	.text.HAL_ADC_Init,"ax",%progbits
 238              		.align	1
 239              		.global	HAL_ADC_Init
 240              		.syntax unified
 241              		.thumb
 242              		.thumb_func
 243              		.fpu softvfp
 245              	HAL_ADC_Init:
 246              	.LFB66:
 257:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 247              		.loc 1 257 0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 0
 250              		@ frame_needed = 0, uses_anonymous_args = 0
 251              	.LVL4:
 261:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 252              		.loc 1 261 0
 253 0000 30B3     		cbz	r0, .L14
 257:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 254              		.loc 1 257 0
 255 0002 10B5     		push	{r4, lr}
 256              	.LCFI0:
 257              		.cfi_def_cfa_offset 8
 258              		.cfi_offset 4, -8
 259              		.cfi_offset 14, -4
 260 0004 0446     		mov	r4, r0
 284:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 261              		.loc 1 284 0
 262 0006 036C     		ldr	r3, [r0, #64]
 263 0008 43B1     		cbz	r3, .L20
 264              	.LVL5:
 265              	.L12:
 298:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 266              		.loc 1 298 0
 267 000a 236C     		ldr	r3, [r4, #64]
 268 000c 13F0100F 		tst	r3, #16
 269 0010 0AD0     		beq	.L21
 318:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 270              		.loc 1 318 0
 271 0012 0120     		movs	r0, #1
 272              	.L13:
 273              	.LVL6:
 322:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 274              		.loc 1 322 0
 275 0014 0023     		movs	r3, #0
 276 0016 84F83C30 		strb	r3, [r4, #60]
 326:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 277              		.loc 1 326 0
 278 001a 10BD     		pop	{r4, pc}
 279              	.LVL7:
 280              	.L20:
 287:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 281              		.loc 1 287 0
ARM GAS  /tmp/cccRIBfL.s 			page 43


 282 001c 4364     		str	r3, [r0, #68]
 290:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 283              		.loc 1 290 0
 284 001e 80F83C30 		strb	r3, [r0, #60]
 293:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 285              		.loc 1 293 0
 286 0022 FFF7FEFF 		bl	HAL_ADC_MspInit
 287              	.LVL8:
 288 0026 F0E7     		b	.L12
 289              	.L21:
 301:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 290              		.loc 1 301 0
 291 0028 236C     		ldr	r3, [r4, #64]
 292 002a 23F48853 		bic	r3, r3, #4352
 293 002e 23F00203 		bic	r3, r3, #2
 294 0032 43F00203 		orr	r3, r3, #2
 295 0036 2364     		str	r3, [r4, #64]
 306:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 296              		.loc 1 306 0
 297 0038 2046     		mov	r0, r4
 298 003a FFF7FEFF 		bl	ADC_Init
 299              	.LVL9:
 309:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 300              		.loc 1 309 0
 301 003e 0020     		movs	r0, #0
 302 0040 6064     		str	r0, [r4, #68]
 312:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL,
 303              		.loc 1 312 0
 304 0042 236C     		ldr	r3, [r4, #64]
 305 0044 23F00303 		bic	r3, r3, #3
 306 0048 43F00103 		orr	r3, r3, #1
 307 004c 2364     		str	r3, [r4, #64]
 308 004e E1E7     		b	.L13
 309              	.LVL10:
 310              	.L14:
 311              	.LCFI1:
 312              		.cfi_def_cfa_offset 0
 313              		.cfi_restore 4
 314              		.cfi_restore 14
 263:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 315              		.loc 1 263 0
 316 0050 0120     		movs	r0, #1
 317              	.LVL11:
 326:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 318              		.loc 1 326 0
 319 0052 7047     		bx	lr
 320              		.cfi_endproc
 321              	.LFE66:
 323              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
 324              		.align	1
 325              		.weak	HAL_ADC_MspDeInit
 326              		.syntax unified
 327              		.thumb
 328              		.thumb_func
 329              		.fpu softvfp
 331              	HAL_ADC_MspDeInit:
 332              	.LFB69:
ARM GAS  /tmp/cccRIBfL.s 			page 44


 397:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 333              		.loc 1 397 0
 334              		.cfi_startproc
 335              		@ args = 0, pretend = 0, frame = 0
 336              		@ frame_needed = 0, uses_anonymous_args = 0
 337              		@ link register save eliminated.
 338              	.LVL12:
 403:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 339              		.loc 1 403 0
 340 0000 7047     		bx	lr
 341              		.cfi_endproc
 342              	.LFE69:
 344              		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 345              		.align	1
 346              		.global	HAL_ADC_DeInit
 347              		.syntax unified
 348              		.thumb
 349              		.thumb_func
 350              		.fpu softvfp
 352              	HAL_ADC_DeInit:
 353              	.LFB67:
 335:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 354              		.loc 1 335 0
 355              		.cfi_startproc
 356              		@ args = 0, pretend = 0, frame = 0
 357              		@ frame_needed = 0, uses_anonymous_args = 0
 358              	.LVL13:
 339:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 359              		.loc 1 339 0
 360 0000 C8B1     		cbz	r0, .L26
 335:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 361              		.loc 1 335 0
 362 0002 10B5     		push	{r4, lr}
 363              	.LCFI2:
 364              		.cfi_def_cfa_offset 8
 365              		.cfi_offset 4, -8
 366              		.cfi_offset 14, -4
 367 0004 0446     		mov	r4, r0
 348:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 368              		.loc 1 348 0
 369 0006 036C     		ldr	r3, [r0, #64]
 370 0008 43F00203 		orr	r3, r3, #2
 371 000c 0364     		str	r3, [r0, #64]
 352:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 372              		.loc 1 352 0
 373 000e 0268     		ldr	r2, [r0]
 374 0010 9368     		ldr	r3, [r2, #8]
 375 0012 23F00103 		bic	r3, r3, #1
 376 0016 9360     		str	r3, [r2, #8]
 356:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 377              		.loc 1 356 0
 378 0018 0368     		ldr	r3, [r0]
 379 001a 9B68     		ldr	r3, [r3, #8]
 380 001c 13F0010F 		tst	r3, #1
 381 0020 03D0     		beq	.L31
 382              	.LVL14:
 383              	.L25:
ARM GAS  /tmp/cccRIBfL.s 			page 45


 369:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 384              		.loc 1 369 0
 385 0022 0020     		movs	r0, #0
 386 0024 84F83C00 		strb	r0, [r4, #60]
 373:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 387              		.loc 1 373 0
 388 0028 10BD     		pop	{r4, pc}
 389              	.LVL15:
 390              	.L31:
 359:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 391              		.loc 1 359 0
 392 002a FFF7FEFF 		bl	HAL_ADC_MspDeInit
 393              	.LVL16:
 362:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 394              		.loc 1 362 0
 395 002e 0023     		movs	r3, #0
 396 0030 6364     		str	r3, [r4, #68]
 365:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 397              		.loc 1 365 0
 398 0032 2364     		str	r3, [r4, #64]
 399 0034 F5E7     		b	.L25
 400              	.LVL17:
 401              	.L26:
 402              	.LCFI3:
 403              		.cfi_def_cfa_offset 0
 404              		.cfi_restore 4
 405              		.cfi_restore 14
 341:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 406              		.loc 1 341 0
 407 0036 0120     		movs	r0, #1
 408              	.LVL18:
 373:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 409              		.loc 1 373 0
 410 0038 7047     		bx	lr
 411              		.cfi_endproc
 412              	.LFE67:
 414              		.section	.text.HAL_ADC_Start,"ax",%progbits
 415              		.align	1
 416              		.global	HAL_ADC_Start
 417              		.syntax unified
 418              		.thumb
 419              		.thumb_func
 420              		.fpu softvfp
 422              	HAL_ADC_Start:
 423              	.LFB70:
 436:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __IO uint32_t counter = 0U;
 424              		.loc 1 436 0
 425              		.cfi_startproc
 426              		@ args = 0, pretend = 0, frame = 8
 427              		@ frame_needed = 0, uses_anonymous_args = 0
 428              		@ link register save eliminated.
 429              	.LVL19:
 430 0000 82B0     		sub	sp, sp, #8
 431              	.LCFI4:
 432              		.cfi_def_cfa_offset 8
 437:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 433              		.loc 1 437 0
ARM GAS  /tmp/cccRIBfL.s 			page 46


 434 0002 0023     		movs	r3, #0
 435 0004 0193     		str	r3, [sp, #4]
 444:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 436              		.loc 1 444 0
 437 0006 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 438 000a 012B     		cmp	r3, #1
 439 000c 63D0     		beq	.L41
 444:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 440              		.loc 1 444 0 is_stmt 0 discriminator 2
 441 000e 0123     		movs	r3, #1
 442 0010 80F83C30 		strb	r3, [r0, #60]
 449:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {  
 443              		.loc 1 449 0 is_stmt 1 discriminator 2
 444 0014 0368     		ldr	r3, [r0]
 445 0016 9A68     		ldr	r2, [r3, #8]
 446 0018 12F0010F 		tst	r2, #1
 447 001c 13D1     		bne	.L34
 452:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 448              		.loc 1 452 0
 449 001e 9A68     		ldr	r2, [r3, #8]
 450 0020 42F00102 		orr	r2, r2, #1
 451 0024 9A60     		str	r2, [r3, #8]
 456:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     while(counter != 0U)
 452              		.loc 1 456 0
 453 0026 304B     		ldr	r3, .L48
 454 0028 1B68     		ldr	r3, [r3]
 455 002a 304A     		ldr	r2, .L48+4
 456 002c A2FB0323 		umull	r2, r3, r2, r3
 457 0030 9B0C     		lsrs	r3, r3, #18
 458 0032 03EB4303 		add	r3, r3, r3, lsl #1
 459 0036 0193     		str	r3, [sp, #4]
 457:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 460              		.loc 1 457 0
 461 0038 02E0     		b	.L35
 462              	.L36:
 459:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 463              		.loc 1 459 0
 464 003a 019B     		ldr	r3, [sp, #4]
 465 003c 013B     		subs	r3, r3, #1
 466 003e 0193     		str	r3, [sp, #4]
 467              	.L35:
 457:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 468              		.loc 1 457 0
 469 0040 019B     		ldr	r3, [sp, #4]
 470 0042 002B     		cmp	r3, #0
 471 0044 F9D1     		bne	.L36
 472              	.L34:
 464:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 473              		.loc 1 464 0
 474 0046 0268     		ldr	r2, [r0]
 475 0048 9368     		ldr	r3, [r2, #8]
 476 004a 13F0010F 		tst	r3, #1
 477 004e 44D0     		beq	.L42
 469:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 478              		.loc 1 469 0
 479 0050 036C     		ldr	r3, [r0, #64]
 480 0052 23F4E063 		bic	r3, r3, #1792
ARM GAS  /tmp/cccRIBfL.s 			page 47


 481 0056 23F00103 		bic	r3, r3, #1
 482 005a 43F48073 		orr	r3, r3, #256
 483 005e 0364     		str	r3, [r0, #64]
 475:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 484              		.loc 1 475 0
 485 0060 5368     		ldr	r3, [r2, #4]
 486 0062 13F4806F 		tst	r3, #1024
 487 0066 05D0     		beq	.L37
 477:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 488              		.loc 1 477 0
 489 0068 036C     		ldr	r3, [r0, #64]
 490 006a 23F44053 		bic	r3, r3, #12288
 491 006e 43F48053 		orr	r3, r3, #4096
 492 0072 0364     		str	r3, [r0, #64]
 493              	.L37:
 481:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 494              		.loc 1 481 0
 495 0074 036C     		ldr	r3, [r0, #64]
 496 0076 13F4805F 		tst	r3, #4096
 497 007a 19D0     		beq	.L38
 484:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 498              		.loc 1 484 0
 499 007c 436C     		ldr	r3, [r0, #68]
 500 007e 23F00603 		bic	r3, r3, #6
 501 0082 4364     		str	r3, [r0, #68]
 502              	.L39:
 495:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 503              		.loc 1 495 0
 504 0084 0023     		movs	r3, #0
 505 0086 80F83C30 		strb	r3, [r0, #60]
 499:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 506              		.loc 1 499 0
 507 008a 6FF02203 		mvn	r3, #34
 508 008e 1360     		str	r3, [r2]
 502:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 509              		.loc 1 502 0
 510 0090 174B     		ldr	r3, .L48+8
 511 0092 5B68     		ldr	r3, [r3, #4]
 512 0094 13F01F0F 		tst	r3, #31
 513 0098 0DD1     		bne	.L40
 505:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
 514              		.loc 1 505 0
 515 009a 0368     		ldr	r3, [r0]
 516 009c 9A68     		ldr	r2, [r3, #8]
 517 009e 12F0405F 		tst	r2, #805306368
 518 00a2 1DD1     		bne	.L43
 508:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
 519              		.loc 1 508 0
 520 00a4 9A68     		ldr	r2, [r3, #8]
 521 00a6 42F08042 		orr	r2, r2, #1073741824
 522 00aa 9A60     		str	r2, [r3, #8]
 523:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 523              		.loc 1 523 0
 524 00ac 0020     		movs	r0, #0
 525              	.LVL20:
 526 00ae 15E0     		b	.L33
 527              	.LVL21:
ARM GAS  /tmp/cccRIBfL.s 			page 48


 528              	.L38:
 489:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 529              		.loc 1 489 0
 530 00b0 0023     		movs	r3, #0
 531 00b2 4364     		str	r3, [r0, #68]
 532 00b4 E6E7     		b	.L39
 533              	.L40:
 514:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
 534              		.loc 1 514 0
 535 00b6 0368     		ldr	r3, [r0]
 536 00b8 0E4A     		ldr	r2, .L48+12
 537 00ba 9342     		cmp	r3, r2
 538 00bc 01D0     		beq	.L47
 523:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 539              		.loc 1 523 0
 540 00be 0020     		movs	r0, #0
 541              	.LVL22:
 542 00c0 0CE0     		b	.L33
 543              	.LVL23:
 544              	.L47:
 514:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
 545              		.loc 1 514 0 discriminator 1
 546 00c2 9A68     		ldr	r2, [r3, #8]
 547 00c4 12F0405F 		tst	r2, #805306368
 548 00c8 0CD1     		bne	.L45
 517:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
 549              		.loc 1 517 0
 550 00ca 9A68     		ldr	r2, [r3, #8]
 551 00cc 42F08042 		orr	r2, r2, #1073741824
 552 00d0 9A60     		str	r2, [r3, #8]
 523:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 553              		.loc 1 523 0
 554 00d2 0020     		movs	r0, #0
 555              	.LVL24:
 556 00d4 02E0     		b	.L33
 557              	.LVL25:
 558              	.L41:
 444:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 559              		.loc 1 444 0
 560 00d6 0220     		movs	r0, #2
 561              	.LVL26:
 562 00d8 00E0     		b	.L33
 563              	.LVL27:
 564              	.L42:
 523:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 565              		.loc 1 523 0
 566 00da 0020     		movs	r0, #0
 567              	.LVL28:
 568              	.L33:
 524:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 569              		.loc 1 524 0
 570 00dc 02B0     		add	sp, sp, #8
 571              	.LCFI5:
 572              		.cfi_remember_state
 573              		.cfi_def_cfa_offset 0
 574              		@ sp needed
 575 00de 7047     		bx	lr
ARM GAS  /tmp/cccRIBfL.s 			page 49


 576              	.LVL29:
 577              	.L43:
 578              	.LCFI6:
 579              		.cfi_restore_state
 523:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 580              		.loc 1 523 0
 581 00e0 0020     		movs	r0, #0
 582              	.LVL30:
 583 00e2 FBE7     		b	.L33
 584              	.LVL31:
 585              	.L45:
 586 00e4 0020     		movs	r0, #0
 587              	.LVL32:
 588 00e6 F9E7     		b	.L33
 589              	.L49:
 590              		.align	2
 591              	.L48:
 592 00e8 00000000 		.word	SystemCoreClock
 593 00ec 83DE1B43 		.word	1125899907
 594 00f0 00230140 		.word	1073816320
 595 00f4 00200140 		.word	1073815552
 596              		.cfi_endproc
 597              	.LFE70:
 599              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 600              		.align	1
 601              		.global	HAL_ADC_Stop
 602              		.syntax unified
 603              		.thumb
 604              		.thumb_func
 605              		.fpu softvfp
 607              	HAL_ADC_Stop:
 608              	.LFB71:
 537:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check the parameters */
 609              		.loc 1 537 0
 610              		.cfi_startproc
 611              		@ args = 0, pretend = 0, frame = 0
 612              		@ frame_needed = 0, uses_anonymous_args = 0
 613              		@ link register save eliminated.
 614              	.LVL33:
 542:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 615              		.loc 1 542 0
 616 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 617 0004 012B     		cmp	r3, #1
 618 0006 19D0     		beq	.L53
 542:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 619              		.loc 1 542 0 is_stmt 0 discriminator 2
 620 0008 0123     		movs	r3, #1
 621 000a 80F83C30 		strb	r3, [r0, #60]
 546:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 622              		.loc 1 546 0 is_stmt 1 discriminator 2
 623 000e 0268     		ldr	r2, [r0]
 624 0010 9368     		ldr	r3, [r2, #8]
 625 0012 23F00103 		bic	r3, r3, #1
 626 0016 9360     		str	r3, [r2, #8]
 549:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 627              		.loc 1 549 0 discriminator 2
 628 0018 0368     		ldr	r3, [r0]
ARM GAS  /tmp/cccRIBfL.s 			page 50


 629 001a 9B68     		ldr	r3, [r3, #8]
 630 001c 13F0010F 		tst	r3, #1
 631 0020 07D1     		bne	.L52
 552:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 632              		.loc 1 552 0
 633 0022 036C     		ldr	r3, [r0, #64]
 634 0024 23F48853 		bic	r3, r3, #4352
 635 0028 23F00103 		bic	r3, r3, #1
 636 002c 43F00103 		orr	r3, r3, #1
 637 0030 0364     		str	r3, [r0, #64]
 638              	.L52:
 558:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 639              		.loc 1 558 0
 640 0032 0023     		movs	r3, #0
 641 0034 80F83C30 		strb	r3, [r0, #60]
 561:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 642              		.loc 1 561 0
 643 0038 1846     		mov	r0, r3
 644              	.LVL34:
 645 003a 7047     		bx	lr
 646              	.LVL35:
 647              	.L53:
 542:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 648              		.loc 1 542 0
 649 003c 0220     		movs	r0, #2
 650              	.LVL36:
 562:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 651              		.loc 1 562 0
 652 003e 7047     		bx	lr
 653              		.cfi_endproc
 654              	.LFE71:
 656              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
 657              		.align	1
 658              		.global	HAL_ADC_PollForConversion
 659              		.syntax unified
 660              		.thumb
 661              		.thumb_func
 662              		.fpu softvfp
 664              	HAL_ADC_PollForConversion:
 665              	.LFB72:
 580:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   uint32_t tickstart = 0U;
 666              		.loc 1 580 0
 667              		.cfi_startproc
 668              		@ args = 0, pretend = 0, frame = 0
 669              		@ frame_needed = 0, uses_anonymous_args = 0
 670              	.LVL37:
 589:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 671              		.loc 1 589 0
 672 0000 0368     		ldr	r3, [r0]
 673 0002 9A68     		ldr	r2, [r3, #8]
 674 0004 12F4806F 		tst	r2, #1024
 675 0008 03D0     		beq	.L55
 590:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 676              		.loc 1 590 0 discriminator 1
 677 000a 9B68     		ldr	r3, [r3, #8]
 589:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 678              		.loc 1 589 0 discriminator 1
ARM GAS  /tmp/cccRIBfL.s 			page 51


 679 000c 13F4807F 		tst	r3, #256
 680 0010 1CD1     		bne	.L69
 681              	.L55:
 580:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   uint32_t tickstart = 0U;
 682              		.loc 1 580 0
 683 0012 70B5     		push	{r4, r5, r6, lr}
 684              	.LCFI7:
 685              		.cfi_def_cfa_offset 16
 686              		.cfi_offset 4, -16
 687              		.cfi_offset 5, -12
 688              		.cfi_offset 6, -8
 689              		.cfi_offset 14, -4
 690 0014 0D46     		mov	r5, r1
 691 0016 0446     		mov	r4, r0
 602:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 692              		.loc 1 602 0
 693 0018 FFF7FEFF 		bl	HAL_GetTick
 694              	.LVL38:
 695 001c 0646     		mov	r6, r0
 696              	.LVL39:
 697              	.L58:
 605:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 698              		.loc 1 605 0
 699 001e 2368     		ldr	r3, [r4]
 700 0020 1A68     		ldr	r2, [r3]
 701 0022 12F0020F 		tst	r2, #2
 702 0026 1AD1     		bne	.L70
 608:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 703              		.loc 1 608 0
 704 0028 B5F1FF3F 		cmp	r5, #-1
 705 002c F7D0     		beq	.L58
 610:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
 706              		.loc 1 610 0
 707 002e 25B1     		cbz	r5, .L59
 610:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
 708              		.loc 1 610 0 is_stmt 0 discriminator 1
 709 0030 FFF7FEFF 		bl	HAL_GetTick
 710              	.LVL40:
 711 0034 801B     		subs	r0, r0, r6
 712 0036 A842     		cmp	r0, r5
 713 0038 F1D9     		bls	.L58
 714              	.L59:
 613:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         
 715              		.loc 1 613 0 is_stmt 1
 716 003a 236C     		ldr	r3, [r4, #64]
 717 003c 43F00403 		orr	r3, r3, #4
 718 0040 2364     		str	r3, [r4, #64]
 616:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         
 719              		.loc 1 616 0
 720 0042 0023     		movs	r3, #0
 721 0044 84F83C30 		strb	r3, [r4, #60]
 618:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
 722              		.loc 1 618 0
 723 0048 0320     		movs	r0, #3
 724 004a 2DE0     		b	.L56
 725              	.LVL41:
 726              	.L69:
ARM GAS  /tmp/cccRIBfL.s 			page 52


 727              	.LCFI8:
 728              		.cfi_def_cfa_offset 0
 729              		.cfi_restore 4
 730              		.cfi_restore 5
 731              		.cfi_restore 6
 732              		.cfi_restore 14
 593:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 733              		.loc 1 593 0
 734 004c 036C     		ldr	r3, [r0, #64]
 735 004e 43F02003 		orr	r3, r3, #32
 736 0052 0364     		str	r3, [r0, #64]
 596:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 737              		.loc 1 596 0
 738 0054 0023     		movs	r3, #0
 739 0056 80F83C30 		strb	r3, [r0, #60]
 598:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 740              		.loc 1 598 0
 741 005a 0120     		movs	r0, #1
 742              	.LVL42:
 651:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 743              		.loc 1 651 0
 744 005c 7047     		bx	lr
 745              	.LVL43:
 746              	.L70:
 747              	.LCFI9:
 748              		.cfi_def_cfa_offset 16
 749              		.cfi_offset 4, -16
 750              		.cfi_offset 5, -12
 751              		.cfi_offset 6, -8
 752              		.cfi_offset 14, -4
 624:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 753              		.loc 1 624 0
 754 005e 6FF01202 		mvn	r2, #18
 755 0062 1A60     		str	r2, [r3]
 627:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 756              		.loc 1 627 0
 757 0064 236C     		ldr	r3, [r4, #64]
 758 0066 43F40073 		orr	r3, r3, #512
 759 006a 2364     		str	r3, [r4, #64]
 635:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 760              		.loc 1 635 0
 761 006c 2368     		ldr	r3, [r4]
 762 006e 9A68     		ldr	r2, [r3, #8]
 763 0070 12F0405F 		tst	r2, #805306368
 764 0074 17D1     		bne	.L62
 636:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 765              		.loc 1 636 0 discriminator 1
 766 0076 A269     		ldr	r2, [r4, #24]
 635:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 767              		.loc 1 635 0 discriminator 1
 768 0078 BAB9     		cbnz	r2, .L63
 637:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 769              		.loc 1 637 0
 770 007a DA6A     		ldr	r2, [r3, #44]
 636:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 771              		.loc 1 636 0
 772 007c 12F4700F 		tst	r2, #15728640
ARM GAS  /tmp/cccRIBfL.s 			page 53


 773 0080 03D0     		beq	.L61
 638:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 774              		.loc 1 638 0
 775 0082 9B68     		ldr	r3, [r3, #8]
 637:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 776              		.loc 1 637 0
 777 0084 13F4806F 		tst	r3, #1024
 778 0088 11D1     		bne	.L64
 779              	.L61:
 641:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 780              		.loc 1 641 0
 781 008a 236C     		ldr	r3, [r4, #64]
 782 008c 23F48073 		bic	r3, r3, #256
 783 0090 2364     		str	r3, [r4, #64]
 643:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     { 
 784              		.loc 1 643 0
 785 0092 236C     		ldr	r3, [r4, #64]
 786 0094 13F4805F 		tst	r3, #4096
 787 0098 0BD1     		bne	.L65
 645:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 788              		.loc 1 645 0
 789 009a 236C     		ldr	r3, [r4, #64]
 790 009c 43F00103 		orr	r3, r3, #1
 791 00a0 2364     		str	r3, [r4, #64]
 650:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 792              		.loc 1 650 0
 793 00a2 0020     		movs	r0, #0
 794 00a4 00E0     		b	.L56
 795              	.L62:
 796 00a6 0020     		movs	r0, #0
 797              	.L56:
 651:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 798              		.loc 1 651 0
 799 00a8 70BD     		pop	{r4, r5, r6, pc}
 800              	.LVL44:
 801              	.L63:
 650:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 802              		.loc 1 650 0
 803 00aa 0020     		movs	r0, #0
 804 00ac FCE7     		b	.L56
 805              	.L64:
 806 00ae 0020     		movs	r0, #0
 807 00b0 FAE7     		b	.L56
 808              	.L65:
 809 00b2 0020     		movs	r0, #0
 810 00b4 F8E7     		b	.L56
 811              		.cfi_endproc
 812              	.LFE72:
 814              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 815              		.align	1
 816              		.global	HAL_ADC_PollForEvent
 817              		.syntax unified
 818              		.thumb
 819              		.thumb_func
 820              		.fpu softvfp
 822              	HAL_ADC_PollForEvent:
 823              	.LFB73:
ARM GAS  /tmp/cccRIBfL.s 			page 54


 665:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   uint32_t tickstart = 0U;
 824              		.loc 1 665 0
 825              		.cfi_startproc
 826              		@ args = 0, pretend = 0, frame = 0
 827              		@ frame_needed = 0, uses_anonymous_args = 0
 828              	.LVL45:
 829 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 830              	.LCFI10:
 831              		.cfi_def_cfa_offset 24
 832              		.cfi_offset 3, -24
 833              		.cfi_offset 4, -20
 834              		.cfi_offset 5, -16
 835              		.cfi_offset 6, -12
 836              		.cfi_offset 7, -8
 837              		.cfi_offset 14, -4
 838 0002 0446     		mov	r4, r0
 839 0004 0D46     		mov	r5, r1
 840 0006 1646     		mov	r6, r2
 841              	.LVL46:
 673:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 842              		.loc 1 673 0
 843 0008 FFF7FEFF 		bl	HAL_GetTick
 844              	.LVL47:
 845 000c 0746     		mov	r7, r0
 846              	.LVL48:
 847              	.L73:
 676:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 848              		.loc 1 676 0
 849 000e 2368     		ldr	r3, [r4]
 850 0010 1A68     		ldr	r2, [r3]
 851 0012 35EA0202 		bics	r2, r5, r2
 852 0016 11D0     		beq	.L79
 679:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 853              		.loc 1 679 0
 854 0018 B6F1FF3F 		cmp	r6, #-1
 855 001c F7D0     		beq	.L73
 681:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
 856              		.loc 1 681 0
 857 001e 26B1     		cbz	r6, .L74
 681:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
 858              		.loc 1 681 0 is_stmt 0 discriminator 1
 859 0020 FFF7FEFF 		bl	HAL_GetTick
 860              	.LVL49:
 861 0024 C01B     		subs	r0, r0, r7
 862 0026 B042     		cmp	r0, r6
 863 0028 F1D9     		bls	.L73
 864              	.L74:
 684:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         
 865              		.loc 1 684 0 is_stmt 1
 866 002a 236C     		ldr	r3, [r4, #64]
 867 002c 43F00403 		orr	r3, r3, #4
 868 0030 2364     		str	r3, [r4, #64]
 687:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         
 869              		.loc 1 687 0
 870 0032 0023     		movs	r3, #0
 871 0034 84F83C30 		strb	r3, [r4, #60]
 689:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
ARM GAS  /tmp/cccRIBfL.s 			page 55


 872              		.loc 1 689 0
 873 0038 0320     		movs	r0, #3
 874 003a 0DE0     		b	.L75
 875              	.L79:
 695:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 876              		.loc 1 695 0
 877 003c 012D     		cmp	r5, #1
 878 003e 0CD0     		beq	.L80
 707:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Set ADC error code to overrun */
 879              		.loc 1 707 0
 880 0040 226C     		ldr	r2, [r4, #64]
 881 0042 42F48062 		orr	r2, r2, #1024
 882 0046 2264     		str	r2, [r4, #64]
 709:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 883              		.loc 1 709 0
 884 0048 626C     		ldr	r2, [r4, #68]
 885 004a 42F00202 		orr	r2, r2, #2
 886 004e 6264     		str	r2, [r4, #68]
 712:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 887              		.loc 1 712 0
 888 0050 6FF02002 		mvn	r2, #32
 889 0054 1A60     		str	r2, [r3]
 716:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 890              		.loc 1 716 0
 891 0056 0020     		movs	r0, #0
 892              	.L75:
 717:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 893              		.loc 1 717 0
 894 0058 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 895              	.LVL50:
 896              	.L80:
 698:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       
 897              		.loc 1 698 0
 898 005a 226C     		ldr	r2, [r4, #64]
 899 005c 42F48032 		orr	r2, r2, #65536
 900 0060 2264     		str	r2, [r4, #64]
 701:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 901              		.loc 1 701 0
 902 0062 6FF00102 		mvn	r2, #1
 903 0066 1A60     		str	r2, [r3]
 716:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 904              		.loc 1 716 0
 905 0068 0020     		movs	r0, #0
 906 006a F5E7     		b	.L75
 907              		.cfi_endproc
 908              	.LFE73:
 910              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 911              		.align	1
 912              		.global	HAL_ADC_Start_IT
 913              		.syntax unified
 914              		.thumb
 915              		.thumb_func
 916              		.fpu softvfp
 918              	HAL_ADC_Start_IT:
 919              	.LFB74:
 727:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __IO uint32_t counter = 0U;
 920              		.loc 1 727 0
ARM GAS  /tmp/cccRIBfL.s 			page 56


 921              		.cfi_startproc
 922              		@ args = 0, pretend = 0, frame = 8
 923              		@ frame_needed = 0, uses_anonymous_args = 0
 924              		@ link register save eliminated.
 925              	.LVL51:
 926 0000 82B0     		sub	sp, sp, #8
 927              	.LCFI11:
 928              		.cfi_def_cfa_offset 8
 728:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 929              		.loc 1 728 0
 930 0002 0023     		movs	r3, #0
 931 0004 0193     		str	r3, [sp, #4]
 735:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 932              		.loc 1 735 0
 933 0006 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 934 000a 012B     		cmp	r3, #1
 935 000c 6AD0     		beq	.L90
 735:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 936              		.loc 1 735 0 is_stmt 0 discriminator 2
 937 000e 0123     		movs	r3, #1
 938 0010 80F83C30 		strb	r3, [r0, #60]
 740:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {  
 939              		.loc 1 740 0 is_stmt 1 discriminator 2
 940 0014 0368     		ldr	r3, [r0]
 941 0016 9A68     		ldr	r2, [r3, #8]
 942 0018 12F0010F 		tst	r2, #1
 943 001c 13D1     		bne	.L83
 743:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 944              		.loc 1 743 0
 945 001e 9A68     		ldr	r2, [r3, #8]
 946 0020 42F00102 		orr	r2, r2, #1
 947 0024 9A60     		str	r2, [r3, #8]
 747:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     while(counter != 0U)
 948              		.loc 1 747 0
 949 0026 344B     		ldr	r3, .L97
 950 0028 1B68     		ldr	r3, [r3]
 951 002a 344A     		ldr	r2, .L97+4
 952 002c A2FB0323 		umull	r2, r3, r2, r3
 953 0030 9B0C     		lsrs	r3, r3, #18
 954 0032 03EB4303 		add	r3, r3, r3, lsl #1
 955 0036 0193     		str	r3, [sp, #4]
 748:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 956              		.loc 1 748 0
 957 0038 02E0     		b	.L84
 958              	.L85:
 750:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 959              		.loc 1 750 0
 960 003a 019B     		ldr	r3, [sp, #4]
 961 003c 013B     		subs	r3, r3, #1
 962 003e 0193     		str	r3, [sp, #4]
 963              	.L84:
 748:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 964              		.loc 1 748 0
 965 0040 019B     		ldr	r3, [sp, #4]
 966 0042 002B     		cmp	r3, #0
 967 0044 F9D1     		bne	.L85
 968              	.L83:
ARM GAS  /tmp/cccRIBfL.s 			page 57


 755:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 969              		.loc 1 755 0
 970 0046 0268     		ldr	r2, [r0]
 971 0048 9368     		ldr	r3, [r2, #8]
 972 004a 13F0010F 		tst	r3, #1
 973 004e 4BD0     		beq	.L91
 760:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 974              		.loc 1 760 0
 975 0050 036C     		ldr	r3, [r0, #64]
 976 0052 23F4E063 		bic	r3, r3, #1792
 977 0056 23F00103 		bic	r3, r3, #1
 978 005a 43F48073 		orr	r3, r3, #256
 979 005e 0364     		str	r3, [r0, #64]
 766:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 980              		.loc 1 766 0
 981 0060 5368     		ldr	r3, [r2, #4]
 982 0062 13F4806F 		tst	r3, #1024
 983 0066 05D0     		beq	.L86
 768:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 984              		.loc 1 768 0
 985 0068 036C     		ldr	r3, [r0, #64]
 986 006a 23F44053 		bic	r3, r3, #12288
 987 006e 43F48053 		orr	r3, r3, #4096
 988 0072 0364     		str	r3, [r0, #64]
 989              	.L86:
 772:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 990              		.loc 1 772 0
 991 0074 036C     		ldr	r3, [r0, #64]
 992 0076 13F4805F 		tst	r3, #4096
 993 007a 20D0     		beq	.L87
 775:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 994              		.loc 1 775 0
 995 007c 436C     		ldr	r3, [r0, #68]
 996 007e 23F00603 		bic	r3, r3, #6
 997 0082 4364     		str	r3, [r0, #68]
 998              	.L88:
 786:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 999              		.loc 1 786 0
 1000 0084 0023     		movs	r3, #0
 1001 0086 80F83C30 		strb	r3, [r0, #60]
 790:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 1002              		.loc 1 790 0
 1003 008a 6FF02203 		mvn	r3, #34
 1004 008e 1360     		str	r3, [r2]
 793:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 1005              		.loc 1 793 0
 1006 0090 0268     		ldr	r2, [r0]
 1007 0092 5368     		ldr	r3, [r2, #4]
 1008 0094 43F08063 		orr	r3, r3, #67108864
 1009 0098 43F02003 		orr	r3, r3, #32
 1010 009c 5360     		str	r3, [r2, #4]
 796:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 1011              		.loc 1 796 0
 1012 009e 184B     		ldr	r3, .L97+8
 1013 00a0 5B68     		ldr	r3, [r3, #4]
 1014 00a2 13F01F0F 		tst	r3, #31
 1015 00a6 0DD1     		bne	.L89
ARM GAS  /tmp/cccRIBfL.s 			page 58


 799:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
 1016              		.loc 1 799 0
 1017 00a8 0368     		ldr	r3, [r0]
 1018 00aa 9A68     		ldr	r2, [r3, #8]
 1019 00ac 12F0405F 		tst	r2, #805306368
 1020 00b0 1DD1     		bne	.L92
 802:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
 1021              		.loc 1 802 0
 1022 00b2 9A68     		ldr	r2, [r3, #8]
 1023 00b4 42F08042 		orr	r2, r2, #1073741824
 1024 00b8 9A60     		str	r2, [r3, #8]
 817:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 1025              		.loc 1 817 0
 1026 00ba 0020     		movs	r0, #0
 1027              	.LVL52:
 1028 00bc 15E0     		b	.L82
 1029              	.LVL53:
 1030              	.L87:
 780:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 1031              		.loc 1 780 0
 1032 00be 0023     		movs	r3, #0
 1033 00c0 4364     		str	r3, [r0, #68]
 1034 00c2 DFE7     		b	.L88
 1035              	.L89:
 808:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
 1036              		.loc 1 808 0
 1037 00c4 0368     		ldr	r3, [r0]
 1038 00c6 0F4A     		ldr	r2, .L97+12
 1039 00c8 9342     		cmp	r3, r2
 1040 00ca 01D0     		beq	.L96
 817:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 1041              		.loc 1 817 0
 1042 00cc 0020     		movs	r0, #0
 1043              	.LVL54:
 1044 00ce 0CE0     		b	.L82
 1045              	.LVL55:
 1046              	.L96:
 808:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
 1047              		.loc 1 808 0 discriminator 1
 1048 00d0 9A68     		ldr	r2, [r3, #8]
 1049 00d2 12F0405F 		tst	r2, #805306368
 1050 00d6 0CD1     		bne	.L94
 811:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
 1051              		.loc 1 811 0
 1052 00d8 9A68     		ldr	r2, [r3, #8]
 1053 00da 42F08042 		orr	r2, r2, #1073741824
 1054 00de 9A60     		str	r2, [r3, #8]
 817:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 1055              		.loc 1 817 0
 1056 00e0 0020     		movs	r0, #0
 1057              	.LVL56:
 1058 00e2 02E0     		b	.L82
 1059              	.LVL57:
 1060              	.L90:
 735:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 1061              		.loc 1 735 0
 1062 00e4 0220     		movs	r0, #2
ARM GAS  /tmp/cccRIBfL.s 			page 59


 1063              	.LVL58:
 1064 00e6 00E0     		b	.L82
 1065              	.LVL59:
 1066              	.L91:
 817:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 1067              		.loc 1 817 0
 1068 00e8 0020     		movs	r0, #0
 1069              	.LVL60:
 1070              	.L82:
 818:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 1071              		.loc 1 818 0
 1072 00ea 02B0     		add	sp, sp, #8
 1073              	.LCFI12:
 1074              		.cfi_remember_state
 1075              		.cfi_def_cfa_offset 0
 1076              		@ sp needed
 1077 00ec 7047     		bx	lr
 1078              	.LVL61:
 1079              	.L92:
 1080              	.LCFI13:
 1081              		.cfi_restore_state
 817:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 1082              		.loc 1 817 0
 1083 00ee 0020     		movs	r0, #0
 1084              	.LVL62:
 1085 00f0 FBE7     		b	.L82
 1086              	.LVL63:
 1087              	.L94:
 1088 00f2 0020     		movs	r0, #0
 1089              	.LVL64:
 1090 00f4 F9E7     		b	.L82
 1091              	.L98:
 1092 00f6 00BF     		.align	2
 1093              	.L97:
 1094 00f8 00000000 		.word	SystemCoreClock
 1095 00fc 83DE1B43 		.word	1125899907
 1096 0100 00230140 		.word	1073816320
 1097 0104 00200140 		.word	1073815552
 1098              		.cfi_endproc
 1099              	.LFE74:
 1101              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 1102              		.align	1
 1103              		.global	HAL_ADC_Stop_IT
 1104              		.syntax unified
 1105              		.thumb
 1106              		.thumb_func
 1107              		.fpu softvfp
 1109              	HAL_ADC_Stop_IT:
 1110              	.LFB75:
 830:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check the parameters */
 1111              		.loc 1 830 0
 1112              		.cfi_startproc
 1113              		@ args = 0, pretend = 0, frame = 0
 1114              		@ frame_needed = 0, uses_anonymous_args = 0
 1115              		@ link register save eliminated.
 1116              	.LVL65:
 835:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
ARM GAS  /tmp/cccRIBfL.s 			page 60


 1117              		.loc 1 835 0
 1118 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 1119 0004 012B     		cmp	r3, #1
 1120 0006 1FD0     		beq	.L102
 835:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 1121              		.loc 1 835 0 is_stmt 0 discriminator 2
 1122 0008 0123     		movs	r3, #1
 1123 000a 80F83C30 		strb	r3, [r0, #60]
 839:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 1124              		.loc 1 839 0 is_stmt 1 discriminator 2
 1125 000e 0268     		ldr	r2, [r0]
 1126 0010 9368     		ldr	r3, [r2, #8]
 1127 0012 23F00103 		bic	r3, r3, #1
 1128 0016 9360     		str	r3, [r2, #8]
 842:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 1129              		.loc 1 842 0 discriminator 2
 1130 0018 0368     		ldr	r3, [r0]
 1131 001a 9A68     		ldr	r2, [r3, #8]
 1132 001c 12F0010F 		tst	r2, #1
 1133 0020 0DD1     		bne	.L101
 845:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 1134              		.loc 1 845 0
 1135 0022 5A68     		ldr	r2, [r3, #4]
 1136 0024 22F08062 		bic	r2, r2, #67108864
 1137 0028 22F02002 		bic	r2, r2, #32
 1138 002c 5A60     		str	r2, [r3, #4]
 848:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 1139              		.loc 1 848 0
 1140 002e 036C     		ldr	r3, [r0, #64]
 1141 0030 23F48853 		bic	r3, r3, #4352
 1142 0034 23F00103 		bic	r3, r3, #1
 1143 0038 43F00103 		orr	r3, r3, #1
 1144 003c 0364     		str	r3, [r0, #64]
 1145              	.L101:
 854:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 1146              		.loc 1 854 0
 1147 003e 0023     		movs	r3, #0
 1148 0040 80F83C30 		strb	r3, [r0, #60]
 857:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 1149              		.loc 1 857 0
 1150 0044 1846     		mov	r0, r3
 1151              	.LVL66:
 1152 0046 7047     		bx	lr
 1153              	.LVL67:
 1154              	.L102:
 835:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 1155              		.loc 1 835 0
 1156 0048 0220     		movs	r0, #2
 1157              	.LVL68:
 858:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 1158              		.loc 1 858 0
 1159 004a 7047     		bx	lr
 1160              		.cfi_endproc
 1161              	.LFE75:
 1163              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 1164              		.align	1
 1165              		.global	HAL_ADC_Start_DMA
ARM GAS  /tmp/cccRIBfL.s 			page 61


 1166              		.syntax unified
 1167              		.thumb
 1168              		.thumb_func
 1169              		.fpu softvfp
 1171              	HAL_ADC_Start_DMA:
 1172              	.LFB77:
1012:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __IO uint32_t counter = 0U;
 1173              		.loc 1 1012 0
 1174              		.cfi_startproc
 1175              		@ args = 0, pretend = 0, frame = 8
 1176              		@ frame_needed = 0, uses_anonymous_args = 0
 1177              	.LVL69:
 1178 0000 30B5     		push	{r4, r5, lr}
 1179              	.LCFI14:
 1180              		.cfi_def_cfa_offset 12
 1181              		.cfi_offset 4, -12
 1182              		.cfi_offset 5, -8
 1183              		.cfi_offset 14, -4
 1184 0002 83B0     		sub	sp, sp, #12
 1185              	.LCFI15:
 1186              		.cfi_def_cfa_offset 24
1013:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 1187              		.loc 1 1013 0
 1188 0004 0023     		movs	r3, #0
 1189 0006 0193     		str	r3, [sp, #4]
1020:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 1190              		.loc 1 1020 0
 1191 0008 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 1192 000c 012B     		cmp	r3, #1
 1193 000e 00F08180 		beq	.L112
1020:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 1194              		.loc 1 1020 0 is_stmt 0 discriminator 2
 1195 0012 0123     		movs	r3, #1
 1196 0014 80F83C30 		strb	r3, [r0, #60]
1025:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {  
 1197              		.loc 1 1025 0 is_stmt 1 discriminator 2
 1198 0018 0468     		ldr	r4, [r0]
 1199 001a A368     		ldr	r3, [r4, #8]
 1200 001c 13F0010F 		tst	r3, #1
 1201 0020 13D1     		bne	.L105
1028:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 1202              		.loc 1 1028 0
 1203 0022 A368     		ldr	r3, [r4, #8]
 1204 0024 43F00103 		orr	r3, r3, #1
 1205 0028 A360     		str	r3, [r4, #8]
1032:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     while(counter != 0U)
 1206              		.loc 1 1032 0
 1207 002a 3F4B     		ldr	r3, .L119
 1208 002c 1C68     		ldr	r4, [r3]
 1209 002e 3F4B     		ldr	r3, .L119+4
 1210 0030 A3FB0434 		umull	r3, r4, r3, r4
 1211 0034 A40C     		lsrs	r4, r4, #18
 1212 0036 04EB4404 		add	r4, r4, r4, lsl #1
 1213 003a 0194     		str	r4, [sp, #4]
1033:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 1214              		.loc 1 1033 0
 1215 003c 02E0     		b	.L106
ARM GAS  /tmp/cccRIBfL.s 			page 62


 1216              	.L107:
1035:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 1217              		.loc 1 1035 0
 1218 003e 019C     		ldr	r4, [sp, #4]
 1219 0040 013C     		subs	r4, r4, #1
 1220 0042 0194     		str	r4, [sp, #4]
 1221              	.L106:
1033:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 1222              		.loc 1 1033 0
 1223 0044 019C     		ldr	r4, [sp, #4]
 1224 0046 002C     		cmp	r4, #0
 1225 0048 F9D1     		bne	.L107
 1226              	.L105:
1040:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 1227              		.loc 1 1040 0
 1228 004a 0368     		ldr	r3, [r0]
 1229 004c 9C68     		ldr	r4, [r3, #8]
 1230 004e 14F0010F 		tst	r4, #1
 1231 0052 61D0     		beq	.L113
1045:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                       HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
 1232              		.loc 1 1045 0
 1233 0054 046C     		ldr	r4, [r0, #64]
 1234 0056 24F4E064 		bic	r4, r4, #1792
 1235 005a 24F00104 		bic	r4, r4, #1
 1236 005e 44F48074 		orr	r4, r4, #256
 1237 0062 0464     		str	r4, [r0, #64]
1051:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 1238              		.loc 1 1051 0
 1239 0064 5B68     		ldr	r3, [r3, #4]
 1240 0066 13F4806F 		tst	r3, #1024
 1241 006a 05D0     		beq	.L108
1053:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 1242              		.loc 1 1053 0
 1243 006c 036C     		ldr	r3, [r0, #64]
 1244 006e 23F44053 		bic	r3, r3, #12288
 1245 0072 43F48053 		orr	r3, r3, #4096
 1246 0076 0364     		str	r3, [r0, #64]
 1247              	.L108:
1057:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 1248              		.loc 1 1057 0
 1249 0078 036C     		ldr	r3, [r0, #64]
 1250 007a 13F4805F 		tst	r3, #4096
 1251 007e 36D0     		beq	.L109
1060:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 1252              		.loc 1 1060 0
 1253 0080 436C     		ldr	r3, [r0, #68]
 1254 0082 23F00603 		bic	r3, r3, #6
 1255 0086 4364     		str	r3, [r0, #68]
 1256              	.L110:
 1257 0088 1346     		mov	r3, r2
 1258 008a 0446     		mov	r4, r0
1071:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 1259              		.loc 1 1071 0
 1260 008c 0022     		movs	r2, #0
 1261              	.LVL70:
 1262 008e 80F83C20 		strb	r2, [r0, #60]
1074:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
ARM GAS  /tmp/cccRIBfL.s 			page 63


 1263              		.loc 1 1074 0
 1264 0092 826B     		ldr	r2, [r0, #56]
 1265 0094 2648     		ldr	r0, .L119+8
 1266              	.LVL71:
 1267 0096 D063     		str	r0, [r2, #60]
1077:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 1268              		.loc 1 1077 0
 1269 0098 A26B     		ldr	r2, [r4, #56]
 1270 009a 2648     		ldr	r0, .L119+12
 1271 009c 1064     		str	r0, [r2, #64]
1080:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 1272              		.loc 1 1080 0
 1273 009e A26B     		ldr	r2, [r4, #56]
 1274 00a0 2548     		ldr	r0, .L119+16
 1275 00a2 D064     		str	r0, [r2, #76]
1088:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 1276              		.loc 1 1088 0
 1277 00a4 2268     		ldr	r2, [r4]
 1278 00a6 6FF02200 		mvn	r0, #34
 1279 00aa 1060     		str	r0, [r2]
1091:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 1280              		.loc 1 1091 0
 1281 00ac 2568     		ldr	r5, [r4]
 1282 00ae 6868     		ldr	r0, [r5, #4]
 1283 00b0 40F08060 		orr	r0, r0, #67108864
 1284 00b4 6860     		str	r0, [r5, #4]
1094:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 1285              		.loc 1 1094 0
 1286 00b6 2568     		ldr	r5, [r4]
 1287 00b8 A868     		ldr	r0, [r5, #8]
 1288 00ba 40F48070 		orr	r0, r0, #256
 1289 00be A860     		str	r0, [r5, #8]
1097:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 1290              		.loc 1 1097 0
 1291 00c0 2068     		ldr	r0, [r4]
 1292 00c2 0A46     		mov	r2, r1
 1293 00c4 00F14C01 		add	r1, r0, #76
 1294              	.LVL72:
 1295 00c8 A06B     		ldr	r0, [r4, #56]
 1296 00ca FFF7FEFF 		bl	HAL_DMA_Start_IT
 1297              	.LVL73:
1100:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 1298              		.loc 1 1100 0
 1299 00ce 1B4B     		ldr	r3, .L119+20
 1300 00d0 5B68     		ldr	r3, [r3, #4]
 1301 00d2 13F01F0F 		tst	r3, #31
 1302 00d6 0DD1     		bne	.L111
1103:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
 1303              		.loc 1 1103 0
 1304 00d8 2368     		ldr	r3, [r4]
 1305 00da 9A68     		ldr	r2, [r3, #8]
 1306 00dc 12F0405F 		tst	r2, #805306368
 1307 00e0 1DD1     		bne	.L114
1106:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
 1308              		.loc 1 1106 0
 1309 00e2 9A68     		ldr	r2, [r3, #8]
 1310 00e4 42F08042 		orr	r2, r2, #1073741824
ARM GAS  /tmp/cccRIBfL.s 			page 64


 1311 00e8 9A60     		str	r2, [r3, #8]
1121:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 1312              		.loc 1 1121 0
 1313 00ea 0020     		movs	r0, #0
 1314 00ec 15E0     		b	.L104
 1315              	.LVL74:
 1316              	.L109:
1065:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 1317              		.loc 1 1065 0
 1318 00ee 0023     		movs	r3, #0
 1319 00f0 4364     		str	r3, [r0, #68]
 1320 00f2 C9E7     		b	.L110
 1321              	.LVL75:
 1322              	.L111:
1112:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
 1323              		.loc 1 1112 0
 1324 00f4 2368     		ldr	r3, [r4]
 1325 00f6 124A     		ldr	r2, .L119+24
 1326 00f8 9342     		cmp	r3, r2
 1327 00fa 01D0     		beq	.L118
1121:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 1328              		.loc 1 1121 0
 1329 00fc 0020     		movs	r0, #0
 1330 00fe 0CE0     		b	.L104
 1331              	.L118:
1112:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
 1332              		.loc 1 1112 0 discriminator 1
 1333 0100 9A68     		ldr	r2, [r3, #8]
 1334 0102 12F0405F 		tst	r2, #805306368
 1335 0106 0CD1     		bne	.L116
1115:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
 1336              		.loc 1 1115 0
 1337 0108 9A68     		ldr	r2, [r3, #8]
 1338 010a 42F08042 		orr	r2, r2, #1073741824
 1339 010e 9A60     		str	r2, [r3, #8]
1121:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 1340              		.loc 1 1121 0
 1341 0110 0020     		movs	r0, #0
 1342 0112 02E0     		b	.L104
 1343              	.LVL76:
 1344              	.L112:
1020:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 1345              		.loc 1 1020 0
 1346 0114 0220     		movs	r0, #2
 1347              	.LVL77:
 1348 0116 00E0     		b	.L104
 1349              	.LVL78:
 1350              	.L113:
1121:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 1351              		.loc 1 1121 0
 1352 0118 0020     		movs	r0, #0
 1353              	.LVL79:
 1354              	.L104:
1122:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 1355              		.loc 1 1122 0
 1356 011a 03B0     		add	sp, sp, #12
 1357              	.LCFI16:
ARM GAS  /tmp/cccRIBfL.s 			page 65


 1358              		.cfi_remember_state
 1359              		.cfi_def_cfa_offset 12
 1360              		@ sp needed
 1361 011c 30BD     		pop	{r4, r5, pc}
 1362              	.LVL80:
 1363              	.L114:
 1364              	.LCFI17:
 1365              		.cfi_restore_state
1121:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 1366              		.loc 1 1121 0
 1367 011e 0020     		movs	r0, #0
 1368 0120 FBE7     		b	.L104
 1369              	.L116:
 1370 0122 0020     		movs	r0, #0
 1371 0124 F9E7     		b	.L104
 1372              	.L120:
 1373 0126 00BF     		.align	2
 1374              	.L119:
 1375 0128 00000000 		.word	SystemCoreClock
 1376 012c 83DE1B43 		.word	1125899907
 1377 0130 00000000 		.word	ADC_DMAConvCplt
 1378 0134 00000000 		.word	ADC_DMAHalfConvCplt
 1379 0138 00000000 		.word	ADC_DMAError
 1380 013c 00230140 		.word	1073816320
 1381 0140 00200140 		.word	1073815552
 1382              		.cfi_endproc
 1383              	.LFE77:
 1385              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 1386              		.align	1
 1387              		.global	HAL_ADC_Stop_DMA
 1388              		.syntax unified
 1389              		.thumb
 1390              		.thumb_func
 1391              		.fpu softvfp
 1393              	HAL_ADC_Stop_DMA:
 1394              	.LFB78:
1131:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1395              		.loc 1 1131 0
 1396              		.cfi_startproc
 1397              		@ args = 0, pretend = 0, frame = 0
 1398              		@ frame_needed = 0, uses_anonymous_args = 0
 1399              	.LVL81:
1138:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 1400              		.loc 1 1138 0
 1401 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 1402 0004 012B     		cmp	r3, #1
 1403 0006 28D0     		beq	.L124
1131:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1404              		.loc 1 1131 0 discriminator 2
 1405 0008 10B5     		push	{r4, lr}
 1406              	.LCFI18:
 1407              		.cfi_def_cfa_offset 8
 1408              		.cfi_offset 4, -8
 1409              		.cfi_offset 14, -4
 1410 000a 0446     		mov	r4, r0
1138:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 1411              		.loc 1 1138 0 discriminator 2
ARM GAS  /tmp/cccRIBfL.s 			page 66


 1412 000c 0123     		movs	r3, #1
 1413 000e 80F83C30 		strb	r3, [r0, #60]
1142:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 1414              		.loc 1 1142 0 discriminator 2
 1415 0012 0268     		ldr	r2, [r0]
 1416 0014 9368     		ldr	r3, [r2, #8]
 1417 0016 23F00103 		bic	r3, r3, #1
 1418 001a 9360     		str	r3, [r2, #8]
1145:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 1419              		.loc 1 1145 0 discriminator 2
 1420 001c 0368     		ldr	r3, [r0]
 1421 001e 9A68     		ldr	r2, [r3, #8]
 1422 0020 12F0010F 		tst	r2, #1
 1423 0024 04D0     		beq	.L130
1132:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 1424              		.loc 1 1132 0
 1425 0026 0020     		movs	r0, #0
 1426              	.LVL82:
 1427              	.L123:
1164:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 1428              		.loc 1 1164 0
 1429 0028 0023     		movs	r3, #0
 1430 002a 84F83C30 		strb	r3, [r4, #60]
1168:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 1431              		.loc 1 1168 0
 1432 002e 10BD     		pop	{r4, pc}
 1433              	.LVL83:
 1434              	.L130:
1148:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 1435              		.loc 1 1148 0
 1436 0030 9A68     		ldr	r2, [r3, #8]
 1437 0032 22F48072 		bic	r2, r2, #256
 1438 0036 9A60     		str	r2, [r3, #8]
1152:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 1439              		.loc 1 1152 0
 1440 0038 806B     		ldr	r0, [r0, #56]
 1441              	.LVL84:
 1442 003a FFF7FEFF 		bl	HAL_DMA_Abort
 1443              	.LVL85:
1155:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 1444              		.loc 1 1155 0
 1445 003e 2268     		ldr	r2, [r4]
 1446 0040 5368     		ldr	r3, [r2, #4]
 1447 0042 23F08063 		bic	r3, r3, #67108864
 1448 0046 5360     		str	r3, [r2, #4]
1158:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 1449              		.loc 1 1158 0
 1450 0048 236C     		ldr	r3, [r4, #64]
 1451 004a 23F48853 		bic	r3, r3, #4352
 1452 004e 23F00103 		bic	r3, r3, #1
 1453 0052 43F00103 		orr	r3, r3, #1
 1454 0056 2364     		str	r3, [r4, #64]
 1455 0058 E6E7     		b	.L123
 1456              	.LVL86:
 1457              	.L124:
 1458              	.LCFI19:
 1459              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/cccRIBfL.s 			page 67


 1460              		.cfi_restore 4
 1461              		.cfi_restore 14
1138:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 1462              		.loc 1 1138 0
 1463 005a 0220     		movs	r0, #2
 1464              	.LVL87:
1168:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 1465              		.loc 1 1168 0
 1466 005c 7047     		bx	lr
 1467              		.cfi_endproc
 1468              	.LFE78:
 1470              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 1471              		.align	1
 1472              		.global	HAL_ADC_GetValue
 1473              		.syntax unified
 1474              		.thumb
 1475              		.thumb_func
 1476              		.fpu softvfp
 1478              	HAL_ADC_GetValue:
 1479              	.LFB79:
1177:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return the selected ADC converted value */ 
 1480              		.loc 1 1177 0
 1481              		.cfi_startproc
 1482              		@ args = 0, pretend = 0, frame = 0
 1483              		@ frame_needed = 0, uses_anonymous_args = 0
 1484              		@ link register save eliminated.
 1485              	.LVL88:
1179:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 1486              		.loc 1 1179 0
 1487 0000 0368     		ldr	r3, [r0]
 1488 0002 D86C     		ldr	r0, [r3, #76]
 1489              	.LVL89:
1180:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 1490              		.loc 1 1180 0
 1491 0004 7047     		bx	lr
 1492              		.cfi_endproc
 1493              	.LFE79:
 1495              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 1496              		.align	1
 1497              		.weak	HAL_ADC_ConvCpltCallback
 1498              		.syntax unified
 1499              		.thumb
 1500              		.thumb_func
 1501              		.fpu softvfp
 1503              	HAL_ADC_ConvCpltCallback:
 1504              	.LFB80:
1189:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1505              		.loc 1 1189 0
 1506              		.cfi_startproc
 1507              		@ args = 0, pretend = 0, frame = 0
 1508              		@ frame_needed = 0, uses_anonymous_args = 0
 1509              		@ link register save eliminated.
 1510              	.LVL90:
1195:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 1511              		.loc 1 1195 0
 1512 0000 7047     		bx	lr
 1513              		.cfi_endproc
ARM GAS  /tmp/cccRIBfL.s 			page 68


 1514              	.LFE80:
 1516              		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 1517              		.align	1
 1518              		.syntax unified
 1519              		.thumb
 1520              		.thumb_func
 1521              		.fpu softvfp
 1523              	ADC_DMAConvCplt:
 1524              	.LFB89:
1571:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1572:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
1573:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  DMA transfer complete callback. 
1574:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
1575:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *                the configuration information for the specified DMA module.
1576:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval None
1577:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1578:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
1579:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 1525              		.loc 1 1579 0
 1526              		.cfi_startproc
 1527              		@ args = 0, pretend = 0, frame = 0
 1528              		@ frame_needed = 0, uses_anonymous_args = 0
 1529              	.LVL91:
 1530 0000 08B5     		push	{r3, lr}
 1531              	.LCFI20:
 1532              		.cfi_def_cfa_offset 8
 1533              		.cfi_offset 3, -8
 1534              		.cfi_offset 14, -4
1580:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
1581:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 1535              		.loc 1 1581 0
 1536 0002 836B     		ldr	r3, [r0, #56]
 1537              	.LVL92:
1582:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
1583:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
1584:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 1538              		.loc 1 1584 0
 1539 0004 1A6C     		ldr	r2, [r3, #64]
 1540 0006 12F0500F 		tst	r2, #80
 1541 000a 03D0     		beq	.L139
1585:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
1586:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Update ADC state machine */
1587:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
1588:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1589:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular   */
1590:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going.      */
1591:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Note: On STM32F2, there is no independent flag of end of sequence.   */
1592:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /*       The test of scan sequence on going is done either with scan    */
1593:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /*       sequence disabled or with end of conversion flag set to        */
1594:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /*       of end of sequence.                                            */
1595:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
1596:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
1597:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
1598:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
1599:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
1600:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Disable ADC end of single conversion interrupt on group regular */
1601:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Note: Overrun interrupt was enabled with EOC interrupt in          */
ARM GAS  /tmp/cccRIBfL.s 			page 69


1602:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
1603:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* by overrun IRQ process below.                                      */
1604:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
1605:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       
1606:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       /* Set ADC state */
1607:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
1608:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       
1609:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1610:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
1611:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
1612:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
1613:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
1614:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
1615:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Conversion complete callback */
1616:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
1617:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1618:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   else
1619:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
1620:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     /* Call DMA error callback */
1621:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     hadc->DMA_Handle->XferErrorCallback(hdma);
 1542              		.loc 1 1621 0
 1543 000c 9B6B     		ldr	r3, [r3, #56]
 1544              	.LVL93:
 1545 000e DB6C     		ldr	r3, [r3, #76]
 1546 0010 9847     		blx	r3
 1547              	.LVL94:
 1548              	.L133:
1622:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
1623:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 1549              		.loc 1 1623 0
 1550 0012 08BD     		pop	{r3, pc}
 1551              	.LVL95:
 1552              	.L139:
1587:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 1553              		.loc 1 1587 0
 1554 0014 1A6C     		ldr	r2, [r3, #64]
 1555 0016 42F40072 		orr	r2, r2, #512
 1556 001a 1A64     		str	r2, [r3, #64]
1595:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 1557              		.loc 1 1595 0
 1558 001c 1A68     		ldr	r2, [r3]
 1559 001e 9168     		ldr	r1, [r2, #8]
 1560 0020 11F0405F 		tst	r1, #805306368
 1561 0024 19D1     		bne	.L135
1596:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 1562              		.loc 1 1596 0 discriminator 1
 1563 0026 9969     		ldr	r1, [r3, #24]
1595:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 1564              		.loc 1 1595 0 discriminator 1
 1565 0028 B9B9     		cbnz	r1, .L135
1597:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 1566              		.loc 1 1597 0
 1567 002a D16A     		ldr	r1, [r2, #44]
1596:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 1568              		.loc 1 1596 0
 1569 002c 11F4700F 		tst	r1, #15728640
 1570 0030 03D0     		beq	.L136
ARM GAS  /tmp/cccRIBfL.s 			page 70


1598:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 1571              		.loc 1 1598 0
 1572 0032 9168     		ldr	r1, [r2, #8]
1597:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 1573              		.loc 1 1597 0
 1574 0034 11F4806F 		tst	r1, #1024
 1575 0038 0FD1     		bne	.L135
 1576              	.L136:
1604:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       
 1577              		.loc 1 1604 0
 1578 003a 5168     		ldr	r1, [r2, #4]
 1579 003c 21F02001 		bic	r1, r1, #32
 1580 0040 5160     		str	r1, [r2, #4]
1607:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       
 1581              		.loc 1 1607 0
 1582 0042 1A6C     		ldr	r2, [r3, #64]
 1583 0044 22F48072 		bic	r2, r2, #256
 1584 0048 1A64     		str	r2, [r3, #64]
1609:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
 1585              		.loc 1 1609 0
 1586 004a 1A6C     		ldr	r2, [r3, #64]
 1587 004c 12F4805F 		tst	r2, #4096
 1588 0050 03D1     		bne	.L135
1611:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
 1589              		.loc 1 1611 0
 1590 0052 1A6C     		ldr	r2, [r3, #64]
 1591 0054 42F00102 		orr	r2, r2, #1
 1592 0058 1A64     		str	r2, [r3, #64]
 1593              	.L135:
1616:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 1594              		.loc 1 1616 0
 1595 005a 1846     		mov	r0, r3
 1596              	.LVL96:
 1597 005c FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 1598              	.LVL97:
 1599 0060 D7E7     		b	.L133
 1600              		.cfi_endproc
 1601              	.LFE89:
 1603              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 1604              		.align	1
 1605              		.weak	HAL_ADC_ConvHalfCpltCallback
 1606              		.syntax unified
 1607              		.thumb
 1608              		.thumb_func
 1609              		.fpu softvfp
 1611              	HAL_ADC_ConvHalfCpltCallback:
 1612              	.LFB81:
1204:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1613              		.loc 1 1204 0
 1614              		.cfi_startproc
 1615              		@ args = 0, pretend = 0, frame = 0
 1616              		@ frame_needed = 0, uses_anonymous_args = 0
 1617              		@ link register save eliminated.
 1618              	.LVL98:
1210:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 1619              		.loc 1 1210 0
 1620 0000 7047     		bx	lr
ARM GAS  /tmp/cccRIBfL.s 			page 71


 1621              		.cfi_endproc
 1622              	.LFE81:
 1624              		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 1625              		.align	1
 1626              		.syntax unified
 1627              		.thumb
 1628              		.thumb_func
 1629              		.fpu softvfp
 1631              	ADC_DMAHalfConvCplt:
 1632              	.LFB90:
1624:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1625:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
1626:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  DMA half transfer complete callback. 
1627:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
1628:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *                the configuration information for the specified DMA module.
1629:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval None
1630:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1631:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
1632:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 1633              		.loc 1 1632 0
 1634              		.cfi_startproc
 1635              		@ args = 0, pretend = 0, frame = 0
 1636              		@ frame_needed = 0, uses_anonymous_args = 0
 1637              	.LVL99:
 1638 0000 08B5     		push	{r3, lr}
 1639              	.LCFI21:
 1640              		.cfi_def_cfa_offset 8
 1641              		.cfi_offset 3, -8
 1642              		.cfi_offset 14, -4
 1643              	.LVL100:
1633:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
1634:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Conversion complete callback */
1635:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc); 
 1644              		.loc 1 1635 0
 1645 0002 806B     		ldr	r0, [r0, #56]
 1646              	.LVL101:
 1647 0004 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
 1648              	.LVL102:
1636:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 1649              		.loc 1 1636 0
 1650 0008 08BD     		pop	{r3, pc}
 1651              		.cfi_endproc
 1652              	.LFE90:
 1654              		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 1655              		.align	1
 1656              		.weak	HAL_ADC_LevelOutOfWindowCallback
 1657              		.syntax unified
 1658              		.thumb
 1659              		.thumb_func
 1660              		.fpu softvfp
 1662              	HAL_ADC_LevelOutOfWindowCallback:
 1663              	.LFB82:
1219:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1664              		.loc 1 1219 0
 1665              		.cfi_startproc
 1666              		@ args = 0, pretend = 0, frame = 0
 1667              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cccRIBfL.s 			page 72


 1668              		@ link register save eliminated.
 1669              	.LVL103:
1225:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 1670              		.loc 1 1225 0
 1671 0000 7047     		bx	lr
 1672              		.cfi_endproc
 1673              	.LFE82:
 1675              		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 1676              		.align	1
 1677              		.weak	HAL_ADC_ErrorCallback
 1678              		.syntax unified
 1679              		.thumb
 1680              		.thumb_func
 1681              		.fpu softvfp
 1683              	HAL_ADC_ErrorCallback:
 1684              	.LFB83:
1240:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 1685              		.loc 1 1240 0
 1686              		.cfi_startproc
 1687              		@ args = 0, pretend = 0, frame = 0
 1688              		@ frame_needed = 0, uses_anonymous_args = 0
 1689              		@ link register save eliminated.
 1690              	.LVL104:
1246:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 1691              		.loc 1 1246 0
 1692 0000 7047     		bx	lr
 1693              		.cfi_endproc
 1694              	.LFE83:
 1696              		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 1697              		.align	1
 1698              		.global	HAL_ADC_IRQHandler
 1699              		.syntax unified
 1700              		.thumb
 1701              		.thumb_func
 1702              		.fpu softvfp
 1704              	HAL_ADC_IRQHandler:
 1705              	.LFB76:
 867:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   uint32_t tmp1 = 0U, tmp2 = 0U;
 1706              		.loc 1 867 0
 1707              		.cfi_startproc
 1708              		@ args = 0, pretend = 0, frame = 0
 1709              		@ frame_needed = 0, uses_anonymous_args = 0
 1710              	.LVL105:
 1711 0000 38B5     		push	{r3, r4, r5, lr}
 1712              	.LCFI22:
 1713              		.cfi_def_cfa_offset 16
 1714              		.cfi_offset 3, -16
 1715              		.cfi_offset 4, -12
 1716              		.cfi_offset 5, -8
 1717              		.cfi_offset 14, -4
 1718 0002 0446     		mov	r4, r0
 1719              	.LVL106:
 875:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 1720              		.loc 1 875 0
 1721 0004 0268     		ldr	r2, [r0]
 1722 0006 1168     		ldr	r1, [r2]
 1723              	.LVL107:
ARM GAS  /tmp/cccRIBfL.s 			page 73


 876:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check End of conversion flag for regular channels */
 1724              		.loc 1 876 0
 1725 0008 5368     		ldr	r3, [r2, #4]
 1726              	.LVL108:
 878:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 1727              		.loc 1 878 0
 1728 000a 11F0020F 		tst	r1, #2
 1729 000e 2FD0     		beq	.L146
 1730 0010 03F02003 		and	r3, r3, #32
 1731              	.LVL109:
 878:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 1732              		.loc 1 878 0 is_stmt 0 discriminator 1
 1733 0014 63B3     		cbz	r3, .L146
 881:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 1734              		.loc 1 881 0 is_stmt 1
 1735 0016 036C     		ldr	r3, [r0, #64]
 1736              	.LVL110:
 1737 0018 13F0100F 		tst	r3, #16
 1738 001c 03D1     		bne	.L147
 884:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 1739              		.loc 1 884 0
 1740 001e 036C     		ldr	r3, [r0, #64]
 1741 0020 43F40073 		orr	r3, r3, #512
 1742 0024 0364     		str	r3, [r0, #64]
 1743              	.L147:
 893:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 1744              		.loc 1 893 0
 1745 0026 9368     		ldr	r3, [r2, #8]
 1746 0028 13F0405F 		tst	r3, #805306368
 1747 002c 19D1     		bne	.L148
 894:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 1748              		.loc 1 894 0 discriminator 1
 1749 002e A369     		ldr	r3, [r4, #24]
 893:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 1750              		.loc 1 893 0 discriminator 1
 1751 0030 BBB9     		cbnz	r3, .L148
 895:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 1752              		.loc 1 895 0
 1753 0032 D36A     		ldr	r3, [r2, #44]
 894:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 1754              		.loc 1 894 0
 1755 0034 13F4700F 		tst	r3, #15728640
 1756 0038 03D0     		beq	.L149
 896:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 1757              		.loc 1 896 0
 1758 003a 9368     		ldr	r3, [r2, #8]
 895:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 1759              		.loc 1 895 0
 1760 003c 13F4806F 		tst	r3, #1024
 1761 0040 0FD1     		bne	.L148
 1762              	.L149:
 902:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       
 1763              		.loc 1 902 0
 1764 0042 5368     		ldr	r3, [r2, #4]
 1765 0044 23F02003 		bic	r3, r3, #32
 1766 0048 5360     		str	r3, [r2, #4]
 905:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       
ARM GAS  /tmp/cccRIBfL.s 			page 74


 1767              		.loc 1 905 0
 1768 004a 236C     		ldr	r3, [r4, #64]
 1769 004c 23F48073 		bic	r3, r3, #256
 1770 0050 2364     		str	r3, [r4, #64]
 907:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
 1771              		.loc 1 907 0
 1772 0052 236C     		ldr	r3, [r4, #64]
 1773 0054 13F4805F 		tst	r3, #4096
 1774 0058 03D1     		bne	.L148
 909:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
 1775              		.loc 1 909 0
 1776 005a 236C     		ldr	r3, [r4, #64]
 1777 005c 43F00103 		orr	r3, r3, #1
 1778 0060 2364     		str	r3, [r4, #64]
 1779              	.L148:
 914:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 1780              		.loc 1 914 0
 1781 0062 2046     		mov	r0, r4
 1782              	.LVL111:
 1783 0064 FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 1784              	.LVL112:
 917:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 1785              		.loc 1 917 0
 1786 0068 2368     		ldr	r3, [r4]
 1787 006a 6FF01202 		mvn	r2, #18
 1788 006e 1A60     		str	r2, [r3]
 1789              	.L146:
 920:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 1790              		.loc 1 920 0
 1791 0070 2368     		ldr	r3, [r4]
 1792 0072 1968     		ldr	r1, [r3]
 1793              	.LVL113:
 921:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check End of conversion flag for injected channels */
 1794              		.loc 1 921 0
 1795 0074 5A68     		ldr	r2, [r3, #4]
 1796 0076 02F08002 		and	r2, r2, #128
 1797              	.LVL114:
 923:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 1798              		.loc 1 923 0
 1799 007a 11F0040F 		tst	r1, #4
 1800 007e 36D0     		beq	.L150
 923:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 1801              		.loc 1 923 0 is_stmt 0 discriminator 1
 1802 0080 002A     		cmp	r2, #0
 1803 0082 34D0     		beq	.L150
 926:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 1804              		.loc 1 926 0 is_stmt 1
 1805 0084 226C     		ldr	r2, [r4, #64]
 1806              	.LVL115:
 1807 0086 12F0100F 		tst	r2, #16
 1808 008a 03D1     		bne	.L151
 929:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 1809              		.loc 1 929 0
 1810 008c 226C     		ldr	r2, [r4, #64]
 1811 008e 42F40052 		orr	r2, r2, #8192
 1812 0092 2264     		str	r2, [r4, #64]
 1813              	.L151:
ARM GAS  /tmp/cccRIBfL.s 			page 75


 936:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 1814              		.loc 1 936 0
 1815 0094 9A68     		ldr	r2, [r3, #8]
 1816 0096 12F4401F 		tst	r2, #3145728
 1817 009a 21D1     		bne	.L152
 937:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 1818              		.loc 1 937 0 discriminator 1
 1819 009c 9A6B     		ldr	r2, [r3, #56]
 936:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 1820              		.loc 1 936 0 discriminator 1
 1821 009e 12F4401F 		tst	r2, #3145728
 1822 00a2 03D0     		beq	.L153
 938:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 1823              		.loc 1 938 0
 1824 00a4 9A68     		ldr	r2, [r3, #8]
 937:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 1825              		.loc 1 937 0
 1826 00a6 12F4806F 		tst	r2, #1024
 1827 00aa 19D1     		bne	.L152
 1828              	.L153:
 939:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 1829              		.loc 1 939 0
 1830 00ac 5A68     		ldr	r2, [r3, #4]
 938:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 1831              		.loc 1 938 0
 1832 00ae 12F4806F 		tst	r2, #1024
 1833 00b2 15D1     		bne	.L152
 940:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 1834              		.loc 1 940 0
 1835 00b4 9A68     		ldr	r2, [r3, #8]
 939:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 1836              		.loc 1 939 0
 1837 00b6 12F0405F 		tst	r2, #805306368
 1838 00ba 11D1     		bne	.L152
 941:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 1839              		.loc 1 941 0
 1840 00bc A269     		ldr	r2, [r4, #24]
 940:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****         (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 1841              		.loc 1 940 0
 1842 00be 7AB9     		cbnz	r2, .L152
 944:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       
 1843              		.loc 1 944 0
 1844 00c0 5A68     		ldr	r2, [r3, #4]
 1845 00c2 22F08002 		bic	r2, r2, #128
 1846 00c6 5A60     		str	r2, [r3, #4]
 947:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 1847              		.loc 1 947 0
 1848 00c8 236C     		ldr	r3, [r4, #64]
 1849 00ca 23F48053 		bic	r3, r3, #4096
 1850 00ce 2364     		str	r3, [r4, #64]
 949:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       { 
 1851              		.loc 1 949 0
 1852 00d0 236C     		ldr	r3, [r4, #64]
 1853 00d2 13F4807F 		tst	r3, #256
 1854 00d6 03D1     		bne	.L152
 951:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
 1855              		.loc 1 951 0
ARM GAS  /tmp/cccRIBfL.s 			page 76


 1856 00d8 236C     		ldr	r3, [r4, #64]
 1857 00da 43F00103 		orr	r3, r3, #1
 1858 00de 2364     		str	r3, [r4, #64]
 1859              	.L152:
 956:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 1860              		.loc 1 956 0
 1861 00e0 2046     		mov	r0, r4
 1862 00e2 FFF7FEFF 		bl	HAL_ADCEx_InjectedConvCpltCallback
 1863              	.LVL116:
 959:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 1864              		.loc 1 959 0
 1865 00e6 2368     		ldr	r3, [r4]
 1866 00e8 6FF00C02 		mvn	r2, #12
 1867 00ec 1A60     		str	r2, [r3]
 1868              	.L150:
 962:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 1869              		.loc 1 962 0
 1870 00ee 2268     		ldr	r2, [r4]
 1871 00f0 1168     		ldr	r1, [r2]
 1872              	.LVL117:
 963:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check Analog watchdog flag */
 1873              		.loc 1 963 0
 1874 00f2 5368     		ldr	r3, [r2, #4]
 1875 00f4 03F04003 		and	r3, r3, #64
 1876              	.LVL118:
 965:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 1877              		.loc 1 965 0
 1878 00f8 11F0010F 		tst	r1, #1
 1879 00fc 04D0     		beq	.L154
 965:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 1880              		.loc 1 965 0 is_stmt 0 discriminator 1
 1881 00fe 1BB1     		cbz	r3, .L154
 967:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 1882              		.loc 1 967 0 is_stmt 1
 1883 0100 1368     		ldr	r3, [r2]
 1884              	.LVL119:
 1885 0102 13F0010F 		tst	r3, #1
 1886 0106 09D1     		bne	.L157
 1887              	.LVL120:
 1888              	.L154:
 980:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 1889              		.loc 1 980 0
 1890 0108 2268     		ldr	r2, [r4]
 1891 010a 1168     		ldr	r1, [r2]
 1892              	.LVL121:
 981:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Check Overrun flag */
 1893              		.loc 1 981 0
 1894 010c 5368     		ldr	r3, [r2, #4]
 1895 010e 03F08063 		and	r3, r3, #67108864
 1896              	.LVL122:
 983:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 1897              		.loc 1 983 0
 1898 0112 11F0200F 		tst	r1, #32
 1899 0116 00D0     		beq	.L145
 983:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 1900              		.loc 1 983 0 is_stmt 0 discriminator 1
 1901 0118 63B9     		cbnz	r3, .L158
ARM GAS  /tmp/cccRIBfL.s 			page 77


 1902              	.LVL123:
 1903              	.L145:
1001:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 1904              		.loc 1 1001 0 is_stmt 1
 1905 011a 38BD     		pop	{r3, r4, r5, pc}
 1906              	.LVL124:
 1907              	.L157:
 970:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       
 1908              		.loc 1 970 0
 1909 011c 236C     		ldr	r3, [r4, #64]
 1910 011e 43F48033 		orr	r3, r3, #65536
 1911 0122 2364     		str	r3, [r4, #64]
 973:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       
 1912              		.loc 1 973 0
 1913 0124 2046     		mov	r0, r4
 1914 0126 FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
 1915              	.LVL125:
 976:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     }
 1916              		.loc 1 976 0
 1917 012a 2368     		ldr	r3, [r4]
 1918 012c 6FF00102 		mvn	r2, #1
 1919 0130 1A60     		str	r2, [r3]
 1920 0132 E9E7     		b	.L154
 1921              	.LVL126:
 1922              	.L158:
 990:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 1923              		.loc 1 990 0
 1924 0134 636C     		ldr	r3, [r4, #68]
 1925              	.LVL127:
 1926 0136 43F00203 		orr	r3, r3, #2
 1927 013a 6364     		str	r3, [r4, #68]
 993:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 1928              		.loc 1 993 0
 1929 013c 6FF02005 		mvn	r5, #32
 1930 0140 1560     		str	r5, [r2]
 996:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 1931              		.loc 1 996 0
 1932 0142 2046     		mov	r0, r4
 1933 0144 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 1934              	.LVL128:
 999:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 1935              		.loc 1 999 0
 1936 0148 2368     		ldr	r3, [r4]
 1937 014a 1D60     		str	r5, [r3]
1001:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 1938              		.loc 1 1001 0
 1939 014c E5E7     		b	.L145
 1940              		.cfi_endproc
 1941              	.LFE76:
 1943              		.section	.text.ADC_DMAError,"ax",%progbits
 1944              		.align	1
 1945              		.syntax unified
 1946              		.thumb
 1947              		.thumb_func
 1948              		.fpu softvfp
 1950              	ADC_DMAError:
 1951              	.LFB91:
ARM GAS  /tmp/cccRIBfL.s 			page 78


1637:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
1638:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** /**
1639:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @brief  DMA error callback 
1640:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
1641:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   *                the configuration information for the specified DMA module.
1642:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   * @retval None
1643:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   */
1644:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
1645:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** {
 1952              		.loc 1 1645 0
 1953              		.cfi_startproc
 1954              		@ args = 0, pretend = 0, frame = 0
 1955              		@ frame_needed = 0, uses_anonymous_args = 0
 1956              	.LVL129:
 1957 0000 08B5     		push	{r3, lr}
 1958              	.LCFI23:
 1959              		.cfi_def_cfa_offset 8
 1960              		.cfi_offset 3, -8
 1961              		.cfi_offset 14, -4
1646:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 1962              		.loc 1 1646 0
 1963 0002 806B     		ldr	r0, [r0, #56]
 1964              	.LVL130:
1647:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->State= HAL_ADC_STATE_ERROR_DMA;
 1965              		.loc 1 1647 0
 1966 0004 4023     		movs	r3, #64
 1967 0006 0364     		str	r3, [r0, #64]
1648:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Set ADC error code to DMA error */
1649:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 1968              		.loc 1 1649 0
 1969 0008 436C     		ldr	r3, [r0, #68]
 1970 000a 43F00403 		orr	r3, r3, #4
 1971 000e 4364     		str	r3, [r0, #68]
1650:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc); 
 1972              		.loc 1 1650 0
 1973 0010 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 1974              	.LVL131:
1651:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 1975              		.loc 1 1651 0
 1976 0014 08BD     		pop	{r3, pc}
 1977              		.cfi_endproc
 1978              	.LFE91:
 1980              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 1981              		.align	1
 1982              		.global	HAL_ADC_ConfigChannel
 1983              		.syntax unified
 1984              		.thumb
 1985              		.thumb_func
 1986              		.fpu softvfp
 1988              	HAL_ADC_ConfigChannel:
 1989              	.LFB84:
1278:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   __IO uint32_t counter = 0U;
 1990              		.loc 1 1278 0
 1991              		.cfi_startproc
 1992              		@ args = 0, pretend = 0, frame = 8
 1993              		@ frame_needed = 0, uses_anonymous_args = 0
 1994              		@ link register save eliminated.
ARM GAS  /tmp/cccRIBfL.s 			page 79


 1995              	.LVL132:
 1996 0000 30B4     		push	{r4, r5}
 1997              	.LCFI24:
 1998              		.cfi_def_cfa_offset 8
 1999              		.cfi_offset 4, -8
 2000              		.cfi_offset 5, -4
 2001 0002 82B0     		sub	sp, sp, #8
 2002              	.LCFI25:
 2003              		.cfi_def_cfa_offset 16
1279:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 2004              		.loc 1 1279 0
 2005 0004 0023     		movs	r3, #0
 2006 0006 0193     		str	r3, [sp, #4]
1287:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 2007              		.loc 1 1287 0
 2008 0008 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 2009 000c 012B     		cmp	r3, #1
 2010 000e 00F0B780 		beq	.L172
1287:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 2011              		.loc 1 1287 0 is_stmt 0 discriminator 2
 2012 0012 0123     		movs	r3, #1
 2013 0014 80F83C30 		strb	r3, [r0, #60]
1290:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 2014              		.loc 1 1290 0 is_stmt 1 discriminator 2
 2015 0018 0B68     		ldr	r3, [r1]
 2016 001a 092B     		cmp	r3, #9
 2017 001c 3ED9     		bls	.L163
1293:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 2018              		.loc 1 1293 0
 2019 001e 0568     		ldr	r5, [r0]
 2020 0020 EA68     		ldr	r2, [r5, #12]
 2021 0022 9BB2     		uxth	r3, r3
 2022 0024 03EB4303 		add	r3, r3, r3, lsl #1
 2023 0028 1E3B     		subs	r3, r3, #30
 2024 002a 0724     		movs	r4, #7
 2025 002c 04FA03F3 		lsl	r3, r4, r3
 2026 0030 22EA0303 		bic	r3, r2, r3
 2027 0034 EB60     		str	r3, [r5, #12]
1296:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 2028              		.loc 1 1296 0
 2029 0036 0568     		ldr	r5, [r0]
 2030 0038 EA68     		ldr	r2, [r5, #12]
 2031 003a 8C68     		ldr	r4, [r1, #8]
 2032 003c 0B88     		ldrh	r3, [r1]
 2033 003e 03EB4303 		add	r3, r3, r3, lsl #1
 2034 0042 1E3B     		subs	r3, r3, #30
 2035 0044 04FA03F3 		lsl	r3, r4, r3
 2036 0048 1343     		orrs	r3, r3, r2
 2037 004a EB60     		str	r3, [r5, #12]
 2038              	.L164:
1308:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 2039              		.loc 1 1308 0
 2040 004c 4B68     		ldr	r3, [r1, #4]
 2041 004e 062B     		cmp	r3, #6
 2042 0050 3AD8     		bhi	.L165
1311:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 2043              		.loc 1 1311 0
ARM GAS  /tmp/cccRIBfL.s 			page 80


 2044 0052 0568     		ldr	r5, [r0]
 2045 0054 6A6B     		ldr	r2, [r5, #52]
 2046 0056 03EB8303 		add	r3, r3, r3, lsl #2
 2047 005a 053B     		subs	r3, r3, #5
 2048 005c 1F24     		movs	r4, #31
 2049 005e 04FA03F3 		lsl	r3, r4, r3
 2050 0062 22EA0303 		bic	r3, r2, r3
 2051 0066 6B63     		str	r3, [r5, #52]
1314:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 2052              		.loc 1 1314 0
 2053 0068 0568     		ldr	r5, [r0]
 2054 006a 6A6B     		ldr	r2, [r5, #52]
 2055 006c 4B68     		ldr	r3, [r1, #4]
 2056 006e 03EB8303 		add	r3, r3, r3, lsl #2
 2057 0072 053B     		subs	r3, r3, #5
 2058 0074 0C88     		ldrh	r4, [r1]
 2059 0076 04FA03F3 		lsl	r3, r4, r3
 2060 007a 1343     		orrs	r3, r3, r2
 2061 007c 6B63     		str	r3, [r5, #52]
 2062              	.L166:
1336:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 2063              		.loc 1 1336 0
 2064 007e 0268     		ldr	r2, [r0]
 2065 0080 404B     		ldr	r3, .L176
 2066 0082 9A42     		cmp	r2, r3
 2067 0084 50D0     		beq	.L174
 2068              	.L168:
1343:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 2069              		.loc 1 1343 0
 2070 0086 0268     		ldr	r2, [r0]
 2071 0088 3E4B     		ldr	r3, .L176
 2072 008a 9A42     		cmp	r2, r3
 2073 008c 55D0     		beq	.L175
 2074              	.L169:
1361:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 2075              		.loc 1 1361 0
 2076 008e 0023     		movs	r3, #0
 2077 0090 80F83C30 		strb	r3, [r0, #60]
1364:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 2078              		.loc 1 1364 0
 2079 0094 1846     		mov	r0, r3
 2080              	.LVL133:
 2081              	.L162:
1365:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 2082              		.loc 1 1365 0
 2083 0096 02B0     		add	sp, sp, #8
 2084              	.LCFI26:
 2085              		.cfi_remember_state
 2086              		.cfi_def_cfa_offset 8
 2087              		@ sp needed
 2088 0098 30BC     		pop	{r4, r5}
 2089              	.LCFI27:
 2090              		.cfi_restore 5
 2091              		.cfi_restore 4
 2092              		.cfi_def_cfa_offset 0
 2093 009a 7047     		bx	lr
 2094              	.LVL134:
ARM GAS  /tmp/cccRIBfL.s 			page 81


 2095              	.L163:
 2096              	.LCFI28:
 2097              		.cfi_restore_state
1301:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 2098              		.loc 1 1301 0
 2099 009c 0568     		ldr	r5, [r0]
 2100 009e 2A69     		ldr	r2, [r5, #16]
 2101 00a0 9BB2     		uxth	r3, r3
 2102 00a2 03EB4303 		add	r3, r3, r3, lsl #1
 2103 00a6 0724     		movs	r4, #7
 2104 00a8 04FA03F3 		lsl	r3, r4, r3
 2105 00ac 22EA0303 		bic	r3, r2, r3
 2106 00b0 2B61     		str	r3, [r5, #16]
1304:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 2107              		.loc 1 1304 0
 2108 00b2 0568     		ldr	r5, [r0]
 2109 00b4 2A69     		ldr	r2, [r5, #16]
 2110 00b6 8C68     		ldr	r4, [r1, #8]
 2111 00b8 0B88     		ldrh	r3, [r1]
 2112 00ba 03EB4303 		add	r3, r3, r3, lsl #1
 2113 00be 04FA03F3 		lsl	r3, r4, r3
 2114 00c2 1343     		orrs	r3, r3, r2
 2115 00c4 2B61     		str	r3, [r5, #16]
 2116 00c6 C1E7     		b	.L164
 2117              	.L165:
1317:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 2118              		.loc 1 1317 0
 2119 00c8 0C2B     		cmp	r3, #12
 2120 00ca 16D8     		bhi	.L167
1320:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 2121              		.loc 1 1320 0
 2122 00cc 0568     		ldr	r5, [r0]
 2123 00ce 2A6B     		ldr	r2, [r5, #48]
 2124 00d0 03EB8303 		add	r3, r3, r3, lsl #2
 2125 00d4 233B     		subs	r3, r3, #35
 2126 00d6 1F24     		movs	r4, #31
 2127 00d8 04FA03F3 		lsl	r3, r4, r3
 2128 00dc 22EA0303 		bic	r3, r2, r3
 2129 00e0 2B63     		str	r3, [r5, #48]
1323:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 2130              		.loc 1 1323 0
 2131 00e2 0568     		ldr	r5, [r0]
 2132 00e4 2A6B     		ldr	r2, [r5, #48]
 2133 00e6 4B68     		ldr	r3, [r1, #4]
 2134 00e8 03EB8303 		add	r3, r3, r3, lsl #2
 2135 00ec 233B     		subs	r3, r3, #35
 2136 00ee 0C88     		ldrh	r4, [r1]
 2137 00f0 04FA03F3 		lsl	r3, r4, r3
 2138 00f4 1343     		orrs	r3, r3, r2
 2139 00f6 2B63     		str	r3, [r5, #48]
 2140 00f8 C1E7     		b	.L166
 2141              	.L167:
1329:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 2142              		.loc 1 1329 0
 2143 00fa 0568     		ldr	r5, [r0]
 2144 00fc EA6A     		ldr	r2, [r5, #44]
 2145 00fe 03EB8303 		add	r3, r3, r3, lsl #2
ARM GAS  /tmp/cccRIBfL.s 			page 82


 2146 0102 413B     		subs	r3, r3, #65
 2147 0104 1F24     		movs	r4, #31
 2148 0106 04FA03F3 		lsl	r3, r4, r3
 2149 010a 22EA0303 		bic	r3, r2, r3
 2150 010e EB62     		str	r3, [r5, #44]
1332:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 2151              		.loc 1 1332 0
 2152 0110 0568     		ldr	r5, [r0]
 2153 0112 EA6A     		ldr	r2, [r5, #44]
 2154 0114 4B68     		ldr	r3, [r1, #4]
 2155 0116 03EB8303 		add	r3, r3, r3, lsl #2
 2156 011a 413B     		subs	r3, r3, #65
 2157 011c 0C88     		ldrh	r4, [r1]
 2158 011e 04FA03F3 		lsl	r3, r4, r3
 2159 0122 1343     		orrs	r3, r3, r2
 2160 0124 EB62     		str	r3, [r5, #44]
 2161 0126 AAE7     		b	.L166
 2162              	.L174:
1336:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 2163              		.loc 1 1336 0 discriminator 1
 2164 0128 0B68     		ldr	r3, [r1]
 2165 012a 122B     		cmp	r3, #18
 2166 012c ABD1     		bne	.L168
1339:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 2167              		.loc 1 1339 0
 2168 012e 164A     		ldr	r2, .L176+4
 2169 0130 5368     		ldr	r3, [r2, #4]
 2170 0132 43F48003 		orr	r3, r3, #4194304
 2171 0136 5360     		str	r3, [r2, #4]
 2172 0138 A5E7     		b	.L168
 2173              	.L175:
1343:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 2174              		.loc 1 1343 0 discriminator 1
 2175 013a 0B68     		ldr	r3, [r1]
 2176 013c 103B     		subs	r3, r3, #16
 2177 013e 012B     		cmp	r3, #1
 2178 0140 A5D8     		bhi	.L169
1346:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 2179              		.loc 1 1346 0
 2180 0142 114A     		ldr	r2, .L176+4
 2181 0144 5368     		ldr	r3, [r2, #4]
 2182 0146 43F40003 		orr	r3, r3, #8388608
 2183 014a 5360     		str	r3, [r2, #4]
1348:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     {
 2184              		.loc 1 1348 0
 2185 014c 0B68     		ldr	r3, [r1]
 2186 014e 102B     		cmp	r3, #16
 2187 0150 9DD1     		bne	.L169
1352:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       while(counter != 0U)
 2188              		.loc 1 1352 0
 2189 0152 0E4B     		ldr	r3, .L176+8
 2190 0154 1B68     		ldr	r3, [r3]
 2191 0156 02F14672 		add	r2, r2, #51904512
 2192 015a 02F52E32 		add	r2, r2, #178176
 2193 015e 02F28332 		addw	r2, r2, #899
 2194 0162 A2FB0323 		umull	r2, r3, r2, r3
 2195 0166 9B0C     		lsrs	r3, r3, #18
ARM GAS  /tmp/cccRIBfL.s 			page 83


 2196 0168 03EB8303 		add	r3, r3, r3, lsl #2
 2197 016c 5A00     		lsls	r2, r3, #1
 2198 016e 0192     		str	r2, [sp, #4]
1353:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
 2199              		.loc 1 1353 0
 2200 0170 02E0     		b	.L170
 2201              	.L171:
1355:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       }
 2202              		.loc 1 1355 0
 2203 0172 019B     		ldr	r3, [sp, #4]
 2204 0174 013B     		subs	r3, r3, #1
 2205 0176 0193     		str	r3, [sp, #4]
 2206              	.L170:
1353:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****       {
 2207              		.loc 1 1353 0
 2208 0178 019B     		ldr	r3, [sp, #4]
 2209 017a 002B     		cmp	r3, #0
 2210 017c F9D1     		bne	.L171
 2211 017e 86E7     		b	.L169
 2212              	.L172:
1287:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****     
 2213              		.loc 1 1287 0
 2214 0180 0220     		movs	r0, #2
 2215              	.LVL135:
 2216 0182 88E7     		b	.L162
 2217              	.L177:
 2218              		.align	2
 2219              	.L176:
 2220 0184 00200140 		.word	1073815552
 2221 0188 00230140 		.word	1073816320
 2222 018c 00000000 		.word	SystemCoreClock
 2223              		.cfi_endproc
 2224              	.LFE84:
 2226              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 2227              		.align	1
 2228              		.global	HAL_ADC_AnalogWDGConfig
 2229              		.syntax unified
 2230              		.thumb
 2231              		.thumb_func
 2232              		.fpu softvfp
 2234              	HAL_ADC_AnalogWDGConfig:
 2235              	.LFB85:
1384:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** #ifdef USE_FULL_ASSERT  
 2236              		.loc 1 1384 0
 2237              		.cfi_startproc
 2238              		@ args = 0, pretend = 0, frame = 0
 2239              		@ frame_needed = 0, uses_anonymous_args = 0
 2240              		@ link register save eliminated.
 2241              	.LVL136:
1401:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 2242              		.loc 1 1401 0
 2243 0000 90F83C30 		ldrb	r3, [r0, #60]	@ zero_extendqisi2
 2244 0004 012B     		cmp	r3, #1
 2245 0006 33D0     		beq	.L182
1384:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** #ifdef USE_FULL_ASSERT  
 2246              		.loc 1 1384 0 discriminator 2
 2247 0008 10B4     		push	{r4}
ARM GAS  /tmp/cccRIBfL.s 			page 84


 2248              	.LCFI29:
 2249              		.cfi_def_cfa_offset 4
 2250              		.cfi_offset 4, -4
1401:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 2251              		.loc 1 1401 0 discriminator 2
 2252 000a 0123     		movs	r3, #1
 2253 000c 80F83C30 		strb	r3, [r0, #60]
1403:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   {
 2254              		.loc 1 1403 0 discriminator 2
 2255 0010 0B69     		ldr	r3, [r1, #16]
 2256 0012 012B     		cmp	r3, #1
 2257 0014 26D0     		beq	.L187
1411:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 2258              		.loc 1 1411 0
 2259 0016 0268     		ldr	r2, [r0]
 2260 0018 5368     		ldr	r3, [r2, #4]
 2261 001a 23F04003 		bic	r3, r3, #64
 2262 001e 5360     		str	r3, [r2, #4]
 2263              	.L181:
1415:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 2264              		.loc 1 1415 0
 2265 0020 0268     		ldr	r2, [r0]
 2266 0022 5368     		ldr	r3, [r2, #4]
 2267 0024 23F44003 		bic	r3, r3, #12582912
 2268 0028 23F40073 		bic	r3, r3, #512
 2269 002c 5360     		str	r3, [r2, #4]
1418:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 2270              		.loc 1 1418 0
 2271 002e 0268     		ldr	r2, [r0]
 2272 0030 5368     		ldr	r3, [r2, #4]
 2273 0032 0C68     		ldr	r4, [r1]
 2274 0034 2343     		orrs	r3, r3, r4
 2275 0036 5360     		str	r3, [r2, #4]
1421:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 2276              		.loc 1 1421 0
 2277 0038 0368     		ldr	r3, [r0]
 2278 003a 4A68     		ldr	r2, [r1, #4]
 2279 003c 5A62     		str	r2, [r3, #36]
1424:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 2280              		.loc 1 1424 0
 2281 003e 0368     		ldr	r3, [r0]
 2282 0040 8A68     		ldr	r2, [r1, #8]
 2283 0042 9A62     		str	r2, [r3, #40]
1427:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 2284              		.loc 1 1427 0
 2285 0044 0268     		ldr	r2, [r0]
 2286 0046 5368     		ldr	r3, [r2, #4]
 2287 0048 23F01F03 		bic	r3, r3, #31
 2288 004c 5360     		str	r3, [r2, #4]
1430:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 2289              		.loc 1 1430 0
 2290 004e 0268     		ldr	r2, [r0]
 2291 0050 5468     		ldr	r4, [r2, #4]
 2292 0052 8B89     		ldrh	r3, [r1, #12]
 2293 0054 2343     		orrs	r3, r3, r4
 2294 0056 5360     		str	r3, [r2, #4]
1433:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
ARM GAS  /tmp/cccRIBfL.s 			page 85


 2295              		.loc 1 1433 0
 2296 0058 0023     		movs	r3, #0
 2297 005a 80F83C30 		strb	r3, [r0, #60]
1436:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 2298              		.loc 1 1436 0
 2299 005e 1846     		mov	r0, r3
 2300              	.LVL137:
1437:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 2301              		.loc 1 1437 0
 2302 0060 10BC     		pop	{r4}
 2303              	.LCFI30:
 2304              		.cfi_remember_state
 2305              		.cfi_restore 4
 2306              		.cfi_def_cfa_offset 0
 2307 0062 7047     		bx	lr
 2308              	.LVL138:
 2309              	.L187:
 2310              	.LCFI31:
 2311              		.cfi_restore_state
1406:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   }
 2312              		.loc 1 1406 0
 2313 0064 0268     		ldr	r2, [r0]
 2314 0066 5368     		ldr	r3, [r2, #4]
 2315 0068 43F04003 		orr	r3, r3, #64
 2316 006c 5360     		str	r3, [r2, #4]
 2317 006e D7E7     		b	.L181
 2318              	.L182:
 2319              	.LCFI32:
 2320              		.cfi_def_cfa_offset 0
 2321              		.cfi_restore 4
1401:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   
 2322              		.loc 1 1401 0
 2323 0070 0220     		movs	r0, #2
 2324              	.LVL139:
1437:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 2325              		.loc 1 1437 0
 2326 0072 7047     		bx	lr
 2327              		.cfi_endproc
 2328              	.LFE85:
 2330              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 2331              		.align	1
 2332              		.global	HAL_ADC_GetState
 2333              		.syntax unified
 2334              		.thumb
 2335              		.thumb_func
 2336              		.fpu softvfp
 2338              	HAL_ADC_GetState:
 2339              	.LFB86:
1466:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   /* Return ADC state */
 2340              		.loc 1 1466 0
 2341              		.cfi_startproc
 2342              		@ args = 0, pretend = 0, frame = 0
 2343              		@ frame_needed = 0, uses_anonymous_args = 0
 2344              		@ link register save eliminated.
 2345              	.LVL140:
1468:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 2346              		.loc 1 1468 0
ARM GAS  /tmp/cccRIBfL.s 			page 86


 2347 0000 006C     		ldr	r0, [r0, #64]
 2348              	.LVL141:
1469:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 2349              		.loc 1 1469 0
 2350 0002 7047     		bx	lr
 2351              		.cfi_endproc
 2352              	.LFE86:
 2354              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 2355              		.align	1
 2356              		.global	HAL_ADC_GetError
 2357              		.syntax unified
 2358              		.thumb
 2359              		.thumb_func
 2360              		.fpu softvfp
 2362              	HAL_ADC_GetError:
 2363              	.LFB87:
1478:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c ****   return hadc->ErrorCode;
 2364              		.loc 1 1478 0
 2365              		.cfi_startproc
 2366              		@ args = 0, pretend = 0, frame = 0
 2367              		@ frame_needed = 0, uses_anonymous_args = 0
 2368              		@ link register save eliminated.
 2369              	.LVL142:
1479:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** }
 2370              		.loc 1 1479 0
 2371 0000 406C     		ldr	r0, [r0, #68]
 2372              	.LVL143:
1480:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_adc.c **** 
 2373              		.loc 1 1480 0
 2374 0002 7047     		bx	lr
 2375              		.cfi_endproc
 2376              	.LFE87:
 2378              		.text
 2379              	.Letext0:
 2380              		.file 3 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_d
 2381              		.file 4 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdin
 2382              		.file 5 "Drivers/CMSIS/Include/core_cm3.h"
 2383              		.file 6 "Drivers/CMSIS/Device/ST/STM32F2xx/Include/system_stm32f2xx.h"
 2384              		.file 7 "Drivers/CMSIS/Device/ST/STM32F2xx/Include/stm32f205xx.h"
 2385              		.file 8 "Drivers/CMSIS/Device/ST/STM32F2xx/Include/stm32f2xx.h"
 2386              		.file 9 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h
 2387              		.file 10 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_type
 2388              		.file 11 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/inc
 2389              		.file 12 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent
 2390              		.file 13 "Drivers/STM32F2xx_HAL_Driver/Inc/stm32f2xx_hal_def.h"
 2391              		.file 14 "Drivers/STM32F2xx_HAL_Driver/Inc/stm32f2xx_hal_dma.h"
 2392              		.file 15 "Drivers/STM32F2xx_HAL_Driver/Inc/stm32f2xx_hal_adc.h"
 2393              		.file 16 "Drivers/STM32F2xx_HAL_Driver/Inc/stm32f2xx_hal_adc_ex.h"
 2394              		.file 17 "Drivers/STM32F2xx_HAL_Driver/Inc/stm32f2xx_hal.h"
ARM GAS  /tmp/cccRIBfL.s 			page 87


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f2xx_hal_adc.c
     /tmp/cccRIBfL.s:16     .text.ADC_Init:0000000000000000 $t
     /tmp/cccRIBfL.s:22     .text.ADC_Init:0000000000000000 ADC_Init
     /tmp/cccRIBfL.s:211    .text.ADC_Init:0000000000000134 $d
     /tmp/cccRIBfL.s:217    .text.HAL_ADC_MspInit:0000000000000000 $t
     /tmp/cccRIBfL.s:224    .text.HAL_ADC_MspInit:0000000000000000 HAL_ADC_MspInit
     /tmp/cccRIBfL.s:238    .text.HAL_ADC_Init:0000000000000000 $t
     /tmp/cccRIBfL.s:245    .text.HAL_ADC_Init:0000000000000000 HAL_ADC_Init
     /tmp/cccRIBfL.s:324    .text.HAL_ADC_MspDeInit:0000000000000000 $t
     /tmp/cccRIBfL.s:331    .text.HAL_ADC_MspDeInit:0000000000000000 HAL_ADC_MspDeInit
     /tmp/cccRIBfL.s:345    .text.HAL_ADC_DeInit:0000000000000000 $t
     /tmp/cccRIBfL.s:352    .text.HAL_ADC_DeInit:0000000000000000 HAL_ADC_DeInit
     /tmp/cccRIBfL.s:415    .text.HAL_ADC_Start:0000000000000000 $t
     /tmp/cccRIBfL.s:422    .text.HAL_ADC_Start:0000000000000000 HAL_ADC_Start
     /tmp/cccRIBfL.s:592    .text.HAL_ADC_Start:00000000000000e8 $d
     /tmp/cccRIBfL.s:600    .text.HAL_ADC_Stop:0000000000000000 $t
     /tmp/cccRIBfL.s:607    .text.HAL_ADC_Stop:0000000000000000 HAL_ADC_Stop
     /tmp/cccRIBfL.s:657    .text.HAL_ADC_PollForConversion:0000000000000000 $t
     /tmp/cccRIBfL.s:664    .text.HAL_ADC_PollForConversion:0000000000000000 HAL_ADC_PollForConversion
     /tmp/cccRIBfL.s:815    .text.HAL_ADC_PollForEvent:0000000000000000 $t
     /tmp/cccRIBfL.s:822    .text.HAL_ADC_PollForEvent:0000000000000000 HAL_ADC_PollForEvent
     /tmp/cccRIBfL.s:911    .text.HAL_ADC_Start_IT:0000000000000000 $t
     /tmp/cccRIBfL.s:918    .text.HAL_ADC_Start_IT:0000000000000000 HAL_ADC_Start_IT
     /tmp/cccRIBfL.s:1094   .text.HAL_ADC_Start_IT:00000000000000f8 $d
     /tmp/cccRIBfL.s:1102   .text.HAL_ADC_Stop_IT:0000000000000000 $t
     /tmp/cccRIBfL.s:1109   .text.HAL_ADC_Stop_IT:0000000000000000 HAL_ADC_Stop_IT
     /tmp/cccRIBfL.s:1164   .text.HAL_ADC_Start_DMA:0000000000000000 $t
     /tmp/cccRIBfL.s:1171   .text.HAL_ADC_Start_DMA:0000000000000000 HAL_ADC_Start_DMA
     /tmp/cccRIBfL.s:1375   .text.HAL_ADC_Start_DMA:0000000000000128 $d
     /tmp/cccRIBfL.s:1523   .text.ADC_DMAConvCplt:0000000000000000 ADC_DMAConvCplt
     /tmp/cccRIBfL.s:1631   .text.ADC_DMAHalfConvCplt:0000000000000000 ADC_DMAHalfConvCplt
     /tmp/cccRIBfL.s:1950   .text.ADC_DMAError:0000000000000000 ADC_DMAError
     /tmp/cccRIBfL.s:1386   .text.HAL_ADC_Stop_DMA:0000000000000000 $t
     /tmp/cccRIBfL.s:1393   .text.HAL_ADC_Stop_DMA:0000000000000000 HAL_ADC_Stop_DMA
     /tmp/cccRIBfL.s:1471   .text.HAL_ADC_GetValue:0000000000000000 $t
     /tmp/cccRIBfL.s:1478   .text.HAL_ADC_GetValue:0000000000000000 HAL_ADC_GetValue
     /tmp/cccRIBfL.s:1496   .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/cccRIBfL.s:1503   .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/cccRIBfL.s:1517   .text.ADC_DMAConvCplt:0000000000000000 $t
     /tmp/cccRIBfL.s:1604   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 $t
     /tmp/cccRIBfL.s:1611   .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 HAL_ADC_ConvHalfCpltCallback
     /tmp/cccRIBfL.s:1625   .text.ADC_DMAHalfConvCplt:0000000000000000 $t
     /tmp/cccRIBfL.s:1655   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 $t
     /tmp/cccRIBfL.s:1662   .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 HAL_ADC_LevelOutOfWindowCallback
     /tmp/cccRIBfL.s:1676   .text.HAL_ADC_ErrorCallback:0000000000000000 $t
     /tmp/cccRIBfL.s:1683   .text.HAL_ADC_ErrorCallback:0000000000000000 HAL_ADC_ErrorCallback
     /tmp/cccRIBfL.s:1697   .text.HAL_ADC_IRQHandler:0000000000000000 $t
     /tmp/cccRIBfL.s:1704   .text.HAL_ADC_IRQHandler:0000000000000000 HAL_ADC_IRQHandler
     /tmp/cccRIBfL.s:1944   .text.ADC_DMAError:0000000000000000 $t
     /tmp/cccRIBfL.s:1981   .text.HAL_ADC_ConfigChannel:0000000000000000 $t
     /tmp/cccRIBfL.s:1988   .text.HAL_ADC_ConfigChannel:0000000000000000 HAL_ADC_ConfigChannel
     /tmp/cccRIBfL.s:2220   .text.HAL_ADC_ConfigChannel:0000000000000184 $d
     /tmp/cccRIBfL.s:2227   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 $t
     /tmp/cccRIBfL.s:2234   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 HAL_ADC_AnalogWDGConfig
     /tmp/cccRIBfL.s:2331   .text.HAL_ADC_GetState:0000000000000000 $t
     /tmp/cccRIBfL.s:2338   .text.HAL_ADC_GetState:0000000000000000 HAL_ADC_GetState
ARM GAS  /tmp/cccRIBfL.s 			page 88


     /tmp/cccRIBfL.s:2355   .text.HAL_ADC_GetError:0000000000000000 $t
     /tmp/cccRIBfL.s:2362   .text.HAL_ADC_GetError:0000000000000000 HAL_ADC_GetError

UNDEFINED SYMBOLS
SystemCoreClock
HAL_GetTick
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_ADCEx_InjectedConvCpltCallback
