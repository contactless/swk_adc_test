ARM GAS  /tmp/ccjB5W2d.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f2xx_hal_rcc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_RCC_DeInit,"ax",%progbits
  16              		.align	1
  17              		.global	HAL_RCC_DeInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_RCC_DeInit:
  24              	.LFB66:
  25              		.file 1 "Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c"
   1:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
   2:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   ******************************************************************************
   3:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @file    stm32f2xx_hal_rcc.c
   4:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief   RCC HAL module driver.
   6:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *          functionalities of the Reset and Clock Control (RCC) peripheral:
   8:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *           + Peripheral Control functions
  10:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *
  11:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   @verbatim
  12:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   ==============================================================================
  13:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                       ##### RCC specific features #####
  14:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   ==============================================================================
  15:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     [..]
  16:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       After reset the device is running from Internal High Speed oscillator
  17:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache
  18:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       and I-Cache are disabled, and all peripherals are off except internal
  19:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       SRAM, Flash and JTAG.
  20:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  21:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           all peripherals mapped on these busses are running at HSI speed.
  22:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  23:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  24:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           are assigned to be used for debug purpose.
  25:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
  26:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     [..]
  27:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       Once the device started from reset, the user application has to:
  28:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
  29:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           (if the application needs higher frequency/performance)
  30:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       (+) Configure the System clock frequency and Flash settings
  31:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       (+) Configure the AHB and APB busses prescalers
  32:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  33:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       (+) Configure the clock source(s) for peripherals which clocks are not
ARM GAS  /tmp/ccjB5W2d.s 			page 2


  34:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)
  35:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
  36:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                       ##### RCC Limitations #####
  37:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   ==============================================================================
  38:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     [..]
  39:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       A delay between an RCC peripheral clock enable and the effective peripheral
  40:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       enabling should be taken into account in order to manage the peripheral read/write
  41:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       from/to registers.
  42:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       (+) This delay depends on the peripheral mapping.
  43:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       (+) If peripheral is mapped on AHB: the delay is 2 AHB clock cycle
  44:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           after the clock enable bit is set on the hardware register
  45:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       (+) If peripheral is mapped on APB: the delay is 2 APB clock cycle
  46:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           after the clock enable bit is set on the hardware register
  47:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
  48:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     [..]
  49:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       Implemented Workaround:
  50:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       (+) For AHB & APB peripherals, a dummy read to the peripheral register has been
  51:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           inserted in each __HAL_RCC_PPP_CLK_ENABLE() macro.
  52:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
  53:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   @endverbatim
  54:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   ******************************************************************************
  55:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @attention
  56:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *
  57:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  58:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *
  59:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * Redistribution and use in source and binary forms, with or without modification,
  60:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * are permitted provided that the following conditions are met:
  61:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  62:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer.
  63:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  64:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer in the documentation
  65:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *      and/or other materials provided with the distribution.
  66:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  67:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *      may be used to endorse or promote products derived from this software
  68:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *      without specific prior written permission.
  69:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *
  70:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  71:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  72:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  73:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  74:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  75:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  76:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  77:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  78:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  79:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  80:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *
  81:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   ******************************************************************************
  82:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
  83:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
  84:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /* Includes ------------------------------------------------------------------*/
  85:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** #include "stm32f2xx_hal.h"
  86:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
  87:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /** @addtogroup STM32F2xx_HAL_Driver
  88:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @{
  89:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
  90:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
ARM GAS  /tmp/ccjB5W2d.s 			page 3


  91:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /** @defgroup RCC RCC
  92:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief RCC HAL module driver
  93:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @{
  94:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
  95:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
  96:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** #ifdef HAL_RCC_MODULE_ENABLED
  97:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
  98:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  99:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /* Private define ------------------------------------------------------------*/
 100:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /** @addtogroup RCC_Private_Constants
 101:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @{
 102:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
 103:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** #define CLOCKSWITCH_TIMEOUT_VALUE  5000U /* 5 s */
 104:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 105:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /* Private macro -------------------------------------------------------------*/
 106:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** #define __MCO1_CLK_ENABLE()   __HAL_RCC_GPIOA_CLK_ENABLE()
 107:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** #define MCO1_GPIO_PORT        GPIOA
 108:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** #define MCO1_PIN              GPIO_PIN_8
 109:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 110:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** #define __MCO2_CLK_ENABLE()   __HAL_RCC_GPIOC_CLK_ENABLE()
 111:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** #define MCO2_GPIO_PORT         GPIOC
 112:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** #define MCO2_PIN               GPIO_PIN_9
 113:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
 114:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @}
 115:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
 116:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 117:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /* Private variables ---------------------------------------------------------*/
 118:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /** @defgroup RCC_Private_Variables RCC Private Variables
 119:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @{
 120:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
 121:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
 122:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @}
 123:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
 124:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 125:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /* Private functions ---------------------------------------------------------*/
 126:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 127:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions RCC Exported Functions
 128:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *  @{
 129:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
 130:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 131:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group1 Initialization and de-initialization functions
 132:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  *  @brief    Initialization and Configuration functions
 133:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  *
 134:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** @verbatim
 135:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  ===============================================================================
 136:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****            ##### Initialization and de-initialization functions #####
 137:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  ===============================================================================
 138:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     [..]
 139:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       This section provides functions allowing to configure the internal/external oscillators
 140:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       (HSE, HSI, LSE, LSI, PLL, CSS and MCO) and the System busses clocks (SYSCLK, AHB, APB1
 141:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****        and APB2).
 142:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 143:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     [..] Internal/external clock and PLL configuration
 144:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****          (#) HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 145:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              the PLL as System clock source.
 146:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 147:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****          (#) LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
ARM GAS  /tmp/ccjB5W2d.s 			page 4


 148:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              clock source.
 149:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 150:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****          (#) HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 151:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              through the PLL as System clock source. Can be used also as RTC clock source.
 152:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 153:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****          (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.
 154:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 155:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****          (#) PLL (clocked by HSI or HSE), featuring two different output clocks:
 156:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****            (++) The first output is used to generate the high speed system clock (up to 120 MHz)
 157:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****            (++) The second output is used to generate the clock for the USB OTG FS (48 MHz),
 158:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                 the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 159:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 160:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****          (#) CSS (Clock security system), once enable using the macro __HAL_RCC_CSS_ENABLE()
 161:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              and if a HSE clock failure occurs(HSE used directly or through PLL as System
 162:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              clock source), the System clocks automatically switched to HSI and an interrupt
 163:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              is generated if enabled. The interrupt is linked to the Cortex-M3 NMI
 164:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              (Non-Maskable Interrupt) exception vector.
 165:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 166:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****          (#) MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 167:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              clock (through a configurable prescaler) on PA8 pin.
 168:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 169:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****          (#) MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 170:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              clock (through a configurable prescaler) on PC9 pin.
 171:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 172:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     [..] System, AHB and APB busses clocks configuration
 173:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****          (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 174:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              HSE and PLL.
 175:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              The AHB clock (HCLK) is derived from System clock through configurable
 176:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              prescaler and used to clock the CPU, memory and peripherals mapped
 177:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived
 178:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              from AHB clock through configurable prescalers and used to clock
 179:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              the peripherals mapped on these busses. You can use
 180:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              "HAL_RCC_GetSysClockFreq()" function to retrieve the frequencies of these clocks.
 181:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 182:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****          -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 183:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****            (+@) I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 184:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                 from an external clock mapped on the I2S_CKIN pin.
 185:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                 You have to use __HAL_RCC_PLLI2S_CONFIG() macro to configure this clock.
 186:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****            (+@) RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 187:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                 divided by 2 to 31. You have to use __HAL_RCC_RTC_CONFIG() and __HAL_RCC_RTC_ENABLE
 188:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                 macros to configure this clock.
 189:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****            (+@) USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
 190:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                 to work correctly, while the SDIO require a frequency equal or lower than
 191:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                 to 48. This clock is derived of the main PLL through PLLQ divider.
 192:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****            (+@) IWDG clock which is always the LSI clock.
 193:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 194:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****          (#) For the stm32f2xx devices, the maximum
 195:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              frequency of the SYSCLK and HCLK is 120 MHz, PCLK2 60 MHz and PCLK1 30 MHz.
 196:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              Depending on the device voltage range, the maximum frequency should
 197:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****              be adapted accordingly:
 198:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  +-------------------------------------------------------------------------------------+
 199:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 200:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |               |---------------------------------------------------------------------|
 201:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 202:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 203:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 204:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
ARM GAS  /tmp/ccjB5W2d.s 			page 5


 205:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 206:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  |
 207:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 208:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
 209:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 210:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
 211:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 212:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 120|72 < HCLK <= 90  |64 < HCLK <= 80  |
 213:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 214:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |5WS(6CPU cycle)|      NA        |      NA        |90 < HCLK <= 108 |80 < HCLK <= 96  |
 215:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 216:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |6WS(7CPU cycle)|      NA        |      NA        |108 < HCLK <= 120|96 < HCLK <= 112 |
 217:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|
 218:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  |7WS(8CPU cycle)|      NA        |      NA        |       NA        |112 < HCLK <= 120|
 219:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  +-------------------------------------------------------------------------------------+
 220:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** @endverbatim
 221:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @{
 222:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
 223:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 224:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
 225:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 226:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 227:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            - HSI ON and used as system clock source
 228:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 229:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 230:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 231:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            - All interrupts disabled
 232:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   This function doesn't modify the configuration of the
 233:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            - Peripheral clocks
 234:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            - LSI, LSE and RTC clocks
 235:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval HAL status
 236:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
 237:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_DeInit(void)
 238:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {
  26              		.loc 1 238 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 38B5     		push	{r3, r4, r5, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 16
  33              		.cfi_offset 3, -16
  34              		.cfi_offset 4, -12
  35              		.cfi_offset 5, -8
  36              		.cfi_offset 14, -4
 239:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   uint32_t tickstart;
 240:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 241:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get Start Tick*/
 242:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   tickstart = HAL_GetTick();
  37              		.loc 1 242 0
  38 0002 FFF7FEFF 		bl	HAL_GetTick
  39              	.LVL0:
  40 0006 0446     		mov	r4, r0
  41              	.LVL1:
 243:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 244:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Set HSION bit to the reset value */
 245:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   SET_BIT(RCC->CR, RCC_CR_HSION);
ARM GAS  /tmp/ccjB5W2d.s 			page 6


  42              		.loc 1 245 0
  43 0008 3D4A     		ldr	r2, .L24
  44 000a 1368     		ldr	r3, [r2]
  45 000c 43F00103 		orr	r3, r3, #1
  46 0010 1360     		str	r3, [r2]
  47              	.LVL2:
  48              	.L2:
 246:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 247:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Wait till HSI is ready */
 248:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
  49              		.loc 1 248 0
  50 0012 3B4B     		ldr	r3, .L24
  51 0014 1B68     		ldr	r3, [r3]
  52 0016 13F0020F 		tst	r3, #2
  53 001a 07D1     		bne	.L19
 249:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 250:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
  54              		.loc 1 250 0
  55 001c FFF7FEFF 		bl	HAL_GetTick
  56              	.LVL3:
  57 0020 001B     		subs	r0, r0, r4
  58 0022 0228     		cmp	r0, #2
  59 0024 F5D9     		bls	.L2
 251:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 252:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       return HAL_TIMEOUT;
  60              		.loc 1 252 0
  61 0026 0323     		movs	r3, #3
  62              	.L3:
 253:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 254:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 255:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 256:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Set HSITRIM[4:0] bits to the reset value */
 257:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 258:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 259:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get Start Tick*/
 260:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 261:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 262:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Reset CFGR register (HSI is selected as system clock source) */
 263:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC->CFGR = 0x00000000u;
 264:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 265:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Wait till clock switch is ready */
 266:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 267:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 268:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 269:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 270:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       return HAL_TIMEOUT;
 271:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 272:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 273:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 274:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get Start Tick */
 275:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 276:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 277:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Clear CR register in 3 steps: first to clear HSEON, HSEBYP and CSSON bits */
 278:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 279:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 280:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Wait till HSE is disabled */
 281:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
ARM GAS  /tmp/ccjB5W2d.s 			page 7


 282:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 283:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 284:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 285:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       return HAL_TIMEOUT;
 286:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 287:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 288:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 289:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get Start Tick */
 290:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 291:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 292:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Second step is to clear PLLON bit */
 293:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 294:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 295:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Wait till PLL is disabled */
 296:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 297:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 298:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 299:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 300:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       return HAL_TIMEOUT;
 301:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 302:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 303:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 304:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Once PLL is OFF, reset PLLCFGR register to default value */
 305:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 306:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 307:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get Start Tick */
 308:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 309:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 310:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Third step is to clear PLLI2SON bit */
 311:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 312:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 313:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Wait till PLLI2S is disabled */
 314:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 315:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 316:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 317:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 318:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       return HAL_TIMEOUT;
 319:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 320:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 321:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 322:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Once PLLI2S is OFF, reset PLLI2SCFGR register to default value */
 323:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 324:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 325:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Disable all interrupts */
 326:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC->CIR = 0x00000000u;
 327:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 328:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Clear all flags */
 329:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC->CSR = 0xFFFFFFFFu;
 330:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 331:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Update the SystemCoreClock global variable */
 332:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   SystemCoreClock = HSI_VALUE;
 333:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 334:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Adapt Systick interrupt period */
 335:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 336:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 337:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     return HAL_ERROR;
 338:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
ARM GAS  /tmp/ccjB5W2d.s 			page 8


 339:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   else
 340:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 341:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     return HAL_OK;
 342:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 343:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
  63              		.loc 1 343 0
  64 0028 1846     		mov	r0, r3
  65 002a 38BD     		pop	{r3, r4, r5, pc}
  66              	.LVL4:
  67              	.L19:
 257:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
  68              		.loc 1 257 0
  69 002c 344D     		ldr	r5, .L24
  70 002e 2B68     		ldr	r3, [r5]
  71 0030 43F08003 		orr	r3, r3, #128
  72 0034 2B60     		str	r3, [r5]
 260:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
  73              		.loc 1 260 0
  74 0036 FFF7FEFF 		bl	HAL_GetTick
  75              	.LVL5:
  76 003a 0446     		mov	r4, r0
  77              	.LVL6:
 263:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
  78              		.loc 1 263 0
  79 003c 0023     		movs	r3, #0
  80 003e AB60     		str	r3, [r5, #8]
  81              	.LVL7:
  82              	.L5:
 266:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
  83              		.loc 1 266 0
  84 0040 2F4B     		ldr	r3, .L24
  85 0042 9B68     		ldr	r3, [r3, #8]
  86 0044 13F00C0F 		tst	r3, #12
  87 0048 08D0     		beq	.L20
 268:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
  88              		.loc 1 268 0
  89 004a FFF7FEFF 		bl	HAL_GetTick
  90              	.LVL8:
  91 004e 001B     		subs	r0, r0, r4
  92 0050 41F28833 		movw	r3, #5000
  93 0054 9842     		cmp	r0, r3
  94 0056 F3D9     		bls	.L5
 270:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
  95              		.loc 1 270 0
  96 0058 0323     		movs	r3, #3
  97 005a E5E7     		b	.L3
  98              	.L20:
 275:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
  99              		.loc 1 275 0
 100 005c FFF7FEFF 		bl	HAL_GetTick
 101              	.LVL9:
 102 0060 0446     		mov	r4, r0
 103              	.LVL10:
 278:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 104              		.loc 1 278 0
 105 0062 274A     		ldr	r2, .L24
 106 0064 1368     		ldr	r3, [r2]
ARM GAS  /tmp/ccjB5W2d.s 			page 9


 107 0066 23F45023 		bic	r3, r3, #851968
 108 006a 1360     		str	r3, [r2]
 109              	.LVL11:
 110              	.L7:
 281:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 111              		.loc 1 281 0
 112 006c 244B     		ldr	r3, .L24
 113 006e 1B68     		ldr	r3, [r3]
 114 0070 13F4003F 		tst	r3, #131072
 115 0074 06D0     		beq	.L21
 283:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 116              		.loc 1 283 0
 117 0076 FFF7FEFF 		bl	HAL_GetTick
 118              	.LVL12:
 119 007a 001B     		subs	r0, r0, r4
 120 007c 6428     		cmp	r0, #100
 121 007e F5D9     		bls	.L7
 285:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 122              		.loc 1 285 0
 123 0080 0323     		movs	r3, #3
 124 0082 D1E7     		b	.L3
 125              	.L21:
 290:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 126              		.loc 1 290 0
 127 0084 FFF7FEFF 		bl	HAL_GetTick
 128              	.LVL13:
 129 0088 0446     		mov	r4, r0
 130              	.LVL14:
 293:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 131              		.loc 1 293 0
 132 008a 1D4A     		ldr	r2, .L24
 133 008c 1368     		ldr	r3, [r2]
 134 008e 23F08073 		bic	r3, r3, #16777216
 135 0092 1360     		str	r3, [r2]
 136              	.LVL15:
 137              	.L9:
 296:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 138              		.loc 1 296 0
 139 0094 1A4B     		ldr	r3, .L24
 140 0096 1B68     		ldr	r3, [r3]
 141 0098 13F0007F 		tst	r3, #33554432
 142 009c 06D0     		beq	.L22
 298:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 143              		.loc 1 298 0
 144 009e FFF7FEFF 		bl	HAL_GetTick
 145              	.LVL16:
 146 00a2 001B     		subs	r0, r0, r4
 147 00a4 6428     		cmp	r0, #100
 148 00a6 F5D9     		bls	.L9
 300:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 149              		.loc 1 300 0
 150 00a8 0323     		movs	r3, #3
 151 00aa BDE7     		b	.L3
 152              	.L22:
 305:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 153              		.loc 1 305 0
 154 00ac 144D     		ldr	r5, .L24
ARM GAS  /tmp/ccjB5W2d.s 			page 10


 155 00ae 154B     		ldr	r3, .L24+4
 156 00b0 6B60     		str	r3, [r5, #4]
 308:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 157              		.loc 1 308 0
 158 00b2 FFF7FEFF 		bl	HAL_GetTick
 159              	.LVL17:
 160 00b6 0446     		mov	r4, r0
 161              	.LVL18:
 311:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 162              		.loc 1 311 0
 163 00b8 2B68     		ldr	r3, [r5]
 164 00ba 23F08063 		bic	r3, r3, #67108864
 165 00be 2B60     		str	r3, [r5]
 166              	.LVL19:
 167              	.L11:
 314:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 168              		.loc 1 314 0
 169 00c0 0F4B     		ldr	r3, .L24
 170 00c2 1B68     		ldr	r3, [r3]
 171 00c4 13F0006F 		tst	r3, #134217728
 172 00c8 06D0     		beq	.L23
 316:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 173              		.loc 1 316 0
 174 00ca FFF7FEFF 		bl	HAL_GetTick
 175              	.LVL20:
 176 00ce 001B     		subs	r0, r0, r4
 177 00d0 0228     		cmp	r0, #2
 178 00d2 F5D9     		bls	.L11
 318:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 179              		.loc 1 318 0
 180 00d4 0323     		movs	r3, #3
 181 00d6 A7E7     		b	.L3
 182              	.L23:
 323:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 183              		.loc 1 323 0
 184 00d8 094B     		ldr	r3, .L24
 185 00da 0B4A     		ldr	r2, .L24+8
 186 00dc C3F88420 		str	r2, [r3, #132]
 326:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 187              		.loc 1 326 0
 188 00e0 0020     		movs	r0, #0
 189 00e2 D860     		str	r0, [r3, #12]
 329:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 190              		.loc 1 329 0
 191 00e4 4FF0FF32 		mov	r2, #-1
 192 00e8 5A67     		str	r2, [r3, #116]
 332:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 193              		.loc 1 332 0
 194 00ea 084B     		ldr	r3, .L24+12
 195 00ec 084A     		ldr	r2, .L24+16
 196 00ee 1A60     		str	r2, [r3]
 335:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 197              		.loc 1 335 0
 198 00f0 FFF7FEFF 		bl	HAL_InitTick
 199              	.LVL21:
 200 00f4 0346     		mov	r3, r0
 201 00f6 0028     		cmp	r0, #0
ARM GAS  /tmp/ccjB5W2d.s 			page 11


 202 00f8 96D0     		beq	.L3
 337:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 203              		.loc 1 337 0
 204 00fa 0123     		movs	r3, #1
 205 00fc 94E7     		b	.L3
 206              	.L25:
 207 00fe 00BF     		.align	2
 208              	.L24:
 209 0100 00380240 		.word	1073887232
 210 0104 10300004 		.word	67121168
 211 0108 00300020 		.word	536883200
 212 010c 00000000 		.word	SystemCoreClock
 213 0110 0024F400 		.word	16000000
 214              		.cfi_endproc
 215              	.LFE66:
 217              		.section	.text.HAL_RCC_OscConfig,"ax",%progbits
 218              		.align	1
 219              		.global	HAL_RCC_OscConfig
 220              		.syntax unified
 221              		.thumb
 222              		.thumb_func
 223              		.fpu softvfp
 225              	HAL_RCC_OscConfig:
 226              	.LFB67:
 344:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 345:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
 346:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief  Initializes the RCC Oscillators according to the specified parameters in the
 347:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         RCC_OscInitTypeDef.
 348:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
 349:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         contains the configuration information for the RCC Oscillators.
 350:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   The PLL is not disabled when used as system clock.
 351:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   Transitions LSE Bypass to LSE On and LSE On to LSE Bypass are not
 352:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         supported by this API. User should request a transition to LSE Off
 353:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         first and then LSE On or LSE Bypass.
 354:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 355:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         supported by this API. User should request a transition to HSE Off
 356:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         first and then HSE On or HSE Bypass.
 357:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval HAL status
 358:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
 359:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 360:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {
 227              		.loc 1 360 0
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 8
 230              		@ frame_needed = 0, uses_anonymous_args = 0
 231              	.LVL22:
 361:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   uint32_t tickstart;
 362:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 363:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Check Null pointer */
 364:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if(RCC_OscInitStruct == NULL)
 232              		.loc 1 364 0
 233 0000 0028     		cmp	r0, #0
 234 0002 00F09781 		beq	.L66
 360:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   uint32_t tickstart;
 235              		.loc 1 360 0
 236 0006 30B5     		push	{r4, r5, lr}
 237              	.LCFI1:
ARM GAS  /tmp/ccjB5W2d.s 			page 12


 238              		.cfi_def_cfa_offset 12
 239              		.cfi_offset 4, -12
 240              		.cfi_offset 5, -8
 241              		.cfi_offset 14, -4
 242 0008 83B0     		sub	sp, sp, #12
 243              	.LCFI2:
 244              		.cfi_def_cfa_offset 24
 245 000a 0446     		mov	r4, r0
 365:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 366:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     return HAL_ERROR;
 367:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 368:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 369:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Check the parameters */
 370:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 371:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /*------------------------------- HSE Configuration ------------------------*/
 372:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 246              		.loc 1 372 0
 247 000c 0368     		ldr	r3, [r0]
 248 000e 13F0010F 		tst	r3, #1
 249 0012 2ED0     		beq	.L28
 373:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 374:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Check the parameters */
 375:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 376:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not dis
 377:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 250              		.loc 1 377 0
 251 0014 A34B     		ldr	r3, .L97
 252 0016 9B68     		ldr	r3, [r3, #8]
 253 0018 03F00C03 		and	r3, r3, #12
 254 001c 042B     		cmp	r3, #4
 255 001e 1FD0     		beq	.L29
 378:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) 
 256              		.loc 1 378 0 discriminator 1
 257 0020 A04B     		ldr	r3, .L97
 258 0022 9B68     		ldr	r3, [r3, #8]
 259 0024 03F00C03 		and	r3, r3, #12
 377:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) 
 260              		.loc 1 377 0 discriminator 1
 261 0028 082B     		cmp	r3, #8
 262 002a 14D0     		beq	.L87
 263              	.L30:
 379:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 380:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_
 381:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 382:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         return HAL_ERROR;
 383:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 384:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 385:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     else
 386:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 387:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Set the new HSE configuration ---------------------------------------*/
 388:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 264              		.loc 1 388 0
 265 002c 2279     		ldrb	r2, [r4, #4]	@ zero_extendqisi2
 266 002e 9E4B     		ldr	r3, .L97+4
 267 0030 1A70     		strb	r2, [r3]
 389:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 390:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Check the HSE State */
ARM GAS  /tmp/ccjB5W2d.s 			page 13


 391:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 268              		.loc 1 391 0
 269 0032 6368     		ldr	r3, [r4, #4]
 270 0034 002B     		cmp	r3, #0
 271 0036 40D0     		beq	.L31
 392:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 393:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Get Start Tick */
 394:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 272              		.loc 1 394 0
 273 0038 FFF7FEFF 		bl	HAL_GetTick
 274              	.LVL23:
 275 003c 0546     		mov	r5, r0
 276              	.LVL24:
 277              	.L32:
 395:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 396:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Wait till HSE is ready */
 397:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 278              		.loc 1 397 0
 279 003e 994B     		ldr	r3, .L97
 280 0040 1B68     		ldr	r3, [r3]
 281 0042 13F4003F 		tst	r3, #131072
 282 0046 14D1     		bne	.L28
 398:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 399:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 283              		.loc 1 399 0
 284 0048 FFF7FEFF 		bl	HAL_GetTick
 285              	.LVL25:
 286 004c 401B     		subs	r0, r0, r5
 287 004e 6428     		cmp	r0, #100
 288 0050 F5D9     		bls	.L32
 400:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           {
 401:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****             return HAL_TIMEOUT;
 289              		.loc 1 401 0
 290 0052 0320     		movs	r0, #3
 291 0054 73E1     		b	.L27
 292              	.LVL26:
 293              	.L87:
 378:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 294              		.loc 1 378 0
 295 0056 934B     		ldr	r3, .L97
 296 0058 5B68     		ldr	r3, [r3, #4]
 297 005a 13F4800F 		tst	r3, #4194304
 298 005e E5D0     		beq	.L30
 299              	.L29:
 380:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 300              		.loc 1 380 0
 301 0060 904B     		ldr	r3, .L97
 302 0062 1B68     		ldr	r3, [r3]
 303 0064 13F4003F 		tst	r3, #131072
 304 0068 03D0     		beq	.L28
 380:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 305              		.loc 1 380 0 is_stmt 0 discriminator 1
 306 006a 6368     		ldr	r3, [r4, #4]
 307 006c 002B     		cmp	r3, #0
 308 006e 00F06381 		beq	.L88
 309              	.LVL27:
 310              	.L28:
ARM GAS  /tmp/ccjB5W2d.s 			page 14


 402:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           }
 403:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 404:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 405:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       else
 406:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 407:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Get Start Tick */
 408:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 409:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 410:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Wait till HSE is bypassed or disabled */
 411:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 412:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 413:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 414:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           {
 415:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****             return HAL_TIMEOUT;
 416:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           }
 417:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 418:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 419:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 420:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 421:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /*----------------------------- HSI Configuration --------------------------*/
 422:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 311              		.loc 1 422 0 is_stmt 1
 312 0072 2368     		ldr	r3, [r4]
 313 0074 13F0020F 		tst	r3, #2
 314 0078 4BD0     		beq	.L36
 423:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 424:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Check the parameters */
 425:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 426:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 427:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 428:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock *
 429:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 315              		.loc 1 429 0
 316 007a 8A4B     		ldr	r3, .L97
 317 007c 9B68     		ldr	r3, [r3, #8]
 318 007e 13F00C0F 		tst	r3, #12
 319 0082 2ED0     		beq	.L37
 430:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) 
 320              		.loc 1 430 0 discriminator 1
 321 0084 874B     		ldr	r3, .L97
 322 0086 9B68     		ldr	r3, [r3, #8]
 323 0088 03F00C03 		and	r3, r3, #12
 429:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) 
 324              		.loc 1 429 0 discriminator 1
 325 008c 082B     		cmp	r3, #8
 326 008e 23D0     		beq	.L89
 327              	.L38:
 431:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 432:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* When HSI is used as system clock it will not disabled */
 433:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_
 434:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 435:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         return HAL_ERROR;
 436:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 437:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Otherwise, just the calibration is allowed */
 438:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       else
 439:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 440:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
ARM GAS  /tmp/ccjB5W2d.s 			page 15


 441:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 442:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 443:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 444:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     else
 445:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 446:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Check the HSI State */
 447:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 328              		.loc 1 447 0
 329 0090 E368     		ldr	r3, [r4, #12]
 330 0092 002B     		cmp	r3, #0
 331 0094 64D0     		beq	.L40
 448:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 449:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Enable the Internal High Speed oscillator (HSI). */
 450:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         __HAL_RCC_HSI_ENABLE();
 332              		.loc 1 450 0
 333 0096 854B     		ldr	r3, .L97+8
 334 0098 0122     		movs	r2, #1
 335 009a 1A60     		str	r2, [r3]
 451:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 452:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Get Start Tick */
 453:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 336              		.loc 1 453 0
 337 009c FFF7FEFF 		bl	HAL_GetTick
 338              	.LVL28:
 339 00a0 0546     		mov	r5, r0
 340              	.LVL29:
 341              	.L41:
 454:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 455:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Wait till HSI is ready */
 456:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 342              		.loc 1 456 0
 343 00a2 804B     		ldr	r3, .L97
 344 00a4 1B68     		ldr	r3, [r3]
 345 00a6 13F0020F 		tst	r3, #2
 346 00aa 4AD1     		bne	.L90
 457:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 458:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 347              		.loc 1 458 0
 348 00ac FFF7FEFF 		bl	HAL_GetTick
 349              	.LVL30:
 350 00b0 401B     		subs	r0, r0, r5
 351 00b2 0228     		cmp	r0, #2
 352 00b4 F5D9     		bls	.L41
 459:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           {
 460:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****             return HAL_TIMEOUT;
 353              		.loc 1 460 0
 354 00b6 0320     		movs	r0, #3
 355 00b8 41E1     		b	.L27
 356              	.LVL31:
 357              	.L31:
 408:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 358              		.loc 1 408 0
 359 00ba FFF7FEFF 		bl	HAL_GetTick
 360              	.LVL32:
 361 00be 0546     		mov	r5, r0
 362              	.LVL33:
 363              	.L34:
ARM GAS  /tmp/ccjB5W2d.s 			page 16


 411:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 364              		.loc 1 411 0
 365 00c0 784B     		ldr	r3, .L97
 366 00c2 1B68     		ldr	r3, [r3]
 367 00c4 13F4003F 		tst	r3, #131072
 368 00c8 D3D0     		beq	.L28
 413:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           {
 369              		.loc 1 413 0
 370 00ca FFF7FEFF 		bl	HAL_GetTick
 371              	.LVL34:
 372 00ce 401B     		subs	r0, r0, r5
 373 00d0 6428     		cmp	r0, #100
 374 00d2 F5D9     		bls	.L34
 415:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           }
 375              		.loc 1 415 0
 376 00d4 0320     		movs	r0, #3
 377 00d6 32E1     		b	.L27
 378              	.LVL35:
 379              	.L89:
 430:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 380              		.loc 1 430 0
 381 00d8 724B     		ldr	r3, .L97
 382 00da 5B68     		ldr	r3, [r3, #4]
 383 00dc 13F4800F 		tst	r3, #4194304
 384 00e0 D6D1     		bne	.L38
 385              	.L37:
 433:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 386              		.loc 1 433 0
 387 00e2 704B     		ldr	r3, .L97
 388 00e4 1B68     		ldr	r3, [r3]
 389 00e6 13F0020F 		tst	r3, #2
 390 00ea 04D0     		beq	.L39
 433:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 391              		.loc 1 433 0 is_stmt 0 discriminator 1
 392 00ec E368     		ldr	r3, [r4, #12]
 393 00ee 012B     		cmp	r3, #1
 394 00f0 01D0     		beq	.L39
 435:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 395              		.loc 1 435 0 is_stmt 1
 396 00f2 0120     		movs	r0, #1
 397 00f4 23E1     		b	.L27
 398              	.L39:
 441:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 399              		.loc 1 441 0
 400 00f6 6B48     		ldr	r0, .L97
 401 00f8 0368     		ldr	r3, [r0]
 402 00fa 23F0F803 		bic	r3, r3, #248
 403 00fe 2169     		ldr	r1, [r4, #16]
 404              	.LVL36:
 405              	.LBB27:
 406              	.LBB28:
 407              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
ARM GAS  /tmp/ccjB5W2d.s 			page 17


   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccjB5W2d.s 			page 18


  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
ARM GAS  /tmp/ccjB5W2d.s 			page 19


 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccjB5W2d.s 			page 20


 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
ARM GAS  /tmp/ccjB5W2d.s 			page 21


 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccjB5W2d.s 			page 22


 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccjB5W2d.s 			page 23


 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
ARM GAS  /tmp/ccjB5W2d.s 			page 24


 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccjB5W2d.s 			page 25


 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccjB5W2d.s 			page 26


 519:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 408              		.loc 2 531 0
 409 0100 F822     		movs	r2, #248
 410              		.syntax unified
 411              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 412 0102 92FAA2F2 		rbit r2, r2
 413              	@ 0 "" 2
 414              	.LVL37:
 415              		.thumb
 416              		.syntax unified
 417              	.LBE28:
 418              	.LBE27:
 441:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 419              		.loc 1 441 0
 420 0106 B2FA82F2 		clz	r2, r2
 421 010a 01FA02F2 		lsl	r2, r1, r2
 422 010e 1343     		orrs	r3, r3, r2
 423 0110 0360     		str	r3, [r0]
 424              	.L36:
 461:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           }
 462:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 463:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 464:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
 465:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 466:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 467:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       else
 468:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 469:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Disable the Internal High Speed oscillator (HSI). */
 470:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         __HAL_RCC_HSI_DISABLE();
 471:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 472:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Get Start Tick */
 473:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 474:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 475:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Wait till HSI is ready */
 476:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 477:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 478:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 479:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           {
 480:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****             return HAL_TIMEOUT;
 481:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           }
 482:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 483:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 484:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 485:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 486:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /*------------------------------ LSI Configuration -------------------------*/
ARM GAS  /tmp/ccjB5W2d.s 			page 27


 487:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 425              		.loc 1 487 0
 426 0112 2368     		ldr	r3, [r4]
 427 0114 13F0080F 		tst	r3, #8
 428 0118 46D0     		beq	.L45
 488:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 489:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Check the parameters */
 490:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 491:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 492:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Check the LSI State */
 493:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 429              		.loc 1 493 0
 430 011a 6369     		ldr	r3, [r4, #20]
 431 011c 93B3     		cbz	r3, .L46
 494:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 495:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Enable the Internal Low Speed oscillator (LSI). */
 496:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       __HAL_RCC_LSI_ENABLE();
 432              		.loc 1 496 0
 433 011e 644B     		ldr	r3, .L97+12
 434 0120 0122     		movs	r2, #1
 435 0122 1A60     		str	r2, [r3]
 497:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 498:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Get Start Tick */
 499:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 436              		.loc 1 499 0
 437 0124 FFF7FEFF 		bl	HAL_GetTick
 438              	.LVL38:
 439 0128 0546     		mov	r5, r0
 440              	.LVL39:
 441              	.L47:
 500:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 501:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Wait till LSI is ready */
 502:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 442              		.loc 1 502 0
 443 012a 5E4B     		ldr	r3, .L97
 444 012c 5B6F     		ldr	r3, [r3, #116]
 445 012e 13F0020F 		tst	r3, #2
 446 0132 39D1     		bne	.L45
 503:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 504:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 447              		.loc 1 504 0
 448 0134 FFF7FEFF 		bl	HAL_GetTick
 449              	.LVL40:
 450 0138 401B     		subs	r0, r0, r5
 451 013a 0228     		cmp	r0, #2
 452 013c F5D9     		bls	.L47
 505:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 506:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           return HAL_TIMEOUT;
 453              		.loc 1 506 0
 454 013e 0320     		movs	r0, #3
 455 0140 FDE0     		b	.L27
 456              	.L90:
 465:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 457              		.loc 1 465 0
 458 0142 5848     		ldr	r0, .L97
 459 0144 0368     		ldr	r3, [r0]
 460 0146 23F0F803 		bic	r3, r3, #248
ARM GAS  /tmp/ccjB5W2d.s 			page 28


 461 014a 2169     		ldr	r1, [r4, #16]
 462              	.LVL41:
 463              	.LBB29:
 464              	.LBB30:
 465              		.loc 2 531 0
 466 014c F822     		movs	r2, #248
 467              		.syntax unified
 468              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 469 014e 92FAA2F2 		rbit r2, r2
 470              	@ 0 "" 2
 471              	.LVL42:
 472              		.thumb
 473              		.syntax unified
 474              	.LBE30:
 475              	.LBE29:
 465:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 476              		.loc 1 465 0
 477 0152 B2FA82F2 		clz	r2, r2
 478 0156 01FA02F2 		lsl	r2, r1, r2
 479 015a 1343     		orrs	r3, r3, r2
 480 015c 0360     		str	r3, [r0]
 481 015e D8E7     		b	.L36
 482              	.LVL43:
 483              	.L40:
 470:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 484              		.loc 1 470 0
 485 0160 524B     		ldr	r3, .L97+8
 486 0162 0022     		movs	r2, #0
 487 0164 1A60     		str	r2, [r3]
 473:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 488              		.loc 1 473 0
 489 0166 FFF7FEFF 		bl	HAL_GetTick
 490              	.LVL44:
 491 016a 0546     		mov	r5, r0
 492              	.LVL45:
 493              	.L43:
 476:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 494              		.loc 1 476 0
 495 016c 4D4B     		ldr	r3, .L97
 496 016e 1B68     		ldr	r3, [r3]
 497 0170 13F0020F 		tst	r3, #2
 498 0174 CDD0     		beq	.L36
 478:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           {
 499              		.loc 1 478 0
 500 0176 FFF7FEFF 		bl	HAL_GetTick
 501              	.LVL46:
 502 017a 401B     		subs	r0, r0, r5
 503 017c 0228     		cmp	r0, #2
 504 017e F5D9     		bls	.L43
 480:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           }
 505              		.loc 1 480 0
 506 0180 0320     		movs	r0, #3
 507 0182 DCE0     		b	.L27
 508              	.LVL47:
 509              	.L46:
 507:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 508:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
ARM GAS  /tmp/ccjB5W2d.s 			page 29


 509:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 510:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     else
 511:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 512:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Disable the Internal Low Speed oscillator (LSI). */
 513:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       __HAL_RCC_LSI_DISABLE();
 510              		.loc 1 513 0
 511 0184 4A4B     		ldr	r3, .L97+12
 512 0186 0022     		movs	r2, #0
 513 0188 1A60     		str	r2, [r3]
 514:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 515:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Get Start Tick */
 516:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 514              		.loc 1 516 0
 515 018a FFF7FEFF 		bl	HAL_GetTick
 516              	.LVL48:
 517 018e 0546     		mov	r5, r0
 518              	.LVL49:
 519              	.L49:
 517:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 518:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Wait till LSI is ready */
 519:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 520              		.loc 1 519 0
 521 0190 444B     		ldr	r3, .L97
 522 0192 5B6F     		ldr	r3, [r3, #116]
 523 0194 13F0020F 		tst	r3, #2
 524 0198 06D0     		beq	.L45
 520:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 521:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 525              		.loc 1 521 0
 526 019a FFF7FEFF 		bl	HAL_GetTick
 527              	.LVL50:
 528 019e 401B     		subs	r0, r0, r5
 529 01a0 0228     		cmp	r0, #2
 530 01a2 F5D9     		bls	.L49
 522:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 523:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           return HAL_TIMEOUT;
 531              		.loc 1 523 0
 532 01a4 0320     		movs	r0, #3
 533 01a6 CAE0     		b	.L27
 534              	.LVL51:
 535              	.L45:
 524:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 525:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 526:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 527:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 528:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /*------------------------------ LSE Configuration -------------------------*/
 529:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 536              		.loc 1 529 0
 537 01a8 2368     		ldr	r3, [r4]
 538 01aa 13F0040F 		tst	r3, #4
 539 01ae 1FD1     		bne	.L91
 540              	.L51:
 530:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 531:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Check the parameters */
 532:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 533:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 534:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Enable Power Clock */
ARM GAS  /tmp/ccjB5W2d.s 			page 30


 535:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     __HAL_RCC_PWR_CLK_ENABLE();
 536:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 537:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Enable write access to Backup domain */
 538:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     PWR->CR |= PWR_CR_DBP;
 539:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 540:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Wait for Backup domain Write protection enable */
 541:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     tickstart = HAL_GetTick();
 542:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 543:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     while((PWR->CR & PWR_CR_DBP) == RESET)
 544:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 545:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 546:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 547:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         return HAL_TIMEOUT;
 548:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 549:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 550:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 551:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Set the new LSE configuration -----------------------------------------*/
 552:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 553:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Check the LSE State */
 554:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 555:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 556:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Get Start Tick */
 557:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 558:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 559:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Wait till LSE is ready */
 560:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 561:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 562:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 563:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 564:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           return HAL_TIMEOUT;
 565:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 566:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 567:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 568:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     else
 569:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 570:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Get Start Tick */
 571:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 572:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 573:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Wait till LSE is ready */
 574:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 575:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 576:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 577:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 578:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           return HAL_TIMEOUT;
 579:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 580:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 581:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 582:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 583:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /*-------------------------------- PLL Configuration -----------------------*/
 584:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Check the parameters */
 585:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 586:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 541              		.loc 1 586 0
 542 01b0 A369     		ldr	r3, [r4, #24]
 543 01b2 002B     		cmp	r3, #0
 544 01b4 00F0C280 		beq	.L78
 587:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
ARM GAS  /tmp/ccjB5W2d.s 			page 31


 588:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Check if the PLL is used as system clock or not */
 589:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 545              		.loc 1 589 0
 546 01b8 3A4A     		ldr	r2, .L97
 547 01ba 9268     		ldr	r2, [r2, #8]
 548 01bc 02F00C02 		and	r2, r2, #12
 549 01c0 082A     		cmp	r2, #8
 550 01c2 00F0BE80 		beq	.L79
 590:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 591:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 551              		.loc 1 591 0
 552 01c6 022B     		cmp	r3, #2
 553 01c8 59D0     		beq	.L92
 592:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 593:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Check the parameters */
 594:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 595:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 596:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 597:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 598:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 599:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 600:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Disable the main PLL. */
 601:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 602:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 603:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Get Start Tick */
 604:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 605:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 606:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Wait till PLL is ready */
 607:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 608:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 609:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 610:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           {
 611:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****             return HAL_TIMEOUT;
 612:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           }
 613:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 614:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 615:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Configure the main PLL clock source, multiplication and division factors. */
 616:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                  
 617:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                                 RCC_OscInitStruct->PLL.PLLM                                        
 618:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))    
 619:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLL
 620:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
 621:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Enable the main PLL. */
 622:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         __HAL_RCC_PLL_ENABLE();
 623:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 624:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Get Start Tick */
 625:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 626:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 627:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Wait till PLL is ready */
 628:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 629:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 630:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 631:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           {
 632:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****             return HAL_TIMEOUT;
 633:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           }
 634:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 635:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
ARM GAS  /tmp/ccjB5W2d.s 			page 32


 636:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       else
 637:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 638:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Disable the main PLL. */
 639:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 554              		.loc 1 639 0
 555 01ca 3A4B     		ldr	r3, .L97+16
 556 01cc 0022     		movs	r2, #0
 557 01ce 1A60     		str	r2, [r3]
 640:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 641:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Get Start Tick */
 642:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 558              		.loc 1 642 0
 559 01d0 FFF7FEFF 		bl	HAL_GetTick
 560              	.LVL52:
 561 01d4 0446     		mov	r4, r0
 562              	.LVL53:
 563              	.L64:
 643:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 644:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* Wait till PLL is ready */
 645:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 564              		.loc 1 645 0
 565 01d6 334B     		ldr	r3, .L97
 566 01d8 1B68     		ldr	r3, [r3]
 567 01da 13F0007F 		tst	r3, #33554432
 568 01de 00F0A780 		beq	.L93
 646:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 647:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 569              		.loc 1 647 0
 570 01e2 FFF7FEFF 		bl	HAL_GetTick
 571              	.LVL54:
 572 01e6 001B     		subs	r0, r0, r4
 573 01e8 6428     		cmp	r0, #100
 574 01ea F4D9     		bls	.L64
 648:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           {
 649:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****             return HAL_TIMEOUT;
 575              		.loc 1 649 0
 576 01ec 0320     		movs	r0, #3
 577 01ee A6E0     		b	.L27
 578              	.LVL55:
 579              	.L91:
 580              	.LBB31:
 535:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 581              		.loc 1 535 0
 582 01f0 0023     		movs	r3, #0
 583 01f2 0193     		str	r3, [sp, #4]
 584 01f4 2B4B     		ldr	r3, .L97
 585 01f6 1A6C     		ldr	r2, [r3, #64]
 586 01f8 42F08052 		orr	r2, r2, #268435456
 587 01fc 1A64     		str	r2, [r3, #64]
 588 01fe 1B6C     		ldr	r3, [r3, #64]
 589 0200 03F08053 		and	r3, r3, #268435456
 590 0204 0193     		str	r3, [sp, #4]
 591 0206 019B     		ldr	r3, [sp, #4]
 592              	.LBE31:
 538:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 593              		.loc 1 538 0
 594 0208 2B4A     		ldr	r2, .L97+20
ARM GAS  /tmp/ccjB5W2d.s 			page 33


 595 020a 1368     		ldr	r3, [r2]
 596 020c 43F48073 		orr	r3, r3, #256
 597 0210 1360     		str	r3, [r2]
 541:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 598              		.loc 1 541 0
 599 0212 FFF7FEFF 		bl	HAL_GetTick
 600              	.LVL56:
 601 0216 0546     		mov	r5, r0
 602              	.LVL57:
 603              	.L52:
 543:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 604              		.loc 1 543 0
 605 0218 274B     		ldr	r3, .L97+20
 606 021a 1B68     		ldr	r3, [r3]
 607 021c 13F4807F 		tst	r3, #256
 608 0220 06D1     		bne	.L94
 545:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 609              		.loc 1 545 0
 610 0222 FFF7FEFF 		bl	HAL_GetTick
 611              	.LVL58:
 612 0226 401B     		subs	r0, r0, r5
 613 0228 0228     		cmp	r0, #2
 614 022a F5D9     		bls	.L52
 547:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 615              		.loc 1 547 0
 616 022c 0320     		movs	r0, #3
 617 022e 86E0     		b	.L27
 618              	.L94:
 552:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Check the LSE State */
 619              		.loc 1 552 0
 620 0230 227A     		ldrb	r2, [r4, #8]	@ zero_extendqisi2
 621 0232 224B     		ldr	r3, .L97+24
 622 0234 1A70     		strb	r2, [r3]
 554:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 623              		.loc 1 554 0
 624 0236 A368     		ldr	r3, [r4, #8]
 625 0238 83B1     		cbz	r3, .L54
 557:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 626              		.loc 1 557 0
 627 023a FFF7FEFF 		bl	HAL_GetTick
 628              	.LVL59:
 629 023e 0546     		mov	r5, r0
 630              	.LVL60:
 631              	.L55:
 560:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 632              		.loc 1 560 0
 633 0240 184B     		ldr	r3, .L97
 634 0242 1B6F     		ldr	r3, [r3, #112]
 635 0244 13F0020F 		tst	r3, #2
 636 0248 B2D1     		bne	.L51
 562:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 637              		.loc 1 562 0
 638 024a FFF7FEFF 		bl	HAL_GetTick
 639              	.LVL61:
 640 024e 401B     		subs	r0, r0, r5
 641 0250 41F28833 		movw	r3, #5000
 642 0254 9842     		cmp	r0, r3
ARM GAS  /tmp/ccjB5W2d.s 			page 34


 643 0256 F3D9     		bls	.L55
 564:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 644              		.loc 1 564 0
 645 0258 0320     		movs	r0, #3
 646 025a 70E0     		b	.L27
 647              	.L54:
 571:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 648              		.loc 1 571 0
 649 025c FFF7FEFF 		bl	HAL_GetTick
 650              	.LVL62:
 651 0260 0546     		mov	r5, r0
 652              	.LVL63:
 653              	.L57:
 574:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 654              		.loc 1 574 0
 655 0262 104B     		ldr	r3, .L97
 656 0264 1B6F     		ldr	r3, [r3, #112]
 657 0266 13F0020F 		tst	r3, #2
 658 026a A1D0     		beq	.L51
 576:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 659              		.loc 1 576 0
 660 026c FFF7FEFF 		bl	HAL_GetTick
 661              	.LVL64:
 662 0270 401B     		subs	r0, r0, r5
 663 0272 41F28833 		movw	r3, #5000
 664 0276 9842     		cmp	r0, r3
 665 0278 F3D9     		bls	.L57
 578:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 666              		.loc 1 578 0
 667 027a 0320     		movs	r0, #3
 668 027c 5FE0     		b	.L27
 669              	.LVL65:
 670              	.L92:
 601:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 671              		.loc 1 601 0
 672 027e 0D4B     		ldr	r3, .L97+16
 673 0280 0022     		movs	r2, #0
 674 0282 1A60     		str	r2, [r3]
 604:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 675              		.loc 1 604 0
 676 0284 FFF7FEFF 		bl	HAL_GetTick
 677              	.LVL66:
 678 0288 0546     		mov	r5, r0
 679              	.LVL67:
 680              	.L60:
 607:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 681              		.loc 1 607 0
 682 028a 064B     		ldr	r3, .L97
 683 028c 1B68     		ldr	r3, [r3]
 684 028e 13F0007F 		tst	r3, #33554432
 685 0292 15D0     		beq	.L95
 609:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           {
 686              		.loc 1 609 0
 687 0294 FFF7FEFF 		bl	HAL_GetTick
 688              	.LVL68:
 689 0298 401B     		subs	r0, r0, r5
 690 029a 6428     		cmp	r0, #100
ARM GAS  /tmp/ccjB5W2d.s 			page 35


 691 029c F5D9     		bls	.L60
 611:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           }
 692              		.loc 1 611 0
 693 029e 0320     		movs	r0, #3
 694 02a0 4DE0     		b	.L27
 695              	.L98:
 696 02a2 00BF     		.align	2
 697              	.L97:
 698 02a4 00380240 		.word	1073887232
 699 02a8 02380240 		.word	1073887234
 700 02ac 00004742 		.word	1111949312
 701 02b0 800E4742 		.word	1111953024
 702 02b4 60004742 		.word	1111949408
 703 02b8 00700040 		.word	1073770496
 704 02bc 70380240 		.word	1073887344
 705              	.L95:
 616:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                                 RCC_OscInitStruct->PLL.PLLM                                        
 706              		.loc 1 616 0
 707 02c0 E369     		ldr	r3, [r4, #28]
 708 02c2 226A     		ldr	r2, [r4, #32]
 709 02c4 1343     		orrs	r3, r3, r2
 710 02c6 616A     		ldr	r1, [r4, #36]
 711              	.LVL69:
 712              	.LBB32:
 713              	.LBB33:
 714              		.loc 2 531 0
 715 02c8 47F6C072 		movw	r2, #32704
 716              		.syntax unified
 717              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 718 02cc 92FAA2F2 		rbit r2, r2
 719              	@ 0 "" 2
 720              	.LVL70:
 721              		.thumb
 722              		.syntax unified
 723              	.LBE33:
 724              	.LBE32:
 616:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                                 RCC_OscInitStruct->PLL.PLLM                                        
 725              		.loc 1 616 0
 726 02d0 B2FA82F2 		clz	r2, r2
 727 02d4 01FA02F2 		lsl	r2, r1, r2
 728 02d8 1343     		orrs	r3, r3, r2
 729 02da A26A     		ldr	r2, [r4, #40]
 730 02dc 5208     		lsrs	r2, r2, #1
 731 02de 013A     		subs	r2, r2, #1
 732              	.LVL71:
 733              	.LBB34:
 734              	.LBB35:
 735              		.loc 2 531 0
 736 02e0 4FF44031 		mov	r1, #196608
 737              		.syntax unified
 738              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 739 02e4 91FAA1F1 		rbit r1, r1
 740              	@ 0 "" 2
 741              	.LVL72:
 742              		.thumb
 743              		.syntax unified
 744              	.LBE35:
ARM GAS  /tmp/ccjB5W2d.s 			page 36


 745              	.LBE34:
 616:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                                 RCC_OscInitStruct->PLL.PLLM                                        
 746              		.loc 1 616 0
 747 02e8 B1FA81F1 		clz	r1, r1
 748 02ec 8A40     		lsls	r2, r2, r1
 749 02ee 1343     		orrs	r3, r3, r2
 750 02f0 E16A     		ldr	r1, [r4, #44]
 751              	.LVL73:
 752              	.LBB36:
 753              	.LBB37:
 754              		.loc 2 531 0
 755 02f2 4FF07062 		mov	r2, #251658240
 756              		.syntax unified
 757              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 758 02f6 92FAA2F2 		rbit r2, r2
 759              	@ 0 "" 2
 760              	.LVL74:
 761              		.thumb
 762              		.syntax unified
 763              	.LBE37:
 764              	.LBE36:
 616:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                                 RCC_OscInitStruct->PLL.PLLM                                        
 765              		.loc 1 616 0
 766 02fa B2FA82F2 		clz	r2, r2
 767 02fe 01FA02F2 		lsl	r2, r1, r2
 768 0302 1343     		orrs	r3, r3, r2
 769 0304 104A     		ldr	r2, .L99
 770 0306 5360     		str	r3, [r2, #4]
 622:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 771              		.loc 1 622 0
 772 0308 104B     		ldr	r3, .L99+4
 773 030a 0122     		movs	r2, #1
 774 030c 1A60     		str	r2, [r3]
 625:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 775              		.loc 1 625 0
 776 030e FFF7FEFF 		bl	HAL_GetTick
 777              	.LVL75:
 778 0312 0446     		mov	r4, r0
 779              	.LVL76:
 780              	.L62:
 628:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         {
 781              		.loc 1 628 0
 782 0314 0C4B     		ldr	r3, .L99
 783 0316 1B68     		ldr	r3, [r3]
 784 0318 13F0007F 		tst	r3, #33554432
 785 031c 06D1     		bne	.L96
 630:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           {
 786              		.loc 1 630 0
 787 031e FFF7FEFF 		bl	HAL_GetTick
 788              	.LVL77:
 789 0322 001B     		subs	r0, r0, r4
 790 0324 6428     		cmp	r0, #100
 791 0326 F5D9     		bls	.L62
 632:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           }
 792              		.loc 1 632 0
 793 0328 0320     		movs	r0, #3
 794 032a 08E0     		b	.L27
ARM GAS  /tmp/ccjB5W2d.s 			page 37


 795              	.L96:
 650:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****           }
 651:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         }
 652:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 653:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 654:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     else
 655:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 656:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       return HAL_ERROR;
 657:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 658:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 659:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   return HAL_OK;
 796              		.loc 1 659 0
 797 032c 0020     		movs	r0, #0
 798 032e 06E0     		b	.L27
 799              	.L93:
 800 0330 0020     		movs	r0, #0
 801 0332 04E0     		b	.L27
 802              	.LVL78:
 803              	.L66:
 804              	.LCFI3:
 805              		.cfi_def_cfa_offset 0
 806              		.cfi_restore 4
 807              		.cfi_restore 5
 808              		.cfi_restore 14
 366:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 809              		.loc 1 366 0
 810 0334 0120     		movs	r0, #1
 811              	.LVL79:
 660:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
 812              		.loc 1 660 0
 813 0336 7047     		bx	lr
 814              	.LVL80:
 815              	.L88:
 816              	.LCFI4:
 817              		.cfi_def_cfa_offset 24
 818              		.cfi_offset 4, -12
 819              		.cfi_offset 5, -8
 820              		.cfi_offset 14, -4
 382:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 821              		.loc 1 382 0
 822 0338 0120     		movs	r0, #1
 823              	.LVL81:
 824 033a 00E0     		b	.L27
 825              	.L78:
 659:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
 826              		.loc 1 659 0
 827 033c 0020     		movs	r0, #0
 828              	.LVL82:
 829              	.L27:
 830              		.loc 1 660 0
 831 033e 03B0     		add	sp, sp, #12
 832              	.LCFI5:
 833              		.cfi_remember_state
 834              		.cfi_def_cfa_offset 12
 835              		@ sp needed
 836 0340 30BD     		pop	{r4, r5, pc}
 837              	.LVL83:
ARM GAS  /tmp/ccjB5W2d.s 			page 38


 838              	.L79:
 839              	.LCFI6:
 840              		.cfi_restore_state
 656:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 841              		.loc 1 656 0
 842 0342 0120     		movs	r0, #1
 843 0344 FBE7     		b	.L27
 844              	.L100:
 845 0346 00BF     		.align	2
 846              	.L99:
 847 0348 00380240 		.word	1073887232
 848 034c 60004742 		.word	1111949408
 849              		.cfi_endproc
 850              	.LFE67:
 852              		.section	.text.HAL_RCC_MCOConfig,"ax",%progbits
 853              		.align	1
 854              		.global	HAL_RCC_MCOConfig
 855              		.syntax unified
 856              		.thumb
 857              		.thumb_func
 858              		.fpu softvfp
 860              	HAL_RCC_MCOConfig:
 861              	.LFB69:
 661:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 662:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
 663:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief  Initializes the CPU, AHB and APB busses clocks according to the specified
 664:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         parameters in the RCC_ClkInitStruct.
 665:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct pointer to an RCC_OscInitTypeDef structure that
 666:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         contains the configuration information for the RCC peripheral.
 667:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @param  FLatency FLASH Latency, this parameter depend on device selected
 668:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *
 669:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 670:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         and updated by HAL_RCC_GetHCLKFreq() function called within this function
 671:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *
 672:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 673:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 674:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 675:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 676:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *
 677:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 678:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked).
 679:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 680:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         occur when the clock source will be ready.
 681:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *
 682:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 683:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 684:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         (for more details refer to section above "Initialization/de-initialization functions")
 685:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval None
 686:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
 687:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
 688:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {
 689:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   uint32_t tickstart;
 690:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 691:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Check Null pointer */
 692:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if(RCC_ClkInitStruct == NULL)
 693:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 694:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     return HAL_ERROR;
ARM GAS  /tmp/ccjB5W2d.s 			page 39


 695:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 696:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 697:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Check the parameters */
 698:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 699:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   assert_param(IS_FLASH_LATENCY(FLatency));
 700:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 701:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
 702:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****      must be correctly programmed according to the frequency of the CPU clock
 703:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****      (HCLK) and the supply voltage of the device. */
 704:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 705:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Increasing the number of wait states because of higher CPU frequency */
 706:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if(FLatency > __HAL_FLASH_GET_LATENCY())
 707:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 708:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 709:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 710:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 711:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 712:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****        memory by reading the FLASH_ACR register */
 713:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     if(__HAL_FLASH_GET_LATENCY() != FLatency)
 714:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 715:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       return HAL_ERROR;
 716:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 717:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 718:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 719:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /*-------------------------- HCLK Configuration --------------------------*/
 720:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 721:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 722:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Set the highest APBx dividers in order to ensure that we do not go through
 723:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****        a non-spec phase whatever we decrease or increase HCLK. */
 724:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 725:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 726:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 727:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 728:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 729:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 730:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 731:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 732:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 733:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 734:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Set the new HCLK clock divider */
 735:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 736:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 737:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 738:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 739:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /*------------------------- SYSCLK Configuration ---------------------------*/
 740:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 741:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 742:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 743:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 744:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* HSE is selected as System Clock Source */
 745:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 746:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 747:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Check the HSE ready flag */
 748:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 749:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 750:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         return HAL_ERROR;
 751:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
ARM GAS  /tmp/ccjB5W2d.s 			page 40


 752:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 753:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* PLL is selected as System Clock Source */
 754:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 755:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 756:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Check the PLL ready flag */
 757:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 758:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 759:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         return HAL_ERROR;
 760:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 761:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 762:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* HSI is selected as System Clock Source */
 763:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     else
 764:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 765:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* Check the HSI ready flag */
 766:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 767:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 768:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         return HAL_ERROR;
 769:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 770:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 771:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 772:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 773:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 774:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Get Start Tick */
 775:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     tickstart = HAL_GetTick();
 776:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 777:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 778:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 779:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 780:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 781:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         return HAL_TIMEOUT;
 782:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 783:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 784:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 785:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 786:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Decreasing the number of wait states because of lower CPU frequency */
 787:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if(FLatency < __HAL_FLASH_GET_LATENCY())
 788:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 789:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****      /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 790:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 791:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 792:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 793:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****        memory by reading the FLASH_ACR register */
 794:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     if(__HAL_FLASH_GET_LATENCY() != FLatency)
 795:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 796:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       return HAL_ERROR;
 797:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 798:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 799:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 800:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /*-------------------------- PCLK1 Configuration ---------------------------*/
 801:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 802:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 803:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 804:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 805:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 806:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 807:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /*-------------------------- PCLK2 Configuration ---------------------------*/
 808:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
ARM GAS  /tmp/ccjB5W2d.s 			page 41


 809:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 810:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 811:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 812:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 813:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 814:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Update the SystemCoreClock global variable */
 815:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITI
 816:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 817:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Configure the source of time base considering new system clocks settings */
 818:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   HAL_InitTick (TICK_INT_PRIORITY);
 819:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 820:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   return HAL_OK;
 821:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
 822:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 823:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
 824:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @}
 825:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
 826:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 827:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group2 Peripheral Control functions
 828:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  *  @brief   RCC clocks control functions
 829:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  *
 830:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** @verbatim
 831:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  ===============================================================================
 832:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****                       ##### Peripheral Control functions #####
 833:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****  ===============================================================================
 834:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     [..]
 835:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     This subsection provides a set of functions allowing to control the RCC Clocks
 836:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     frequencies.
 837:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 838:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** @endverbatim
 839:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @{
 840:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
 841:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 842:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
 843:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8) or on MCO2 pin(PC9).
 844:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   PA8/PC9 should be configured in alternate function mode.
 845:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @param  RCC_MCOx specifies the output direction for the clock source.
 846:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 847:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCO1: Clock source to output on MCO1 pin(PA8).
 848:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCO2: Clock source to output on MCO2 pin(PC9).
 849:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @param  RCC_MCOSource specifies the clock source to output.
 850:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 851:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_HSI: HSI clock selected as MCO1 source
 852:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_LSE: LSE clock selected as MCO1 source
 853:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_HSE: HSE clock selected as MCO1 source
 854:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCO1SOURCE_PLLCLK: main PLL clock selected as MCO1 source
 855:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 856:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_PLLI2SCLK: PLLI2S clock selected as MCO2 source
 857:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_HSE: HSE clock selected as MCO2 source
 858:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCO2SOURCE_PLLCLK: main PLL clock selected as MCO2 source
 859:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @param  RCC_MCODiv specifies the MCOx prescaler.
 860:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 861:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCODIV_1: no division applied to MCOx clock
 862:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCODIV_2: division by 2 applied to MCOx clock
 863:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCODIV_3: division by 3 applied to MCOx clock
 864:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
 865:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
ARM GAS  /tmp/ccjB5W2d.s 			page 42


 866:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval None
 867:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
 868:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
 869:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {
 862              		.loc 1 869 0
 863              		.cfi_startproc
 864              		@ args = 0, pretend = 0, frame = 32
 865              		@ frame_needed = 0, uses_anonymous_args = 0
 866              	.LVL84:
 867 0000 70B5     		push	{r4, r5, r6, lr}
 868              	.LCFI7:
 869              		.cfi_def_cfa_offset 16
 870              		.cfi_offset 4, -16
 871              		.cfi_offset 5, -12
 872              		.cfi_offset 6, -8
 873              		.cfi_offset 14, -4
 874 0002 88B0     		sub	sp, sp, #32
 875              	.LCFI8:
 876              		.cfi_def_cfa_offset 48
 877 0004 0C46     		mov	r4, r1
 878 0006 1646     		mov	r6, r2
 870:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   GPIO_InitTypeDef GPIO_InitStruct;
 871:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Check the parameters */
 872:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCOx));
 873:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   assert_param(IS_RCC_MCODIV(RCC_MCODiv));
 874:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* RCC_MCO1 */
 875:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if(RCC_MCOx == RCC_MCO1)
 879              		.loc 1 875 0
 880 0008 08B3     		cbz	r0, .L105
 881              	.LBB38:
 876:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 877:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
 878:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 879:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* MCO1 Clock Enable */
 880:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     __MCO1_CLK_ENABLE();
 881:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 882:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Configure the MCO1 pin in alternate function mode */
 883:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     GPIO_InitStruct.Pin = MCO1_PIN;
 884:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 885:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 886:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 887:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 888:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 889:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 890:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
 891:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 892:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 893:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   else
 894:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 895:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
 896:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 897:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* MCO2 Clock Enable */
 898:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     __MCO2_CLK_ENABLE();
 882              		.loc 1 898 0
 883 000a 0023     		movs	r3, #0
 884 000c 0293     		str	r3, [sp, #8]
 885 000e 204D     		ldr	r5, .L106
ARM GAS  /tmp/ccjB5W2d.s 			page 43


 886 0010 2A6B     		ldr	r2, [r5, #48]
 887              	.LVL85:
 888 0012 42F00402 		orr	r2, r2, #4
 889 0016 2A63     		str	r2, [r5, #48]
 890 0018 2A6B     		ldr	r2, [r5, #48]
 891 001a 02F00402 		and	r2, r2, #4
 892 001e 0292     		str	r2, [sp, #8]
 893 0020 029A     		ldr	r2, [sp, #8]
 894              	.LBE38:
 899:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 900:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Configure the MCO2 pin in alternate function mode */
 901:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     GPIO_InitStruct.Pin = MCO2_PIN;
 895              		.loc 1 901 0
 896 0022 4FF40072 		mov	r2, #512
 897 0026 0392     		str	r2, [sp, #12]
 902:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 898              		.loc 1 902 0
 899 0028 0222     		movs	r2, #2
 900 002a 0492     		str	r2, [sp, #16]
 903:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 901              		.loc 1 903 0
 902 002c 0322     		movs	r2, #3
 903 002e 0692     		str	r2, [sp, #24]
 904:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 904              		.loc 1 904 0
 905 0030 0593     		str	r3, [sp, #20]
 905:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 906              		.loc 1 905 0
 907 0032 0793     		str	r3, [sp, #28]
 906:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 908              		.loc 1 906 0
 909 0034 03A9     		add	r1, sp, #12
 910              	.LVL86:
 911 0036 1748     		ldr	r0, .L106+4
 912              	.LVL87:
 913 0038 FFF7FEFF 		bl	HAL_GPIO_Init
 914              	.LVL88:
 907:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 908:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
 909:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)))
 915              		.loc 1 909 0
 916 003c AB68     		ldr	r3, [r5, #8]
 917 003e 23F07843 		bic	r3, r3, #-134217728
 918 0042 44EAC604 		orr	r4, r4, r6, lsl #3
 919              	.LVL89:
 920 0046 1C43     		orrs	r4, r4, r3
 921 0048 AC60     		str	r4, [r5, #8]
 922              	.L101:
 910:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 911:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
 923              		.loc 1 911 0
 924 004a 08B0     		add	sp, sp, #32
 925              	.LCFI9:
 926              		.cfi_remember_state
 927              		.cfi_def_cfa_offset 16
 928              		@ sp needed
 929 004c 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/ccjB5W2d.s 			page 44


 930              	.LVL90:
 931              	.L105:
 932              	.LCFI10:
 933              		.cfi_restore_state
 934              	.LBB39:
 880:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 935              		.loc 1 880 0
 936 004e 0023     		movs	r3, #0
 937 0050 0193     		str	r3, [sp, #4]
 938 0052 0F4D     		ldr	r5, .L106
 939 0054 2A6B     		ldr	r2, [r5, #48]
 940              	.LVL91:
 941 0056 42F00102 		orr	r2, r2, #1
 942 005a 2A63     		str	r2, [r5, #48]
 943 005c 2A6B     		ldr	r2, [r5, #48]
 944 005e 02F00102 		and	r2, r2, #1
 945 0062 0192     		str	r2, [sp, #4]
 946 0064 019A     		ldr	r2, [sp, #4]
 947              	.LBE39:
 883:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 948              		.loc 1 883 0
 949 0066 4FF48072 		mov	r2, #256
 950 006a 0392     		str	r2, [sp, #12]
 884:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 951              		.loc 1 884 0
 952 006c 0222     		movs	r2, #2
 953 006e 0492     		str	r2, [sp, #16]
 885:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 954              		.loc 1 885 0
 955 0070 0322     		movs	r2, #3
 956 0072 0692     		str	r2, [sp, #24]
 886:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 957              		.loc 1 886 0
 958 0074 0593     		str	r3, [sp, #20]
 887:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 959              		.loc 1 887 0
 960 0076 0793     		str	r3, [sp, #28]
 888:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 961              		.loc 1 888 0
 962 0078 03A9     		add	r1, sp, #12
 963              	.LVL92:
 964 007a 0748     		ldr	r0, .L106+8
 965              	.LVL93:
 966 007c FFF7FEFF 		bl	HAL_GPIO_Init
 967              	.LVL94:
 891:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 968              		.loc 1 891 0
 969 0080 AB68     		ldr	r3, [r5, #8]
 970 0082 23F0EC63 		bic	r3, r3, #123731968
 971 0086 3443     		orrs	r4, r4, r6
 972              	.LVL95:
 973 0088 1C43     		orrs	r4, r4, r3
 974 008a AC60     		str	r4, [r5, #8]
 975 008c DDE7     		b	.L101
 976              	.L107:
 977 008e 00BF     		.align	2
 978              	.L106:
ARM GAS  /tmp/ccjB5W2d.s 			page 45


 979 0090 00380240 		.word	1073887232
 980 0094 00080240 		.word	1073874944
 981 0098 00000240 		.word	1073872896
 982              		.cfi_endproc
 983              	.LFE69:
 985              		.section	.text.HAL_RCC_EnableCSS,"ax",%progbits
 986              		.align	1
 987              		.global	HAL_RCC_EnableCSS
 988              		.syntax unified
 989              		.thumb
 990              		.thumb_func
 991              		.fpu softvfp
 993              	HAL_RCC_EnableCSS:
 994              	.LFB70:
 912:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 913:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
 914:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief  Enables the Clock Security System.
 915:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 916:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 917:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 918:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to
 919:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
 920:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval None
 921:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
 922:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** void HAL_RCC_EnableCSS(void)
 923:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {
 995              		.loc 1 923 0
 996              		.cfi_startproc
 997              		@ args = 0, pretend = 0, frame = 0
 998              		@ frame_needed = 0, uses_anonymous_args = 0
 999              		@ link register save eliminated.
 924:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 1000              		.loc 1 924 0
 1001 0000 014B     		ldr	r3, .L109
 1002 0002 0122     		movs	r2, #1
 1003 0004 1A60     		str	r2, [r3]
 925:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
 1004              		.loc 1 925 0
 1005 0006 7047     		bx	lr
 1006              	.L110:
 1007              		.align	2
 1008              	.L109:
 1009 0008 4C004742 		.word	1111949388
 1010              		.cfi_endproc
 1011              	.LFE70:
 1013              		.section	.text.HAL_RCC_DisableCSS,"ax",%progbits
 1014              		.align	1
 1015              		.global	HAL_RCC_DisableCSS
 1016              		.syntax unified
 1017              		.thumb
 1018              		.thumb_func
 1019              		.fpu softvfp
 1021              	HAL_RCC_DisableCSS:
 1022              	.LFB71:
 926:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 927:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
 928:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief  Disables the Clock Security System.
ARM GAS  /tmp/ccjB5W2d.s 			page 46


 929:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval None
 930:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
 931:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** void HAL_RCC_DisableCSS(void)
 932:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {
 1023              		.loc 1 932 0
 1024              		.cfi_startproc
 1025              		@ args = 0, pretend = 0, frame = 0
 1026              		@ frame_needed = 0, uses_anonymous_args = 0
 1027              		@ link register save eliminated.
 933:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 1028              		.loc 1 933 0
 1029 0000 014B     		ldr	r3, .L112
 1030 0002 0022     		movs	r2, #0
 1031 0004 1A60     		str	r2, [r3]
 934:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
 1032              		.loc 1 934 0
 1033 0006 7047     		bx	lr
 1034              	.L113:
 1035              		.align	2
 1036              	.L112:
 1037 0008 4C004742 		.word	1111949388
 1038              		.cfi_endproc
 1039              	.LFE71:
 1041              		.global	__aeabi_uldivmod
 1042              		.section	.text.HAL_RCC_GetSysClockFreq,"ax",%progbits
 1043              		.align	1
 1044              		.global	HAL_RCC_GetSysClockFreq
 1045              		.syntax unified
 1046              		.thumb
 1047              		.thumb_func
 1048              		.fpu softvfp
 1050              	HAL_RCC_GetSysClockFreq:
 1051              	.LFB72:
 935:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 936:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
 937:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief  Returns the SYSCLK frequency
 938:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *
 939:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   The system frequency computed by this function is not the real
 940:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined
 941:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         constant and the selected clock source:
 942:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
 943:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
 944:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**)
 945:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.
 946:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f2xx_hal_conf.h file (default value
 947:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
 948:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *               in voltage and temperature.
 949:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f2xx_hal_conf.h file (default value
 950:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
 951:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
 952:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *                have wrong result.
 953:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *
 954:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   The result of this function could be not correct when using fractional
 955:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         value for HSE crystal.
 956:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *
 957:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   This function can be used by the user application to compute the
 958:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
ARM GAS  /tmp/ccjB5W2d.s 			page 47


 959:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *
 960:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   Each time SYSCLK changes, this function must be called to update the
 961:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         right SYSCLK value. Otherwise, any configuration based on this function will be incorre
 962:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *
 963:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *
 964:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval SYSCLK frequency
 965:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
 966:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** uint32_t HAL_RCC_GetSysClockFreq(void)
 967:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {
 1052              		.loc 1 967 0
 1053              		.cfi_startproc
 1054              		@ args = 0, pretend = 0, frame = 0
 1055              		@ frame_needed = 0, uses_anonymous_args = 0
 1056              	.LVL96:
 968:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 969:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   uint32_t sysclockfreq = 0U;
 970:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 971:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 972:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   switch (RCC->CFGR & RCC_CFGR_SWS)
 1057              		.loc 1 972 0
 1058 0000 324B     		ldr	r3, .L124
 1059 0002 9B68     		ldr	r3, [r3, #8]
 1060 0004 03F00C03 		and	r3, r3, #12
 1061 0008 042B     		cmp	r3, #4
 1062 000a 5CD0     		beq	.L120
 1063 000c 082B     		cmp	r3, #8
 1064 000e 01D0     		beq	.L117
 973:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 974:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
 975:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 976:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       sysclockfreq = HSI_VALUE;
 1065              		.loc 1 976 0
 1066 0010 2F48     		ldr	r0, .L124+4
 1067 0012 7047     		bx	lr
 1068              	.L117:
 967:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 1069              		.loc 1 967 0
 1070 0014 2DE9F04B 		push	{r4, r5, r6, r7, r8, r9, fp, lr}
 1071              	.LCFI11:
 1072              		.cfi_def_cfa_offset 32
 1073              		.cfi_offset 4, -32
 1074              		.cfi_offset 5, -28
 1075              		.cfi_offset 6, -24
 1076              		.cfi_offset 7, -20
 1077              		.cfi_offset 8, -16
 1078              		.cfi_offset 9, -12
 1079              		.cfi_offset 11, -8
 1080              		.cfi_offset 14, -4
 977:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****        break;
 978:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 979:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
 980:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 981:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       sysclockfreq = HSE_VALUE;
 982:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       break;
 983:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 984:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
 985:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
ARM GAS  /tmp/ccjB5W2d.s 			page 48


 986:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
 987:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       SYSCLK = PLL_VCO / PLLP */
 988:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 1081              		.loc 1 988 0
 1082 0018 2C4B     		ldr	r3, .L124
 1083 001a 5A68     		ldr	r2, [r3, #4]
 1084 001c 02F03F02 		and	r2, r2, #63
 1085              	.LVL97:
 989:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 1086              		.loc 1 989 0
 1087 0020 5B68     		ldr	r3, [r3, #4]
 1088 0022 13F4800F 		tst	r3, #4194304
 1089 0026 2BD0     		beq	.L118
 990:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 991:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* HSE used as PLL clock source */
 992:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN
 1090              		.loc 1 992 0
 1091 0028 284B     		ldr	r3, .L124
 1092 002a 5B68     		ldr	r3, [r3, #4]
 1093 002c C3F38813 		ubfx	r3, r3, #6, #9
 1094 0030 1E46     		mov	r6, r3
 1095 0032 0027     		movs	r7, #0
 1096 0034 5C01     		lsls	r4, r3, #5
 1097 0036 0025     		movs	r5, #0
 1098 0038 E41A     		subs	r4, r4, r3
 1099 003a 65EB0705 		sbc	r5, r5, r7
 1100 003e A901     		lsls	r1, r5, #6
 1101 0040 41EA9461 		orr	r1, r1, r4, lsr #26
 1102 0044 A001     		lsls	r0, r4, #6
 1103 0046 001B     		subs	r0, r0, r4
 1104 0048 61EB0501 		sbc	r1, r1, r5
 1105 004c CB00     		lsls	r3, r1, #3
 1106 004e 43EA5073 		orr	r3, r3, r0, lsr #29
 1107 0052 C400     		lsls	r4, r0, #3
 1108 0054 A019     		adds	r0, r4, r6
 1109 0056 43EB0701 		adc	r1, r3, r7
 1110 005a 4B02     		lsls	r3, r1, #9
 1111 005c 43EAD053 		orr	r3, r3, r0, lsr #23
 1112 0060 4402     		lsls	r4, r0, #9
 1113 0062 2046     		mov	r0, r4
 1114 0064 1946     		mov	r1, r3
 1115 0066 0023     		movs	r3, #0
 1116 0068 FFF7FEFF 		bl	__aeabi_uldivmod
 1117              	.LVL98:
 1118              	.L119:
 993:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 994:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       else
 995:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 996:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         /* HSI used as PLL clock source */
 997:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****         pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN
 998:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 999:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 1119              		.loc 1 999 0
 1120 006c 174B     		ldr	r3, .L124
 1121 006e 5B68     		ldr	r3, [r3, #4]
 1122 0070 C3F30143 		ubfx	r3, r3, #16, #2
 1123 0074 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccjB5W2d.s 			page 49


 1124 0076 5B00     		lsls	r3, r3, #1
 1125              	.LVL99:
1000:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1001:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       sysclockfreq = pllvco/pllp;
 1126              		.loc 1 1001 0
 1127 0078 B0FBF3F0 		udiv	r0, r0, r3
 1128              	.LVL100:
1002:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       break;
1003:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
1004:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     default:
1005:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
1006:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       sysclockfreq = HSI_VALUE;
1007:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       break;
1008:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
1009:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1010:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   return sysclockfreq;
1011:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
 1129              		.loc 1 1011 0
 1130 007c BDE8F08B 		pop	{r4, r5, r6, r7, r8, r9, fp, pc}
 1131              	.LVL101:
 1132              	.L118:
 997:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 1133              		.loc 1 997 0
 1134 0080 124B     		ldr	r3, .L124
 1135 0082 5B68     		ldr	r3, [r3, #4]
 1136 0084 C3F38813 		ubfx	r3, r3, #6, #9
 1137 0088 1E46     		mov	r6, r3
 1138 008a 0027     		movs	r7, #0
 1139 008c 5C01     		lsls	r4, r3, #5
 1140 008e 0025     		movs	r5, #0
 1141 0090 E41A     		subs	r4, r4, r3
 1142 0092 65EB0705 		sbc	r5, r5, r7
 1143 0096 A901     		lsls	r1, r5, #6
 1144 0098 41EA9461 		orr	r1, r1, r4, lsr #26
 1145 009c A001     		lsls	r0, r4, #6
 1146 009e 001B     		subs	r0, r0, r4
 1147 00a0 61EB0501 		sbc	r1, r1, r5
 1148 00a4 CB00     		lsls	r3, r1, #3
 1149 00a6 43EA5073 		orr	r3, r3, r0, lsr #29
 1150 00aa C400     		lsls	r4, r0, #3
 1151 00ac A019     		adds	r0, r4, r6
 1152 00ae 43EB0701 		adc	r1, r3, r7
 1153 00b2 8B02     		lsls	r3, r1, #10
 1154 00b4 43EA9053 		orr	r3, r3, r0, lsr #22
 1155 00b8 8402     		lsls	r4, r0, #10
 1156 00ba 2046     		mov	r0, r4
 1157 00bc 1946     		mov	r1, r3
 1158 00be 0023     		movs	r3, #0
 1159 00c0 FFF7FEFF 		bl	__aeabi_uldivmod
 1160              	.LVL102:
 1161 00c4 D2E7     		b	.L119
 1162              	.LVL103:
 1163              	.L120:
 1164              	.LCFI12:
 1165              		.cfi_def_cfa_offset 0
 1166              		.cfi_restore 4
 1167              		.cfi_restore 5
ARM GAS  /tmp/ccjB5W2d.s 			page 50


 1168              		.cfi_restore 6
 1169              		.cfi_restore 7
 1170              		.cfi_restore 8
 1171              		.cfi_restore 9
 1172              		.cfi_restore 11
 1173              		.cfi_restore 14
 981:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       break;
 1174              		.loc 1 981 0
 1175 00c6 0348     		ldr	r0, .L124+8
 1176              	.LVL104:
 1177              		.loc 1 1011 0
 1178 00c8 7047     		bx	lr
 1179              	.L125:
 1180 00ca 00BF     		.align	2
 1181              	.L124:
 1182 00cc 00380240 		.word	1073887232
 1183 00d0 0024F400 		.word	16000000
 1184 00d4 00127A00 		.word	8000000
 1185              		.cfi_endproc
 1186              	.LFE72:
 1188              		.section	.text.HAL_RCC_ClockConfig,"ax",%progbits
 1189              		.align	1
 1190              		.global	HAL_RCC_ClockConfig
 1191              		.syntax unified
 1192              		.thumb
 1193              		.thumb_func
 1194              		.fpu softvfp
 1196              	HAL_RCC_ClockConfig:
 1197              	.LFB68:
 688:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   uint32_t tickstart;
 1198              		.loc 1 688 0
 1199              		.cfi_startproc
 1200              		@ args = 0, pretend = 0, frame = 0
 1201              		@ frame_needed = 0, uses_anonymous_args = 0
 1202              	.LVL105:
 692:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 1203              		.loc 1 692 0
 1204 0000 0028     		cmp	r0, #0
 1205 0002 00F0A280 		beq	.L141
 688:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   uint32_t tickstart;
 1206              		.loc 1 688 0
 1207 0006 70B5     		push	{r4, r5, r6, lr}
 1208              	.LCFI13:
 1209              		.cfi_def_cfa_offset 16
 1210              		.cfi_offset 4, -16
 1211              		.cfi_offset 5, -12
 1212              		.cfi_offset 6, -8
 1213              		.cfi_offset 14, -4
 1214 0008 0446     		mov	r4, r0
 706:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 1215              		.loc 1 706 0
 1216 000a 524B     		ldr	r3, .L154
 1217 000c 1B68     		ldr	r3, [r3]
 1218 000e 03F00F03 		and	r3, r3, #15
 1219 0012 8B42     		cmp	r3, r1
 1220 0014 09D2     		bcs	.L128
 709:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
ARM GAS  /tmp/ccjB5W2d.s 			page 51


 1221              		.loc 1 709 0
 1222 0016 CBB2     		uxtb	r3, r1
 1223 0018 4E4A     		ldr	r2, .L154
 1224 001a 1370     		strb	r3, [r2]
 713:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 1225              		.loc 1 713 0
 1226 001c 1368     		ldr	r3, [r2]
 1227 001e 03F00F03 		and	r3, r3, #15
 1228 0022 8B42     		cmp	r3, r1
 1229 0024 01D0     		beq	.L128
 715:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 1230              		.loc 1 715 0
 1231 0026 0120     		movs	r0, #1
 1232              	.LVL106:
 1233              	.L127:
 821:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 1234              		.loc 1 821 0
 1235 0028 70BD     		pop	{r4, r5, r6, pc}
 1236              	.LVL107:
 1237              	.L128:
 720:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 1238              		.loc 1 720 0
 1239 002a 2368     		ldr	r3, [r4]
 1240 002c 13F0020F 		tst	r3, #2
 1241 0030 17D0     		beq	.L129
 724:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 1242              		.loc 1 724 0
 1243 0032 13F0040F 		tst	r3, #4
 1244 0036 04D0     		beq	.L130
 726:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 1245              		.loc 1 726 0
 1246 0038 474A     		ldr	r2, .L154+4
 1247 003a 9368     		ldr	r3, [r2, #8]
 1248 003c 43F4E053 		orr	r3, r3, #7168
 1249 0040 9360     		str	r3, [r2, #8]
 1250              	.L130:
 729:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 1251              		.loc 1 729 0
 1252 0042 2368     		ldr	r3, [r4]
 1253 0044 13F0080F 		tst	r3, #8
 1254 0048 04D0     		beq	.L131
 731:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 1255              		.loc 1 731 0
 1256 004a 434A     		ldr	r2, .L154+4
 1257 004c 9368     		ldr	r3, [r2, #8]
 1258 004e 43F46043 		orr	r3, r3, #57344
 1259 0052 9360     		str	r3, [r2, #8]
 1260              	.L131:
 736:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 1261              		.loc 1 736 0
 1262 0054 404A     		ldr	r2, .L154+4
 1263 0056 9368     		ldr	r3, [r2, #8]
 1264 0058 23F0F003 		bic	r3, r3, #240
 1265 005c A068     		ldr	r0, [r4, #8]
 1266              	.LVL108:
 1267 005e 0343     		orrs	r3, r3, r0
 1268 0060 9360     		str	r3, [r2, #8]
ARM GAS  /tmp/ccjB5W2d.s 			page 52


 1269              	.L129:
 1270 0062 0D46     		mov	r5, r1
 740:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 1271              		.loc 1 740 0
 1272 0064 2368     		ldr	r3, [r4]
 1273 0066 13F0010F 		tst	r3, #1
 1274 006a 31D0     		beq	.L132
 745:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 1275              		.loc 1 745 0
 1276 006c 6368     		ldr	r3, [r4, #4]
 1277 006e 012B     		cmp	r3, #1
 1278 0070 20D0     		beq	.L152
 754:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 1279              		.loc 1 754 0
 1280 0072 022B     		cmp	r3, #2
 1281 0074 25D0     		beq	.L153
 766:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 1282              		.loc 1 766 0
 1283 0076 384A     		ldr	r2, .L154+4
 1284 0078 1268     		ldr	r2, [r2]
 1285 007a 12F0020F 		tst	r2, #2
 1286 007e 66D0     		beq	.L145
 1287              	.L134:
 772:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 1288              		.loc 1 772 0
 1289 0080 3549     		ldr	r1, .L154+4
 1290              	.LVL109:
 1291 0082 8A68     		ldr	r2, [r1, #8]
 1292 0084 22F00302 		bic	r2, r2, #3
 1293 0088 1343     		orrs	r3, r3, r2
 1294 008a 8B60     		str	r3, [r1, #8]
 775:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 1295              		.loc 1 775 0
 1296 008c FFF7FEFF 		bl	HAL_GetTick
 1297              	.LVL110:
 1298 0090 0646     		mov	r6, r0
 1299              	.LVL111:
 1300              	.L136:
 777:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 1301              		.loc 1 777 0
 1302 0092 314B     		ldr	r3, .L154+4
 1303 0094 9B68     		ldr	r3, [r3, #8]
 1304 0096 03F00C03 		and	r3, r3, #12
 1305 009a 6268     		ldr	r2, [r4, #4]
 1306 009c B3EB820F 		cmp	r3, r2, lsl #2
 1307 00a0 16D0     		beq	.L132
 779:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 1308              		.loc 1 779 0
 1309 00a2 FFF7FEFF 		bl	HAL_GetTick
 1310              	.LVL112:
 1311 00a6 801B     		subs	r0, r0, r6
 1312 00a8 41F28833 		movw	r3, #5000
 1313 00ac 9842     		cmp	r0, r3
 1314 00ae F0D9     		bls	.L136
 781:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 1315              		.loc 1 781 0
 1316 00b0 0320     		movs	r0, #3
ARM GAS  /tmp/ccjB5W2d.s 			page 53


 1317 00b2 B9E7     		b	.L127
 1318              	.LVL113:
 1319              	.L152:
 748:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 1320              		.loc 1 748 0
 1321 00b4 284A     		ldr	r2, .L154+4
 1322 00b6 1268     		ldr	r2, [r2]
 1323 00b8 12F4003F 		tst	r2, #131072
 1324 00bc E0D1     		bne	.L134
 750:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 1325              		.loc 1 750 0
 1326 00be 0120     		movs	r0, #1
 1327 00c0 B2E7     		b	.L127
 1328              	.L153:
 757:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       {
 1329              		.loc 1 757 0
 1330 00c2 254A     		ldr	r2, .L154+4
 1331 00c4 1268     		ldr	r2, [r2]
 1332 00c6 12F0007F 		tst	r2, #33554432
 1333 00ca D9D1     		bne	.L134
 759:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 1334              		.loc 1 759 0
 1335 00cc 0120     		movs	r0, #1
 1336 00ce ABE7     		b	.L127
 1337              	.LVL114:
 1338              	.L132:
 787:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 1339              		.loc 1 787 0
 1340 00d0 204B     		ldr	r3, .L154
 1341 00d2 1B68     		ldr	r3, [r3]
 1342 00d4 03F00F03 		and	r3, r3, #15
 1343 00d8 AB42     		cmp	r3, r5
 1344 00da 09D9     		bls	.L138
 790:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 1345              		.loc 1 790 0
 1346 00dc EAB2     		uxtb	r2, r5
 1347 00de 1D4B     		ldr	r3, .L154
 1348 00e0 1A70     		strb	r2, [r3]
 794:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     {
 1349              		.loc 1 794 0
 1350 00e2 1B68     		ldr	r3, [r3]
 1351 00e4 03F00F03 		and	r3, r3, #15
 1352 00e8 AB42     		cmp	r3, r5
 1353 00ea 01D0     		beq	.L138
 796:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     }
 1354              		.loc 1 796 0
 1355 00ec 0120     		movs	r0, #1
 1356 00ee 9BE7     		b	.L127
 1357              	.L138:
 801:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 1358              		.loc 1 801 0
 1359 00f0 2368     		ldr	r3, [r4]
 1360 00f2 13F0040F 		tst	r3, #4
 1361 00f6 06D0     		beq	.L139
 804:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 1362              		.loc 1 804 0
 1363 00f8 174A     		ldr	r2, .L154+4
ARM GAS  /tmp/ccjB5W2d.s 			page 54


 1364 00fa 9368     		ldr	r3, [r2, #8]
 1365 00fc 23F4E053 		bic	r3, r3, #7168
 1366 0100 E168     		ldr	r1, [r4, #12]
 1367 0102 0B43     		orrs	r3, r3, r1
 1368 0104 9360     		str	r3, [r2, #8]
 1369              	.L139:
 808:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 1370              		.loc 1 808 0
 1371 0106 2368     		ldr	r3, [r4]
 1372 0108 13F0080F 		tst	r3, #8
 1373 010c 07D0     		beq	.L140
 811:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 1374              		.loc 1 811 0
 1375 010e 124A     		ldr	r2, .L154+4
 1376 0110 9368     		ldr	r3, [r2, #8]
 1377 0112 23F46043 		bic	r3, r3, #57344
 1378 0116 2169     		ldr	r1, [r4, #16]
 1379 0118 43EAC103 		orr	r3, r3, r1, lsl #3
 1380 011c 9360     		str	r3, [r2, #8]
 1381              	.L140:
 815:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 1382              		.loc 1 815 0
 1383 011e FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 1384              	.LVL115:
 1385 0122 0D4B     		ldr	r3, .L154+4
 1386 0124 9B68     		ldr	r3, [r3, #8]
 1387 0126 03F0F003 		and	r3, r3, #240
 1388              	.LVL116:
 1389              	.LBB40:
 1390              	.LBB41:
 1391              		.loc 2 531 0
 1392 012a F022     		movs	r2, #240
 1393              		.syntax unified
 1394              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1395 012c 92FAA2F2 		rbit r2, r2
 1396              	@ 0 "" 2
 1397              	.LVL117:
 1398              		.thumb
 1399              		.syntax unified
 1400              	.LBE41:
 1401              	.LBE40:
 815:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 1402              		.loc 1 815 0
 1403 0130 B2FA82F2 		clz	r2, r2
 1404 0134 D340     		lsrs	r3, r3, r2
 1405 0136 094A     		ldr	r2, .L154+8
 1406 0138 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1407 013a D840     		lsrs	r0, r0, r3
 1408 013c 084B     		ldr	r3, .L154+12
 1409 013e 1860     		str	r0, [r3]
 818:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 1410              		.loc 1 818 0
 1411 0140 0020     		movs	r0, #0
 1412 0142 FFF7FEFF 		bl	HAL_InitTick
 1413              	.LVL118:
 820:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
 1414              		.loc 1 820 0
ARM GAS  /tmp/ccjB5W2d.s 			page 55


 1415 0146 0020     		movs	r0, #0
 1416 0148 6EE7     		b	.L127
 1417              	.LVL119:
 1418              	.L141:
 1419              	.LCFI14:
 1420              		.cfi_def_cfa_offset 0
 1421              		.cfi_restore 4
 1422              		.cfi_restore 5
 1423              		.cfi_restore 6
 1424              		.cfi_restore 14
 694:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 1425              		.loc 1 694 0
 1426 014a 0120     		movs	r0, #1
 1427              	.LVL120:
 821:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 1428              		.loc 1 821 0
 1429 014c 7047     		bx	lr
 1430              	.LVL121:
 1431              	.L145:
 1432              	.LCFI15:
 1433              		.cfi_def_cfa_offset 16
 1434              		.cfi_offset 4, -16
 1435              		.cfi_offset 5, -12
 1436              		.cfi_offset 6, -8
 1437              		.cfi_offset 14, -4
 768:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****       }
 1438              		.loc 1 768 0
 1439 014e 0120     		movs	r0, #1
 1440 0150 6AE7     		b	.L127
 1441              	.L155:
 1442 0152 00BF     		.align	2
 1443              	.L154:
 1444 0154 003C0240 		.word	1073888256
 1445 0158 00380240 		.word	1073887232
 1446 015c 00000000 		.word	AHBPrescTable
 1447 0160 00000000 		.word	SystemCoreClock
 1448              		.cfi_endproc
 1449              	.LFE68:
 1451              		.section	.text.HAL_RCC_GetHCLKFreq,"ax",%progbits
 1452              		.align	1
 1453              		.global	HAL_RCC_GetHCLKFreq
 1454              		.syntax unified
 1455              		.thumb
 1456              		.thumb_func
 1457              		.fpu softvfp
 1459              	HAL_RCC_GetHCLKFreq:
 1460              	.LFB73:
1012:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1013:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
1014:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief  Returns the HCLK frequency
1015:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   Each time HCLK changes, this function must be called to update the
1016:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         right HCLK value. Otherwise, any configuration based on this function will be incorrect
1017:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *
1018:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
1019:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         and updated within this function
1020:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval HCLK frequency
1021:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
ARM GAS  /tmp/ccjB5W2d.s 			page 56


1022:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** uint32_t HAL_RCC_GetHCLKFreq(void)
1023:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {
 1461              		.loc 1 1023 0
 1462              		.cfi_startproc
 1463              		@ args = 0, pretend = 0, frame = 0
 1464              		@ frame_needed = 0, uses_anonymous_args = 0
 1465              		@ link register save eliminated.
1024:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   return SystemCoreClock;
1025:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
 1466              		.loc 1 1025 0
 1467 0000 014B     		ldr	r3, .L157
 1468 0002 1868     		ldr	r0, [r3]
 1469 0004 7047     		bx	lr
 1470              	.L158:
 1471 0006 00BF     		.align	2
 1472              	.L157:
 1473 0008 00000000 		.word	SystemCoreClock
 1474              		.cfi_endproc
 1475              	.LFE73:
 1477              		.section	.text.HAL_RCC_GetPCLK1Freq,"ax",%progbits
 1478              		.align	1
 1479              		.global	HAL_RCC_GetPCLK1Freq
 1480              		.syntax unified
 1481              		.thumb
 1482              		.thumb_func
 1483              		.fpu softvfp
 1485              	HAL_RCC_GetPCLK1Freq:
 1486              	.LFB74:
1026:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1027:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
1028:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief  Returns the PCLK1 frequency
1029:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   Each time PCLK1 changes, this function must be called to update the
1030:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrec
1031:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval PCLK1 frequency
1032:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
1033:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK1Freq(void)
1034:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {
 1487              		.loc 1 1034 0
 1488              		.cfi_startproc
 1489              		@ args = 0, pretend = 0, frame = 0
 1490              		@ frame_needed = 0, uses_anonymous_args = 0
 1491 0000 08B5     		push	{r3, lr}
 1492              	.LCFI16:
 1493              		.cfi_def_cfa_offset 8
 1494              		.cfi_offset 3, -8
 1495              		.cfi_offset 14, -4
1035:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
1036:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CF
 1496              		.loc 1 1036 0
 1497 0002 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1498              	.LVL122:
 1499 0006 074B     		ldr	r3, .L161
 1500 0008 9B68     		ldr	r3, [r3, #8]
 1501 000a 03F4E053 		and	r3, r3, #7168
 1502              	.LVL123:
 1503              	.LBB42:
 1504              	.LBB43:
ARM GAS  /tmp/ccjB5W2d.s 			page 57


 1505              		.loc 2 531 0
 1506 000e 4FF4E052 		mov	r2, #7168
 1507              		.syntax unified
 1508              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1509 0012 92FAA2F2 		rbit r2, r2
 1510              	@ 0 "" 2
 1511              	.LVL124:
 1512              		.thumb
 1513              		.syntax unified
 1514              	.LBE43:
 1515              	.LBE42:
 1516              		.loc 1 1036 0
 1517 0016 B2FA82F2 		clz	r2, r2
 1518 001a D340     		lsrs	r3, r3, r2
 1519 001c 024A     		ldr	r2, .L161+4
 1520 001e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
1037:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
 1521              		.loc 1 1037 0
 1522 0020 D840     		lsrs	r0, r0, r3
 1523 0022 08BD     		pop	{r3, pc}
 1524              	.L162:
 1525              		.align	2
 1526              	.L161:
 1527 0024 00380240 		.word	1073887232
 1528 0028 00000000 		.word	APBPrescTable
 1529              		.cfi_endproc
 1530              	.LFE74:
 1532              		.section	.text.HAL_RCC_GetPCLK2Freq,"ax",%progbits
 1533              		.align	1
 1534              		.global	HAL_RCC_GetPCLK2Freq
 1535              		.syntax unified
 1536              		.thumb
 1537              		.thumb_func
 1538              		.fpu softvfp
 1540              	HAL_RCC_GetPCLK2Freq:
 1541              	.LFB75:
1038:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1039:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
1040:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief  Returns the PCLK2 frequency
1041:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note   Each time PCLK2 changes, this function must be called to update the
1042:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrec
1043:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval PCLK2 frequency
1044:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
1045:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK2Freq(void)
1046:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {
 1542              		.loc 1 1046 0
 1543              		.cfi_startproc
 1544              		@ args = 0, pretend = 0, frame = 0
 1545              		@ frame_needed = 0, uses_anonymous_args = 0
 1546 0000 08B5     		push	{r3, lr}
 1547              	.LCFI17:
 1548              		.cfi_def_cfa_offset 8
 1549              		.cfi_offset 3, -8
 1550              		.cfi_offset 14, -4
1047:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
1048:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFG
 1551              		.loc 1 1048 0
ARM GAS  /tmp/ccjB5W2d.s 			page 58


 1552 0002 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1553              	.LVL125:
 1554 0006 074B     		ldr	r3, .L165
 1555 0008 9B68     		ldr	r3, [r3, #8]
 1556 000a 03F46043 		and	r3, r3, #57344
 1557              	.LVL126:
 1558              	.LBB44:
 1559              	.LBB45:
 1560              		.loc 2 531 0
 1561 000e 4FF46042 		mov	r2, #57344
 1562              		.syntax unified
 1563              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1564 0012 92FAA2F2 		rbit r2, r2
 1565              	@ 0 "" 2
 1566              	.LVL127:
 1567              		.thumb
 1568              		.syntax unified
 1569              	.LBE45:
 1570              	.LBE44:
 1571              		.loc 1 1048 0
 1572 0016 B2FA82F2 		clz	r2, r2
 1573 001a D340     		lsrs	r3, r3, r2
 1574 001c 024A     		ldr	r2, .L165+4
 1575 001e D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
1049:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
 1576              		.loc 1 1049 0
 1577 0020 D840     		lsrs	r0, r0, r3
 1578 0022 08BD     		pop	{r3, pc}
 1579              	.L166:
 1580              		.align	2
 1581              	.L165:
 1582 0024 00380240 		.word	1073887232
 1583 0028 00000000 		.word	APBPrescTable
 1584              		.cfi_endproc
 1585              	.LFE75:
 1587              		.section	.text.HAL_RCC_GetOscConfig,"ax",%progbits
 1588              		.align	1
 1589              		.global	HAL_RCC_GetOscConfig
 1590              		.syntax unified
 1591              		.thumb
 1592              		.thumb_func
 1593              		.fpu softvfp
 1595              	HAL_RCC_GetOscConfig:
 1596              	.LFB76:
1050:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1051:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
1052:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief  Configures the RCC_OscInitStruct according to the internal
1053:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * RCC configuration registers.
1054:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
1055:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * will be configured.
1056:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval None
1057:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
1058:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
1059:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {
 1597              		.loc 1 1059 0
 1598              		.cfi_startproc
 1599              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccjB5W2d.s 			page 59


 1600              		@ frame_needed = 0, uses_anonymous_args = 0
 1601              		@ link register save eliminated.
 1602              	.LVL128:
1060:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Set all possible values for the Oscillator type parameter ---------------*/
1061:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLA
 1603              		.loc 1 1061 0
 1604 0000 0F23     		movs	r3, #15
 1605 0002 0360     		str	r3, [r0]
1062:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1063:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get the HSE configuration -----------------------------------------------*/
1064:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 1606              		.loc 1 1064 0
 1607 0004 3C4B     		ldr	r3, .L181
 1608 0006 1B68     		ldr	r3, [r3]
 1609 0008 13F4802F 		tst	r3, #262144
 1610 000c 55D0     		beq	.L168
1065:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
1066:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 1611              		.loc 1 1066 0
 1612 000e 0523     		movs	r3, #5
 1613 0010 4360     		str	r3, [r0, #4]
 1614              	.L169:
1067:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1068:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
1069:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
1070:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_ON;
1071:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1072:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   else
1073:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
1074:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
1075:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1076:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1077:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get the HSI configuration -----------------------------------------------*/
1078:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 1615              		.loc 1 1078 0
 1616 0012 394B     		ldr	r3, .L181
 1617 0014 1B68     		ldr	r3, [r3]
 1618 0016 13F0010F 		tst	r3, #1
 1619 001a 59D0     		beq	.L171
1079:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
1080:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 1620              		.loc 1 1080 0
 1621 001c 0123     		movs	r3, #1
 1622 001e C360     		str	r3, [r0, #12]
 1623              	.L172:
1081:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1082:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   else
1083:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
1084:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
1085:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1086:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1087:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> POSITION_VAL(RCC
 1624              		.loc 1 1087 0
 1625 0020 3549     		ldr	r1, .L181
 1626 0022 0B68     		ldr	r3, [r1]
 1627 0024 03F0F803 		and	r3, r3, #248
 1628              	.LVL129:
ARM GAS  /tmp/ccjB5W2d.s 			page 60


 1629              	.LBB46:
 1630              	.LBB47:
 1631              		.loc 2 531 0
 1632 0028 F822     		movs	r2, #248
 1633              		.syntax unified
 1634              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1635 002a 92FAA2F2 		rbit r2, r2
 1636              	@ 0 "" 2
 1637              	.LVL130:
 1638              		.thumb
 1639              		.syntax unified
 1640              	.LBE47:
 1641              	.LBE46:
 1642              		.loc 1 1087 0
 1643 002e B2FA82F2 		clz	r2, r2
 1644 0032 D340     		lsrs	r3, r3, r2
 1645 0034 0361     		str	r3, [r0, #16]
1088:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1089:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get the LSE configuration -----------------------------------------------*/
1090:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 1646              		.loc 1 1090 0
 1647 0036 0B6F     		ldr	r3, [r1, #112]
 1648 0038 13F0040F 		tst	r3, #4
 1649 003c 4BD0     		beq	.L173
1091:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
1092:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 1650              		.loc 1 1092 0
 1651 003e 0523     		movs	r3, #5
 1652 0040 8360     		str	r3, [r0, #8]
 1653              	.L174:
1093:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1094:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
1095:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
1096:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_ON;
1097:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1098:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   else
1099:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
1100:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
1101:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1102:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1103:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get the LSI configuration -----------------------------------------------*/
1104:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 1654              		.loc 1 1104 0
 1655 0042 2D4B     		ldr	r3, .L181
 1656 0044 5B6F     		ldr	r3, [r3, #116]
 1657 0046 13F0010F 		tst	r3, #1
 1658 004a 4FD0     		beq	.L176
1105:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
1106:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 1659              		.loc 1 1106 0
 1660 004c 0123     		movs	r3, #1
 1661 004e 4361     		str	r3, [r0, #20]
 1662              	.L177:
1107:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1108:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   else
1109:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
1110:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
ARM GAS  /tmp/ccjB5W2d.s 			page 61


1111:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1112:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1113:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get the PLL configuration -----------------------------------------------*/
1114:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 1663              		.loc 1 1114 0
 1664 0050 294B     		ldr	r3, .L181
 1665 0052 1B68     		ldr	r3, [r3]
 1666 0054 13F0807F 		tst	r3, #16777216
 1667 0058 4BD1     		bne	.L180
1115:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
1116:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
1117:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1118:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   else
1119:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
1120:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 1668              		.loc 1 1120 0
 1669 005a 0123     		movs	r3, #1
 1670 005c 8361     		str	r3, [r0, #24]
 1671              	.L179:
1121:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1122:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 1672              		.loc 1 1122 0
 1673 005e 264A     		ldr	r2, .L181
 1674 0060 5368     		ldr	r3, [r2, #4]
 1675 0062 03F48003 		and	r3, r3, #4194304
 1676 0066 C361     		str	r3, [r0, #28]
1123:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 1677              		.loc 1 1123 0
 1678 0068 5368     		ldr	r3, [r2, #4]
 1679 006a 03F03F03 		and	r3, r3, #63
 1680 006e 0362     		str	r3, [r0, #32]
1124:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PL
 1681              		.loc 1 1124 0
 1682 0070 5168     		ldr	r1, [r2, #4]
 1683 0072 47F6C073 		movw	r3, #32704
 1684 0076 1940     		ands	r1, r1, r3
 1685              	.LVL131:
 1686              	.LBB48:
 1687              	.LBB49:
 1688              		.loc 2 531 0
 1689              		.syntax unified
 1690              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1691 0078 93FAA3F3 		rbit r3, r3
 1692              	@ 0 "" 2
 1693              	.LVL132:
 1694              		.thumb
 1695              		.syntax unified
 1696              	.LBE49:
 1697              	.LBE48:
 1698              		.loc 1 1124 0
 1699 007c B3FA83F3 		clz	r3, r3
 1700 0080 21FA03F3 		lsr	r3, r1, r3
 1701 0084 4362     		str	r3, [r0, #36]
1125:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0
 1702              		.loc 1 1125 0
 1703 0086 5368     		ldr	r3, [r2, #4]
 1704 0088 03F44033 		and	r3, r3, #196608
ARM GAS  /tmp/ccjB5W2d.s 			page 62


 1705 008c 03F58033 		add	r3, r3, #65536
 1706 0090 5B00     		lsls	r3, r3, #1
 1707              	.LVL133:
 1708              	.LBB50:
 1709              	.LBB51:
 1710              		.loc 2 531 0
 1711 0092 4FF44031 		mov	r1, #196608
 1712              		.syntax unified
 1713              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1714 0096 91FAA1F1 		rbit r1, r1
 1715              	@ 0 "" 2
 1716              	.LVL134:
 1717              		.thumb
 1718              		.syntax unified
 1719              	.LBE51:
 1720              	.LBE50:
 1721              		.loc 1 1125 0
 1722 009a B1FA81F1 		clz	r1, r1
 1723 009e CB40     		lsrs	r3, r3, r1
 1724 00a0 8362     		str	r3, [r0, #40]
1126:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> POSITION_VAL(RCC_PL
 1725              		.loc 1 1126 0
 1726 00a2 5368     		ldr	r3, [r2, #4]
 1727 00a4 03F07063 		and	r3, r3, #251658240
 1728              	.LVL135:
 1729              	.LBB52:
 1730              	.LBB53:
 1731              		.loc 2 531 0
 1732 00a8 4FF07062 		mov	r2, #251658240
 1733              		.syntax unified
 1734              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1735 00ac 92FAA2F2 		rbit r2, r2
 1736              	@ 0 "" 2
 1737              	.LVL136:
 1738              		.thumb
 1739              		.syntax unified
 1740              	.LBE53:
 1741              	.LBE52:
 1742              		.loc 1 1126 0
 1743 00b0 B2FA82F2 		clz	r2, r2
 1744 00b4 D340     		lsrs	r3, r3, r2
 1745 00b6 C362     		str	r3, [r0, #44]
1127:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
 1746              		.loc 1 1127 0
 1747 00b8 7047     		bx	lr
 1748              	.L168:
1068:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 1749              		.loc 1 1068 0
 1750 00ba 0F4B     		ldr	r3, .L181
 1751 00bc 1B68     		ldr	r3, [r3]
 1752 00be 13F4803F 		tst	r3, #65536
 1753 00c2 02D0     		beq	.L170
1070:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 1754              		.loc 1 1070 0
 1755 00c4 0123     		movs	r3, #1
 1756 00c6 4360     		str	r3, [r0, #4]
 1757 00c8 A3E7     		b	.L169
ARM GAS  /tmp/ccjB5W2d.s 			page 63


 1758              	.L170:
1074:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 1759              		.loc 1 1074 0
 1760 00ca 0023     		movs	r3, #0
 1761 00cc 4360     		str	r3, [r0, #4]
 1762 00ce A0E7     		b	.L169
 1763              	.L171:
1084:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 1764              		.loc 1 1084 0
 1765 00d0 0023     		movs	r3, #0
 1766 00d2 C360     		str	r3, [r0, #12]
 1767 00d4 A4E7     		b	.L172
 1768              	.L173:
1094:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 1769              		.loc 1 1094 0
 1770 00d6 084B     		ldr	r3, .L181
 1771 00d8 1B6F     		ldr	r3, [r3, #112]
 1772 00da 13F0010F 		tst	r3, #1
 1773 00de 02D0     		beq	.L175
1096:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 1774              		.loc 1 1096 0
 1775 00e0 0123     		movs	r3, #1
 1776 00e2 8360     		str	r3, [r0, #8]
 1777 00e4 ADE7     		b	.L174
 1778              	.L175:
1100:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 1779              		.loc 1 1100 0
 1780 00e6 0023     		movs	r3, #0
 1781 00e8 8360     		str	r3, [r0, #8]
 1782 00ea AAE7     		b	.L174
 1783              	.L176:
1110:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 1784              		.loc 1 1110 0
 1785 00ec 0023     		movs	r3, #0
 1786 00ee 4361     		str	r3, [r0, #20]
 1787 00f0 AEE7     		b	.L177
 1788              	.L180:
1116:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 1789              		.loc 1 1116 0
 1790 00f2 0223     		movs	r3, #2
 1791 00f4 8361     		str	r3, [r0, #24]
 1792 00f6 B2E7     		b	.L179
 1793              	.L182:
 1794              		.align	2
 1795              	.L181:
 1796 00f8 00380240 		.word	1073887232
 1797              		.cfi_endproc
 1798              	.LFE76:
 1800              		.section	.text.HAL_RCC_GetClockConfig,"ax",%progbits
 1801              		.align	1
 1802              		.global	HAL_RCC_GetClockConfig
 1803              		.syntax unified
 1804              		.thumb
 1805              		.thumb_func
 1806              		.fpu softvfp
 1808              	HAL_RCC_GetClockConfig:
 1809              	.LFB77:
ARM GAS  /tmp/ccjB5W2d.s 			page 64


1128:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1129:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
1130:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief  Configures the RCC_ClkInitStruct according to the internal
1131:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * RCC configuration registers.
1132:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct pointer to an RCC_ClkInitTypeDef structure that
1133:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * will be configured.
1134:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @param  pFLatency Pointer on the Flash Latency.
1135:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval None
1136:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
1137:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
1138:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {
 1810              		.loc 1 1138 0
 1811              		.cfi_startproc
 1812              		@ args = 0, pretend = 0, frame = 0
 1813              		@ frame_needed = 0, uses_anonymous_args = 0
 1814              		@ link register save eliminated.
 1815              	.LVL137:
1139:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Set all possible values for the Clock type parameter --------------------*/
1140:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | 
 1816              		.loc 1 1140 0
 1817 0000 0F23     		movs	r3, #15
 1818 0002 0360     		str	r3, [r0]
1141:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1142:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get the SYSCLK configuration --------------------------------------------*/
1143:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 1819              		.loc 1 1143 0
 1820 0004 0B4B     		ldr	r3, .L184
 1821 0006 9A68     		ldr	r2, [r3, #8]
 1822 0008 02F00302 		and	r2, r2, #3
 1823 000c 4260     		str	r2, [r0, #4]
1144:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1145:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get the HCLK configuration ----------------------------------------------*/
1146:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 1824              		.loc 1 1146 0
 1825 000e 9A68     		ldr	r2, [r3, #8]
 1826 0010 02F0F002 		and	r2, r2, #240
 1827 0014 8260     		str	r2, [r0, #8]
1147:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1148:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get the APB1 configuration ----------------------------------------------*/
1149:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 1828              		.loc 1 1149 0
 1829 0016 9A68     		ldr	r2, [r3, #8]
 1830 0018 02F4E052 		and	r2, r2, #7168
 1831 001c C260     		str	r2, [r0, #12]
1150:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1151:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get the APB2 configuration ----------------------------------------------*/
1152:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 1832              		.loc 1 1152 0
 1833 001e 9B68     		ldr	r3, [r3, #8]
 1834 0020 DB08     		lsrs	r3, r3, #3
 1835 0022 03F4E053 		and	r3, r3, #7168
 1836 0026 0361     		str	r3, [r0, #16]
1153:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1154:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Get the Flash Wait State (Latency) configuration ------------------------*/
1155:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 1837              		.loc 1 1155 0
 1838 0028 034B     		ldr	r3, .L184+4
ARM GAS  /tmp/ccjB5W2d.s 			page 65


 1839 002a 1B68     		ldr	r3, [r3]
 1840 002c 03F00F03 		and	r3, r3, #15
 1841 0030 0B60     		str	r3, [r1]
1156:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
 1842              		.loc 1 1156 0
 1843 0032 7047     		bx	lr
 1844              	.L185:
 1845              		.align	2
 1846              	.L184:
 1847 0034 00380240 		.word	1073887232
 1848 0038 003C0240 		.word	1073888256
 1849              		.cfi_endproc
 1850              	.LFE77:
 1852              		.section	.text.HAL_RCC_CSSCallback,"ax",%progbits
 1853              		.align	1
 1854              		.weak	HAL_RCC_CSSCallback
 1855              		.syntax unified
 1856              		.thumb
 1857              		.thumb_func
 1858              		.fpu softvfp
 1860              	HAL_RCC_CSSCallback:
 1861              	.LFB79:
1157:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1158:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
1159:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief This function handles the RCC CSS interrupt request.
1160:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @note This API should be called under the NMI_Handler().
1161:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval None
1162:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
1163:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** void HAL_RCC_NMI_IRQHandler(void)
1164:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {
1165:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
1166:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   if(__HAL_RCC_GET_IT(RCC_IT_CSS))
1167:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
1168:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* RCC Clock Security System interrupt user callback */
1169:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     HAL_RCC_CSSCallback();
1170:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1171:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     /* Clear RCC CSS pending bit */
1172:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****     __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
1173:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
1174:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
1175:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
1176:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** /**
1177:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @brief  RCC Clock Security System interrupt callback
1178:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   * @retval None
1179:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   */
1180:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** __weak void HAL_RCC_CSSCallback(void)
1181:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** {
 1862              		.loc 1 1181 0
 1863              		.cfi_startproc
 1864              		@ args = 0, pretend = 0, frame = 0
 1865              		@ frame_needed = 0, uses_anonymous_args = 0
 1866              		@ link register save eliminated.
1182:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1183:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****             the HAL_RCC_CSSCallback could be implemented in the user file
1184:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****    */
1185:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** }
 1867              		.loc 1 1185 0
ARM GAS  /tmp/ccjB5W2d.s 			page 66


 1868 0000 7047     		bx	lr
 1869              		.cfi_endproc
 1870              	.LFE79:
 1872              		.section	.text.HAL_RCC_NMI_IRQHandler,"ax",%progbits
 1873              		.align	1
 1874              		.global	HAL_RCC_NMI_IRQHandler
 1875              		.syntax unified
 1876              		.thumb
 1877              		.thumb_func
 1878              		.fpu softvfp
 1880              	HAL_RCC_NMI_IRQHandler:
 1881              	.LFB78:
1164:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
 1882              		.loc 1 1164 0
 1883              		.cfi_startproc
 1884              		@ args = 0, pretend = 0, frame = 0
 1885              		@ frame_needed = 0, uses_anonymous_args = 0
 1886 0000 08B5     		push	{r3, lr}
 1887              	.LCFI18:
 1888              		.cfi_def_cfa_offset 8
 1889              		.cfi_offset 3, -8
 1890              		.cfi_offset 14, -4
1166:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   {
 1891              		.loc 1 1166 0
 1892 0002 064B     		ldr	r3, .L191
 1893 0004 DB68     		ldr	r3, [r3, #12]
 1894 0006 13F0800F 		tst	r3, #128
 1895 000a 00D1     		bne	.L190
 1896              	.L187:
1174:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 1897              		.loc 1 1174 0
 1898 000c 08BD     		pop	{r3, pc}
 1899              	.L190:
1169:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 1900              		.loc 1 1169 0
 1901 000e FFF7FEFF 		bl	HAL_RCC_CSSCallback
 1902              	.LVL138:
1172:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c ****   }
 1903              		.loc 1 1172 0
 1904 0012 034B     		ldr	r3, .L191+4
 1905 0014 8022     		movs	r2, #128
 1906 0016 1A70     		strb	r2, [r3]
1174:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal_rcc.c **** 
 1907              		.loc 1 1174 0
 1908 0018 F8E7     		b	.L187
 1909              	.L192:
 1910 001a 00BF     		.align	2
 1911              	.L191:
 1912 001c 00380240 		.word	1073887232
 1913 0020 0E380240 		.word	1073887246
 1914              		.cfi_endproc
 1915              	.LFE78:
 1917              		.text
 1918              	.Letext0:
 1919              		.file 3 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_d
 1920              		.file 4 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdin
 1921              		.file 5 "Drivers/CMSIS/Include/core_cm3.h"
ARM GAS  /tmp/ccjB5W2d.s 			page 67


 1922              		.file 6 "Drivers/CMSIS/Device/ST/STM32F2xx/Include/system_stm32f2xx.h"
 1923              		.file 7 "Drivers/CMSIS/Device/ST/STM32F2xx/Include/stm32f205xx.h"
 1924              		.file 8 "Drivers/CMSIS/Device/ST/STM32F2xx/Include/stm32f2xx.h"
 1925              		.file 9 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h
 1926              		.file 10 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_type
 1927              		.file 11 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/inc
 1928              		.file 12 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent
 1929              		.file 13 "Drivers/STM32F2xx_HAL_Driver/Inc/stm32f2xx_hal_def.h"
 1930              		.file 14 "Drivers/STM32F2xx_HAL_Driver/Inc/stm32f2xx_hal_rcc.h"
 1931              		.file 15 "Drivers/STM32F2xx_HAL_Driver/Inc/stm32f2xx_hal_gpio.h"
 1932              		.file 16 "Drivers/STM32F2xx_HAL_Driver/Inc/stm32f2xx_hal.h"
ARM GAS  /tmp/ccjB5W2d.s 			page 68


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f2xx_hal_rcc.c
     /tmp/ccjB5W2d.s:16     .text.HAL_RCC_DeInit:0000000000000000 $t
     /tmp/ccjB5W2d.s:23     .text.HAL_RCC_DeInit:0000000000000000 HAL_RCC_DeInit
     /tmp/ccjB5W2d.s:209    .text.HAL_RCC_DeInit:0000000000000100 $d
     /tmp/ccjB5W2d.s:218    .text.HAL_RCC_OscConfig:0000000000000000 $t
     /tmp/ccjB5W2d.s:225    .text.HAL_RCC_OscConfig:0000000000000000 HAL_RCC_OscConfig
     /tmp/ccjB5W2d.s:698    .text.HAL_RCC_OscConfig:00000000000002a4 $d
     /tmp/ccjB5W2d.s:707    .text.HAL_RCC_OscConfig:00000000000002c0 $t
     /tmp/ccjB5W2d.s:847    .text.HAL_RCC_OscConfig:0000000000000348 $d
     /tmp/ccjB5W2d.s:853    .text.HAL_RCC_MCOConfig:0000000000000000 $t
     /tmp/ccjB5W2d.s:860    .text.HAL_RCC_MCOConfig:0000000000000000 HAL_RCC_MCOConfig
     /tmp/ccjB5W2d.s:979    .text.HAL_RCC_MCOConfig:0000000000000090 $d
     /tmp/ccjB5W2d.s:986    .text.HAL_RCC_EnableCSS:0000000000000000 $t
     /tmp/ccjB5W2d.s:993    .text.HAL_RCC_EnableCSS:0000000000000000 HAL_RCC_EnableCSS
     /tmp/ccjB5W2d.s:1009   .text.HAL_RCC_EnableCSS:0000000000000008 $d
     /tmp/ccjB5W2d.s:1014   .text.HAL_RCC_DisableCSS:0000000000000000 $t
     /tmp/ccjB5W2d.s:1021   .text.HAL_RCC_DisableCSS:0000000000000000 HAL_RCC_DisableCSS
     /tmp/ccjB5W2d.s:1037   .text.HAL_RCC_DisableCSS:0000000000000008 $d
     /tmp/ccjB5W2d.s:1043   .text.HAL_RCC_GetSysClockFreq:0000000000000000 $t
     /tmp/ccjB5W2d.s:1050   .text.HAL_RCC_GetSysClockFreq:0000000000000000 HAL_RCC_GetSysClockFreq
     /tmp/ccjB5W2d.s:1182   .text.HAL_RCC_GetSysClockFreq:00000000000000cc $d
     /tmp/ccjB5W2d.s:1189   .text.HAL_RCC_ClockConfig:0000000000000000 $t
     /tmp/ccjB5W2d.s:1196   .text.HAL_RCC_ClockConfig:0000000000000000 HAL_RCC_ClockConfig
     /tmp/ccjB5W2d.s:1444   .text.HAL_RCC_ClockConfig:0000000000000154 $d
     /tmp/ccjB5W2d.s:1452   .text.HAL_RCC_GetHCLKFreq:0000000000000000 $t
     /tmp/ccjB5W2d.s:1459   .text.HAL_RCC_GetHCLKFreq:0000000000000000 HAL_RCC_GetHCLKFreq
     /tmp/ccjB5W2d.s:1473   .text.HAL_RCC_GetHCLKFreq:0000000000000008 $d
     /tmp/ccjB5W2d.s:1478   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 $t
     /tmp/ccjB5W2d.s:1485   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 HAL_RCC_GetPCLK1Freq
     /tmp/ccjB5W2d.s:1527   .text.HAL_RCC_GetPCLK1Freq:0000000000000024 $d
     /tmp/ccjB5W2d.s:1533   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 $t
     /tmp/ccjB5W2d.s:1540   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 HAL_RCC_GetPCLK2Freq
     /tmp/ccjB5W2d.s:1582   .text.HAL_RCC_GetPCLK2Freq:0000000000000024 $d
     /tmp/ccjB5W2d.s:1588   .text.HAL_RCC_GetOscConfig:0000000000000000 $t
     /tmp/ccjB5W2d.s:1595   .text.HAL_RCC_GetOscConfig:0000000000000000 HAL_RCC_GetOscConfig
     /tmp/ccjB5W2d.s:1796   .text.HAL_RCC_GetOscConfig:00000000000000f8 $d
     /tmp/ccjB5W2d.s:1801   .text.HAL_RCC_GetClockConfig:0000000000000000 $t
     /tmp/ccjB5W2d.s:1808   .text.HAL_RCC_GetClockConfig:0000000000000000 HAL_RCC_GetClockConfig
     /tmp/ccjB5W2d.s:1847   .text.HAL_RCC_GetClockConfig:0000000000000034 $d
     /tmp/ccjB5W2d.s:1853   .text.HAL_RCC_CSSCallback:0000000000000000 $t
     /tmp/ccjB5W2d.s:1860   .text.HAL_RCC_CSSCallback:0000000000000000 HAL_RCC_CSSCallback
     /tmp/ccjB5W2d.s:1873   .text.HAL_RCC_NMI_IRQHandler:0000000000000000 $t
     /tmp/ccjB5W2d.s:1880   .text.HAL_RCC_NMI_IRQHandler:0000000000000000 HAL_RCC_NMI_IRQHandler
     /tmp/ccjB5W2d.s:1912   .text.HAL_RCC_NMI_IRQHandler:000000000000001c $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_InitTick
SystemCoreClock
HAL_GPIO_Init
__aeabi_uldivmod
AHBPrescTable
APBPrescTable
