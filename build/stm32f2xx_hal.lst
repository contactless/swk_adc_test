ARM GAS  /tmp/ccDtGuy5.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f2xx_hal.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.HAL_MspInit,"ax",%progbits
  16              		.align	1
  17              		.weak	HAL_MspInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	HAL_MspInit:
  24              	.LFB68:
  25              		.file 1 "Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c"
   1:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /**
   2:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   ******************************************************************************
   3:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @file    stm32f2xx_hal.c
   4:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @author  MCD Application Team
   5:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @brief   HAL module driver.
   6:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *          This is the common part of the HAL initialization
   7:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *
   8:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   @verbatim
   9:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   ==============================================================================
  10:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****                      ##### How to use this driver #####
  11:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   ==============================================================================
  12:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****     [..]
  13:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****     The common HAL driver contains a set of generic and common APIs that can be
  14:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****     used by the PPP peripheral drivers and the user to start using the HAL. 
  15:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****     [..]
  16:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****     The HAL contains two APIs' categories: 
  17:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****          (+) Common HAL APIs
  18:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****          (+) Services HAL APIs
  19:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
  20:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   @endverbatim
  21:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   ******************************************************************************
  22:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @attention
  23:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *
  24:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * <h2><center>&copy; COPYRIGHT(c) 2017 STMicroelectronics</center></h2>
  25:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *
  26:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * Redistribution and use in source and binary forms, with or without modification,
  27:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * are permitted provided that the following conditions are met:
  28:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  29:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *      this list of conditions and the following disclaimer.
  30:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  31:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *      this list of conditions and the following disclaimer in the documentation
  32:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *      and/or other materials provided with the distribution.
  33:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
ARM GAS  /tmp/ccDtGuy5.s 			page 2


  34:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *      may be used to endorse or promote products derived from this software
  35:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *      without specific prior written permission.
  36:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *
  37:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  38:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  39:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  40:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  41:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  42:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  43:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  44:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  45:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  46:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  47:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *
  48:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   ******************************************************************************
  49:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */ 
  50:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
  51:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /* Includes ------------------------------------------------------------------*/
  52:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** #include "stm32f2xx_hal.h"
  53:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
  54:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /** @addtogroup STM32F2xx_HAL_Driver
  55:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @{
  56:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
  57:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
  58:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /** @defgroup HAL HAL
  59:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @brief HAL module driver.
  60:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @{
  61:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
  62:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
  63:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /* Private typedef -----------------------------------------------------------*/
  64:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /* Private define ------------------------------------------------------------*/
  65:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /** @addtogroup HAL_Private_Constants
  66:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @{
  67:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
  68:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /**
  69:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @brief STM32F2xx HAL Driver version number V1.2.1
  70:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
  71:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** #define __STM32F2xx_HAL_VERSION_MAIN   0x01U /*!< [31:24] main version */
  72:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** #define __STM32F2xx_HAL_VERSION_SUB1   0x02U /*!< [23:16] sub1 version */
  73:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** #define __STM32F2xx_HAL_VERSION_SUB2   0x01U /*!< [15:8]  sub2 version */
  74:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** #define __STM32F2xx_HAL_VERSION_RC     0x00U /*!< [7:0]  release candidate */ 
  75:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** #define __STM32F2xx_HAL_VERSION         ((__STM32F2xx_HAL_VERSION_MAIN << 24U)\
  76:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****                                         |(__STM32F2xx_HAL_VERSION_SUB1 << 16U)\
  77:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****                                         |(__STM32F2xx_HAL_VERSION_SUB2 << 8U) \
  78:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****                                         |(__STM32F2xx_HAL_VERSION_RC))
  79:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****                                         
  80:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** #define IDCODE_DEVID_MASK    0x00000FFFU
  81:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
  82:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  83:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** #define SYSCFG_OFFSET             (SYSCFG_BASE - PERIPH_BASE)
  84:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /* ---  MEMRMP Register ---*/ 
  85:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /* Alias word address of UFB_MODE bit */ 
  86:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** #define MEMRMP_OFFSET             SYSCFG_OFFSET 
  87:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** #define UFB_MODE_BIT_NUMBER       POSITION_VAL(SYSCFG_MEMRMP_UFB_MODE)
  88:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** #define UFB_MODE_BB               (uint32_t)(PERIPH_BB_BASE + (MEMRMP_OFFSET * 32U) + (UFB_MODE_BIT
  89:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
  90:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /* ---  CMPCR Register ---*/ 
ARM GAS  /tmp/ccDtGuy5.s 			page 3


  91:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /* Alias word address of CMP_PD bit */ 
  92:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** #define CMPCR_OFFSET              (SYSCFG_OFFSET + 0x20U) 
  93:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** #define CMP_PD_BIT_NUMBER         POSITION_VAL(SYSCFG_CMPCR_CMP_PD)
  94:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** #define CMPCR_CMP_PD_BB           (uint32_t)(PERIPH_BB_BASE + (CMPCR_OFFSET * 32U) + (CMP_PD_BIT_NU
  95:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /**
  96:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @}
  97:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
  98:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
  99:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /* Private macro -------------------------------------------------------------*/
 100:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /* Private variables ---------------------------------------------------------*/
 101:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /** @addtogroup HAL_Private_Variables
 102:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @{
 103:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 104:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** __IO uint32_t uwTick;
 105:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /**
 106:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @}
 107:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 108:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /* Private function prototypes -----------------------------------------------*/
 109:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /* Private functions ---------------------------------------------------------*/
 110:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 111:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /** @defgroup HAL_Exported_Functions HAL Exported Functions
 112:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @{
 113:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 114:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 115:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /** @defgroup HAL_Exported_Functions_Group1 Initialization and de-initialization Functions 
 116:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****  *  @brief    Initialization and de-initialization functions
 117:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****  *
 118:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** @verbatim    
 119:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****  ===============================================================================
 120:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****               ##### Initialization and de-initialization functions #####
 121:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****  ===============================================================================
 122:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****     [..]  This section provides functions allowing to:
 123:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****       (+) Initializes the Flash interface the NVIC allocation and initial clock 
 124:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****           configuration. It initializes the systick also when timeout is needed 
 125:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****           and the backup domain when enabled.
 126:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****       (+) de-Initializes common part of the HAL
 127:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****       (+) Configure The time base source to have 1ms time base with a dedicated 
 128:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****           Tick interrupt priority. 
 129:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****         (++) Systick timer is used by default as source of time base, but user 
 130:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****              can eventually implement his proper time base source (a general purpose 
 131:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****              timer for example or other time source), keeping in mind that Time base 
 132:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****              duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
 133:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****              handled in milliseconds basis.
 134:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****         (++) Time base configuration function (HAL_InitTick ()) is called automatically 
 135:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****              at the beginning of the program after reset by HAL_Init() or at any time 
 136:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****              when clock is configured, by HAL_RCC_ClockConfig(). 
 137:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****         (++) Source of time base is configured  to generate interrupts at regular 
 138:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****              time intervals. Care must be taken if HAL_Delay() is called from a 
 139:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****              peripheral ISR process, the Tick interrupt line must have higher priority 
 140:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****             (numerically lower) than the peripheral interrupt. Otherwise the caller 
 141:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****             ISR process will be blocked. 
 142:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****        (++) functions affecting time base configurations are declared as __weak  
 143:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****              to make  override possible  in case of other  implementations in user file.
 144:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** @endverbatim
 145:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @{
 146:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 147:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
ARM GAS  /tmp/ccDtGuy5.s 			page 4


 148:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /**
 149:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @brief  This function is used to initialize the HAL Library; it must be the first 
 150:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *         instruction to be executed in the main program (before to call any other
 151:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *         HAL function), it performs the following:
 152:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *           Configure the Flash prefetch, instruction and Data caches.
 153:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *           Configures the SysTick to generate an interrupt each 1 millisecond,
 154:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *           which is clocked by the HSI (at this stage, the clock is not yet
 155:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *           configured and thus the system is running from the internal HSI at 16 MHz).
 156:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *           Set NVIC Group Priority to 4.
 157:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *           Calls the HAL_MspInit() callback function defined in user file 
 158:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *           "stm32f2xx_hal_msp.c" to do the global low level hardware initialization 
 159:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *            
 160:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @note   SysTick is used as time base for the HAL_Delay() function, the application
 161:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *         need to ensure that the SysTick time base is always set to 1 millisecond
 162:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *         to have correct HAL operation.
 163:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @retval HAL status
 164:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 165:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** HAL_StatusTypeDef HAL_Init(void)
 166:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** {
 167:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   /* Configure Flash prefetch, Instruction cache, Data cache */ 
 168:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** #if (INSTRUCTION_CACHE_ENABLE != 0U)
 169:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 170:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** #endif /* INSTRUCTION_CACHE_ENABLE */
 171:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 172:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** #if (DATA_CACHE_ENABLE != 0U)
 173:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****    __HAL_FLASH_DATA_CACHE_ENABLE();
 174:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** #endif /* DATA_CACHE_ENABLE */
 175:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 176:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** #if (PREFETCH_ENABLE != 0U)
 177:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 178:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** #endif /* PREFETCH_ENABLE */
 179:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 180:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   /* Set Interrupt Group Priority */
 181:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 182:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 183:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
 184:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   HAL_InitTick(TICK_INT_PRIORITY);
 185:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   
 186:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   /* Init the low level hardware */
 187:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   HAL_MspInit();
 188:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   
 189:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   /* Return function status */
 190:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   return HAL_OK;
 191:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** }
 192:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 193:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /**
 194:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @brief  This function de-Initializes common part of the HAL and stops the systick.
 195:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *         This function is optional.   
 196:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @retval HAL status
 197:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 198:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** HAL_StatusTypeDef HAL_DeInit(void)
 199:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** {
 200:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   /* Reset of all peripherals */
 201:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   __HAL_RCC_APB1_FORCE_RESET();
 202:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   __HAL_RCC_APB1_RELEASE_RESET();
 203:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 204:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   __HAL_RCC_APB2_FORCE_RESET();
ARM GAS  /tmp/ccDtGuy5.s 			page 5


 205:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   __HAL_RCC_APB2_RELEASE_RESET();
 206:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 207:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   __HAL_RCC_AHB1_FORCE_RESET();
 208:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   __HAL_RCC_AHB1_RELEASE_RESET();
 209:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 210:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   __HAL_RCC_AHB2_FORCE_RESET();
 211:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   __HAL_RCC_AHB2_RELEASE_RESET();
 212:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 213:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   __HAL_RCC_AHB3_FORCE_RESET();
 214:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   __HAL_RCC_AHB3_RELEASE_RESET();
 215:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 216:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   /* De-Init the low level hardware */
 217:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   HAL_MspDeInit();
 218:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****     
 219:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   /* Return function status */
 220:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   return HAL_OK;
 221:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** }
 222:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 223:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /**
 224:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @brief  Initializes the MSP.
 225:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @retval None
 226:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 227:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** __weak void HAL_MspInit(void)
 228:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** {
  26              		.loc 1 228 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
 229:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 230:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****             the HAL_MspInit could be implemented in the user file
 231:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****    */
 232:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** }
  31              		.loc 1 232 0
  32 0000 7047     		bx	lr
  33              		.cfi_endproc
  34              	.LFE68:
  36              		.section	.text.HAL_MspDeInit,"ax",%progbits
  37              		.align	1
  38              		.weak	HAL_MspDeInit
  39              		.syntax unified
  40              		.thumb
  41              		.thumb_func
  42              		.fpu softvfp
  44              	HAL_MspDeInit:
  45              	.LFB69:
 233:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 234:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /**
 235:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @brief  DeInitializes the MSP.
 236:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @retval None
 237:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 238:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** __weak void HAL_MspDeInit(void)
 239:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** {
  46              		.loc 1 239 0
  47              		.cfi_startproc
  48              		@ args = 0, pretend = 0, frame = 0
  49              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccDtGuy5.s 			page 6


  50              		@ link register save eliminated.
 240:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 241:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****             the HAL_MspDeInit could be implemented in the user file
 242:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****    */ 
 243:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** }
  51              		.loc 1 243 0
  52 0000 7047     		bx	lr
  53              		.cfi_endproc
  54              	.LFE69:
  56              		.section	.text.HAL_DeInit,"ax",%progbits
  57              		.align	1
  58              		.global	HAL_DeInit
  59              		.syntax unified
  60              		.thumb
  61              		.thumb_func
  62              		.fpu softvfp
  64              	HAL_DeInit:
  65              	.LFB67:
 199:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   /* Reset of all peripherals */
  66              		.loc 1 199 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70 0000 10B5     		push	{r4, lr}
  71              	.LCFI0:
  72              		.cfi_def_cfa_offset 8
  73              		.cfi_offset 4, -8
  74              		.cfi_offset 14, -4
 201:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   __HAL_RCC_APB1_RELEASE_RESET();
  75              		.loc 1 201 0
  76 0002 094B     		ldr	r3, .L5
  77 0004 4FF0FF32 		mov	r2, #-1
  78 0008 1A62     		str	r2, [r3, #32]
 202:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
  79              		.loc 1 202 0
  80 000a 0024     		movs	r4, #0
  81 000c 1C62     		str	r4, [r3, #32]
 204:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   __HAL_RCC_APB2_RELEASE_RESET();
  82              		.loc 1 204 0
  83 000e 5A62     		str	r2, [r3, #36]
 205:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
  84              		.loc 1 205 0
  85 0010 5C62     		str	r4, [r3, #36]
 207:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   __HAL_RCC_AHB1_RELEASE_RESET();
  86              		.loc 1 207 0
  87 0012 1A61     		str	r2, [r3, #16]
 208:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
  88              		.loc 1 208 0
  89 0014 1C61     		str	r4, [r3, #16]
 210:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   __HAL_RCC_AHB2_RELEASE_RESET();
  90              		.loc 1 210 0
  91 0016 5A61     		str	r2, [r3, #20]
 211:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
  92              		.loc 1 211 0
  93 0018 5C61     		str	r4, [r3, #20]
 213:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   __HAL_RCC_AHB3_RELEASE_RESET();
  94              		.loc 1 213 0
ARM GAS  /tmp/ccDtGuy5.s 			page 7


  95 001a 9A61     		str	r2, [r3, #24]
 214:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
  96              		.loc 1 214 0
  97 001c 9C61     		str	r4, [r3, #24]
 217:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****     
  98              		.loc 1 217 0
  99 001e FFF7FEFF 		bl	HAL_MspDeInit
 100              	.LVL0:
 221:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 101              		.loc 1 221 0
 102 0022 2046     		mov	r0, r4
 103 0024 10BD     		pop	{r4, pc}
 104              	.L6:
 105 0026 00BF     		.align	2
 106              	.L5:
 107 0028 00380240 		.word	1073887232
 108              		.cfi_endproc
 109              	.LFE67:
 111              		.section	.text.HAL_InitTick,"ax",%progbits
 112              		.align	1
 113              		.weak	HAL_InitTick
 114              		.syntax unified
 115              		.thumb
 116              		.thumb_func
 117              		.fpu softvfp
 119              	HAL_InitTick:
 120              	.LFB70:
 244:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 245:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /**
 246:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @brief This function configures the source of the time base.
 247:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *        The time source is configured  to have 1ms time base with a dedicated 
 248:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *        Tick interrupt priority.
 249:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @note This function is called  automatically at the beginning of program after
 250:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *       reset by HAL_Init() or at any time when clock is reconfigured  by HAL_RCC_ClockConfig().
 251:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @note In the default implementation, SysTick timer is the source of time base. 
 252:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *       It is used to generate interrupts at regular time intervals. 
 253:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *       Care must be taken if HAL_Delay() is called from a peripheral ISR process, 
 254:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *       The the SysTick interrupt must have higher priority (numerically lower) 
 255:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *       than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
 256:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *       The function is declared as __weak  to be overwritten  in case of other
 257:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *       implementation  in user file.
 258:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @param  TickPriority Tick interrupt priority.
 259:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @retval HAL status
 260:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 261:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** __weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
 262:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** {
 121              		.loc 1 262 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 125              	.LVL1:
 126 0000 10B5     		push	{r4, lr}
 127              	.LCFI1:
 128              		.cfi_def_cfa_offset 8
 129              		.cfi_offset 4, -8
 130              		.cfi_offset 14, -4
 131 0002 0446     		mov	r4, r0
ARM GAS  /tmp/ccDtGuy5.s 			page 8


 263:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   /*Configure the SysTick to have interrupt in 1ms time basis*/
 264:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   HAL_SYSTICK_Config(SystemCoreClock/1000U);
 132              		.loc 1 264 0
 133 0004 074B     		ldr	r3, .L9
 134 0006 1868     		ldr	r0, [r3]
 135              	.LVL2:
 136 0008 074B     		ldr	r3, .L9+4
 137 000a A3FB0030 		umull	r3, r0, r3, r0
 138 000e 8009     		lsrs	r0, r0, #6
 139 0010 FFF7FEFF 		bl	HAL_SYSTICK_Config
 140              	.LVL3:
 265:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 266:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   /*Configure the SysTick IRQ priority */
 267:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 141              		.loc 1 267 0
 142 0014 0022     		movs	r2, #0
 143 0016 2146     		mov	r1, r4
 144 0018 4FF0FF30 		mov	r0, #-1
 145 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 146              	.LVL4:
 268:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 269:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   /* Return function status */
 270:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   return HAL_OK;
 271:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** }
 147              		.loc 1 271 0
 148 0020 0020     		movs	r0, #0
 149 0022 10BD     		pop	{r4, pc}
 150              	.LVL5:
 151              	.L10:
 152              		.align	2
 153              	.L9:
 154 0024 00000000 		.word	SystemCoreClock
 155 0028 D34D6210 		.word	274877907
 156              		.cfi_endproc
 157              	.LFE70:
 159              		.section	.text.HAL_Init,"ax",%progbits
 160              		.align	1
 161              		.global	HAL_Init
 162              		.syntax unified
 163              		.thumb
 164              		.thumb_func
 165              		.fpu softvfp
 167              	HAL_Init:
 168              	.LFB66:
 166:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   /* Configure Flash prefetch, Instruction cache, Data cache */ 
 169              		.loc 1 166 0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 0, uses_anonymous_args = 0
 173 0000 08B5     		push	{r3, lr}
 174              	.LCFI2:
 175              		.cfi_def_cfa_offset 8
 176              		.cfi_offset 3, -8
 177              		.cfi_offset 14, -4
 169:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** #endif /* INSTRUCTION_CACHE_ENABLE */
 178              		.loc 1 169 0
 179 0002 0B4B     		ldr	r3, .L13
ARM GAS  /tmp/ccDtGuy5.s 			page 9


 180 0004 1A68     		ldr	r2, [r3]
 181 0006 42F40072 		orr	r2, r2, #512
 182 000a 1A60     		str	r2, [r3]
 173:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** #endif /* DATA_CACHE_ENABLE */
 183              		.loc 1 173 0
 184 000c 1A68     		ldr	r2, [r3]
 185 000e 42F48062 		orr	r2, r2, #1024
 186 0012 1A60     		str	r2, [r3]
 177:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** #endif /* PREFETCH_ENABLE */
 187              		.loc 1 177 0
 188 0014 1A68     		ldr	r2, [r3]
 189 0016 42F48072 		orr	r2, r2, #256
 190 001a 1A60     		str	r2, [r3]
 181:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 191              		.loc 1 181 0
 192 001c 0320     		movs	r0, #3
 193 001e FFF7FEFF 		bl	HAL_NVIC_SetPriorityGrouping
 194              	.LVL6:
 184:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   
 195              		.loc 1 184 0
 196 0022 0020     		movs	r0, #0
 197 0024 FFF7FEFF 		bl	HAL_InitTick
 198              	.LVL7:
 187:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   
 199              		.loc 1 187 0
 200 0028 FFF7FEFF 		bl	HAL_MspInit
 201              	.LVL8:
 191:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 202              		.loc 1 191 0
 203 002c 0020     		movs	r0, #0
 204 002e 08BD     		pop	{r3, pc}
 205              	.L14:
 206              		.align	2
 207              	.L13:
 208 0030 003C0240 		.word	1073888256
 209              		.cfi_endproc
 210              	.LFE66:
 212              		.section	.text.HAL_IncTick,"ax",%progbits
 213              		.align	1
 214              		.weak	HAL_IncTick
 215              		.syntax unified
 216              		.thumb
 217              		.thumb_func
 218              		.fpu softvfp
 220              	HAL_IncTick:
 221              	.LFB71:
 272:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 273:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /**
 274:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @}
 275:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 276:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 277:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /** @defgroup HAL_Exported_Functions_Group2 HAL Control functions 
 278:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****  *  @brief    HAL Control functions
 279:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****  *
 280:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** @verbatim
 281:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****  ===============================================================================
 282:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****                       ##### HAL Control functions #####
ARM GAS  /tmp/ccDtGuy5.s 			page 10


 283:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****  ===============================================================================
 284:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****     [..]  This section provides functions allowing to:
 285:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****       (+) Provide a tick value in millisecond
 286:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****       (+) Provide a blocking delay in millisecond
 287:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****       (+) Suspend the time base source interrupt
 288:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****       (+) Resume the time base source interrupt
 289:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****       (+) Get the HAL API driver version
 290:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****       (+) Get the device identifier
 291:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****       (+) Get the device revision identifier
 292:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****       (+) Enable/Disable Debug module during SLEEP mode
 293:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****       (+) Enable/Disable Debug module during STOP mode
 294:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****       (+) Enable/Disable Debug module during STANDBY mode
 295:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 296:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** @endverbatim
 297:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @{
 298:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 299:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 300:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /**
 301:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @brief This function is called to increment  a global variable "uwTick"
 302:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *        used as application time base.
 303:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @note In the default implementation, this variable is incremented each 1ms
 304:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *       in Systick ISR.
 305:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****  * @note This function is declared as __weak to be overwritten in case of other 
 306:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *      implementations in user file.
 307:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @retval None
 308:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 309:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** __weak void HAL_IncTick(void)
 310:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** {
 222              		.loc 1 310 0
 223              		.cfi_startproc
 224              		@ args = 0, pretend = 0, frame = 0
 225              		@ frame_needed = 0, uses_anonymous_args = 0
 226              		@ link register save eliminated.
 311:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   uwTick++;
 227              		.loc 1 311 0
 228 0000 024A     		ldr	r2, .L16
 229 0002 1368     		ldr	r3, [r2]
 230 0004 0133     		adds	r3, r3, #1
 231 0006 1360     		str	r3, [r2]
 312:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** }
 232              		.loc 1 312 0
 233 0008 7047     		bx	lr
 234              	.L17:
 235 000a 00BF     		.align	2
 236              	.L16:
 237 000c 00000000 		.word	uwTick
 238              		.cfi_endproc
 239              	.LFE71:
 241              		.section	.text.HAL_GetTick,"ax",%progbits
 242              		.align	1
 243              		.weak	HAL_GetTick
 244              		.syntax unified
 245              		.thumb
 246              		.thumb_func
 247              		.fpu softvfp
 249              	HAL_GetTick:
 250              	.LFB72:
ARM GAS  /tmp/ccDtGuy5.s 			page 11


 313:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 314:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /**
 315:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @brief Provides a tick value in millisecond.
 316:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other 
 317:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *       implementations in user file.
 318:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @retval tick value
 319:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 320:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** __weak uint32_t HAL_GetTick(void)
 321:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** {
 251              		.loc 1 321 0
 252              		.cfi_startproc
 253              		@ args = 0, pretend = 0, frame = 0
 254              		@ frame_needed = 0, uses_anonymous_args = 0
 255              		@ link register save eliminated.
 322:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   return uwTick;
 256              		.loc 1 322 0
 257 0000 014B     		ldr	r3, .L19
 258 0002 1868     		ldr	r0, [r3]
 323:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** }
 259              		.loc 1 323 0
 260 0004 7047     		bx	lr
 261              	.L20:
 262 0006 00BF     		.align	2
 263              	.L19:
 264 0008 00000000 		.word	uwTick
 265              		.cfi_endproc
 266              	.LFE72:
 268              		.section	.text.HAL_Delay,"ax",%progbits
 269              		.align	1
 270              		.weak	HAL_Delay
 271              		.syntax unified
 272              		.thumb
 273              		.thumb_func
 274              		.fpu softvfp
 276              	HAL_Delay:
 277              	.LFB73:
 324:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 325:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /**
 326:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @brief This function provides minimum delay (in milliseconds) based 
 327:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *        on variable incremented.
 328:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base.
 329:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *       It is used to generate interrupts at regular time intervals where uwTick
 330:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *       is incremented.
 331:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other
 332:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *       implementations in user file.
 333:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @param  Delay specifies the delay time length, in milliseconds.
 334:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @retval None
 335:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 336:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** __weak void HAL_Delay(__IO uint32_t Delay)
 337:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** {
 278              		.loc 1 337 0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 8
 281              		@ frame_needed = 0, uses_anonymous_args = 0
 282              	.LVL9:
 283 0000 30B5     		push	{r4, r5, lr}
 284              	.LCFI3:
ARM GAS  /tmp/ccDtGuy5.s 			page 12


 285              		.cfi_def_cfa_offset 12
 286              		.cfi_offset 4, -12
 287              		.cfi_offset 5, -8
 288              		.cfi_offset 14, -4
 289 0002 83B0     		sub	sp, sp, #12
 290              	.LCFI4:
 291              		.cfi_def_cfa_offset 24
 292 0004 0190     		str	r0, [sp, #4]
 338:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   uint32_t tickstart = HAL_GetTick();
 293              		.loc 1 338 0
 294 0006 FFF7FEFF 		bl	HAL_GetTick
 295              	.LVL10:
 296 000a 0546     		mov	r5, r0
 297              	.LVL11:
 339:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   uint32_t wait = Delay;
 298              		.loc 1 339 0
 299 000c 019C     		ldr	r4, [sp, #4]
 300              	.LVL12:
 340:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   
 341:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   /* Add a period to guarantee minimum wait */
 342:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   if (wait < HAL_MAX_DELAY)
 301              		.loc 1 342 0
 302 000e B4F1FF3F 		cmp	r4, #-1
 303 0012 00D0     		beq	.L23
 343:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   {
 344:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****      wait++;
 304              		.loc 1 344 0
 305 0014 0134     		adds	r4, r4, #1
 306              	.LVL13:
 307              	.L23:
 345:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   }
 346:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   
 347:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   while((HAL_GetTick() - tickstart) < wait)
 308              		.loc 1 347 0 discriminator 1
 309 0016 FFF7FEFF 		bl	HAL_GetTick
 310              	.LVL14:
 311 001a 401B     		subs	r0, r0, r5
 312 001c A042     		cmp	r0, r4
 313 001e FAD3     		bcc	.L23
 348:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   {
 349:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   }
 350:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** }
 314              		.loc 1 350 0
 315 0020 03B0     		add	sp, sp, #12
 316              	.LCFI5:
 317              		.cfi_def_cfa_offset 12
 318              		@ sp needed
 319 0022 30BD     		pop	{r4, r5, pc}
 320              		.cfi_endproc
 321              	.LFE73:
 323              		.section	.text.HAL_SuspendTick,"ax",%progbits
 324              		.align	1
 325              		.weak	HAL_SuspendTick
 326              		.syntax unified
 327              		.thumb
 328              		.thumb_func
 329              		.fpu softvfp
ARM GAS  /tmp/ccDtGuy5.s 			page 13


 331              	HAL_SuspendTick:
 332              	.LFB74:
 351:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 352:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /**
 353:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @brief Suspend Tick increment.
 354:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base. It is
 355:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *       used to generate interrupts at regular time intervals. Once HAL_SuspendTick()
 356:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *       is called, the SysTick interrupt will be disabled and so Tick increment 
 357:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *       is suspended.
 358:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other
 359:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *       implementations in user file.
 360:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @retval None
 361:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 362:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** __weak void HAL_SuspendTick(void)
 363:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** {
 333              		.loc 1 363 0
 334              		.cfi_startproc
 335              		@ args = 0, pretend = 0, frame = 0
 336              		@ frame_needed = 0, uses_anonymous_args = 0
 337              		@ link register save eliminated.
 364:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   /* Disable SysTick Interrupt */
 365:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 338              		.loc 1 365 0
 339 0000 024A     		ldr	r2, .L26
 340 0002 1368     		ldr	r3, [r2]
 341 0004 23F00203 		bic	r3, r3, #2
 342 0008 1360     		str	r3, [r2]
 366:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** }
 343              		.loc 1 366 0
 344 000a 7047     		bx	lr
 345              	.L27:
 346              		.align	2
 347              	.L26:
 348 000c 10E000E0 		.word	-536813552
 349              		.cfi_endproc
 350              	.LFE74:
 352              		.section	.text.HAL_ResumeTick,"ax",%progbits
 353              		.align	1
 354              		.weak	HAL_ResumeTick
 355              		.syntax unified
 356              		.thumb
 357              		.thumb_func
 358              		.fpu softvfp
 360              	HAL_ResumeTick:
 361              	.LFB75:
 367:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 368:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /**
 369:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @brief Resume Tick increment.
 370:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @note In the default implementation , SysTick timer is the source of time base. It is
 371:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *       used to generate interrupts at regular time intervals. Once HAL_ResumeTick()
 372:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *       is called, the SysTick interrupt will be enabled and so Tick increment 
 373:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *       is resumed.
 374:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @note This function is declared as __weak to be overwritten in case of other
 375:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *       implementations in user file.
 376:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @retval None
 377:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 378:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** __weak void HAL_ResumeTick(void)
ARM GAS  /tmp/ccDtGuy5.s 			page 14


 379:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** {
 362              		.loc 1 379 0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 0
 365              		@ frame_needed = 0, uses_anonymous_args = 0
 366              		@ link register save eliminated.
 380:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   /* Enable SysTick Interrupt */
 381:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 367              		.loc 1 381 0
 368 0000 024A     		ldr	r2, .L29
 369 0002 1368     		ldr	r3, [r2]
 370 0004 43F00203 		orr	r3, r3, #2
 371 0008 1360     		str	r3, [r2]
 382:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** }
 372              		.loc 1 382 0
 373 000a 7047     		bx	lr
 374              	.L30:
 375              		.align	2
 376              	.L29:
 377 000c 10E000E0 		.word	-536813552
 378              		.cfi_endproc
 379              	.LFE75:
 381              		.section	.text.HAL_GetHalVersion,"ax",%progbits
 382              		.align	1
 383              		.global	HAL_GetHalVersion
 384              		.syntax unified
 385              		.thumb
 386              		.thumb_func
 387              		.fpu softvfp
 389              	HAL_GetHalVersion:
 390              	.LFB76:
 383:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 384:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /**
 385:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @brief  Returns the HAL revision
 386:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @retval version : 0xXYZR (8bits for each decimal, R for RC)
 387:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 388:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** uint32_t HAL_GetHalVersion(void)
 389:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** {
 391              		.loc 1 389 0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 0
 394              		@ frame_needed = 0, uses_anonymous_args = 0
 395              		@ link register save eliminated.
 390:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****  return __STM32F2xx_HAL_VERSION;
 391:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** }
 396              		.loc 1 391 0
 397 0000 0048     		ldr	r0, .L32
 398 0002 7047     		bx	lr
 399              	.L33:
 400              		.align	2
 401              	.L32:
 402 0004 00010201 		.word	16908544
 403              		.cfi_endproc
 404              	.LFE76:
 406              		.section	.text.HAL_GetREVID,"ax",%progbits
 407              		.align	1
 408              		.global	HAL_GetREVID
ARM GAS  /tmp/ccDtGuy5.s 			page 15


 409              		.syntax unified
 410              		.thumb
 411              		.thumb_func
 412              		.fpu softvfp
 414              	HAL_GetREVID:
 415              	.LFB77:
 392:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 393:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /**
 394:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @brief  Returns the device revision identifier.
 395:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @retval Device revision identifier
 396:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 397:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** uint32_t HAL_GetREVID(void)
 398:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** {
 416              		.loc 1 398 0
 417              		.cfi_startproc
 418              		@ args = 0, pretend = 0, frame = 0
 419              		@ frame_needed = 0, uses_anonymous_args = 0
 420              		@ link register save eliminated.
 399:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****    return((DBGMCU->IDCODE) >> 16U);
 421              		.loc 1 399 0
 422 0000 014B     		ldr	r3, .L35
 423 0002 1868     		ldr	r0, [r3]
 400:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** }
 424              		.loc 1 400 0
 425 0004 000C     		lsrs	r0, r0, #16
 426 0006 7047     		bx	lr
 427              	.L36:
 428              		.align	2
 429              	.L35:
 430 0008 002004E0 		.word	-536600576
 431              		.cfi_endproc
 432              	.LFE77:
 434              		.section	.text.HAL_GetDEVID,"ax",%progbits
 435              		.align	1
 436              		.global	HAL_GetDEVID
 437              		.syntax unified
 438              		.thumb
 439              		.thumb_func
 440              		.fpu softvfp
 442              	HAL_GetDEVID:
 443              	.LFB78:
 401:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 402:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /**
 403:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @brief  Returns the device identifier.
 404:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @retval Device identifier
 405:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 406:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** uint32_t HAL_GetDEVID(void)
 407:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** {
 444              		.loc 1 407 0
 445              		.cfi_startproc
 446              		@ args = 0, pretend = 0, frame = 0
 447              		@ frame_needed = 0, uses_anonymous_args = 0
 448              		@ link register save eliminated.
 408:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****    return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 449              		.loc 1 408 0
 450 0000 024B     		ldr	r3, .L38
 451 0002 1868     		ldr	r0, [r3]
ARM GAS  /tmp/ccDtGuy5.s 			page 16


 409:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** }
 452              		.loc 1 409 0
 453 0004 C0F30B00 		ubfx	r0, r0, #0, #12
 454 0008 7047     		bx	lr
 455              	.L39:
 456 000a 00BF     		.align	2
 457              	.L38:
 458 000c 002004E0 		.word	-536600576
 459              		.cfi_endproc
 460              	.LFE78:
 462              		.section	.text.HAL_DBGMCU_EnableDBGSleepMode,"ax",%progbits
 463              		.align	1
 464              		.global	HAL_DBGMCU_EnableDBGSleepMode
 465              		.syntax unified
 466              		.thumb
 467              		.thumb_func
 468              		.fpu softvfp
 470              	HAL_DBGMCU_EnableDBGSleepMode:
 471              	.LFB79:
 410:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 411:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /**
 412:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @brief  Enable the Debug Module during SLEEP mode
 413:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @retval None
 414:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 415:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** void HAL_DBGMCU_EnableDBGSleepMode(void)
 416:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** {
 472              		.loc 1 416 0
 473              		.cfi_startproc
 474              		@ args = 0, pretend = 0, frame = 0
 475              		@ frame_needed = 0, uses_anonymous_args = 0
 476              		@ link register save eliminated.
 417:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 477              		.loc 1 417 0
 478 0000 024A     		ldr	r2, .L41
 479 0002 5368     		ldr	r3, [r2, #4]
 480 0004 43F00103 		orr	r3, r3, #1
 481 0008 5360     		str	r3, [r2, #4]
 418:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** }
 482              		.loc 1 418 0
 483 000a 7047     		bx	lr
 484              	.L42:
 485              		.align	2
 486              	.L41:
 487 000c 002004E0 		.word	-536600576
 488              		.cfi_endproc
 489              	.LFE79:
 491              		.section	.text.HAL_DBGMCU_DisableDBGSleepMode,"ax",%progbits
 492              		.align	1
 493              		.global	HAL_DBGMCU_DisableDBGSleepMode
 494              		.syntax unified
 495              		.thumb
 496              		.thumb_func
 497              		.fpu softvfp
 499              	HAL_DBGMCU_DisableDBGSleepMode:
 500              	.LFB80:
 419:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 420:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /**
ARM GAS  /tmp/ccDtGuy5.s 			page 17


 421:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @brief  Disable the Debug Module during SLEEP mode
 422:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @retval None
 423:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 424:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** void HAL_DBGMCU_DisableDBGSleepMode(void)
 425:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** {
 501              		.loc 1 425 0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 0
 504              		@ frame_needed = 0, uses_anonymous_args = 0
 505              		@ link register save eliminated.
 426:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 506              		.loc 1 426 0
 507 0000 024A     		ldr	r2, .L44
 508 0002 5368     		ldr	r3, [r2, #4]
 509 0004 23F00103 		bic	r3, r3, #1
 510 0008 5360     		str	r3, [r2, #4]
 427:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** }
 511              		.loc 1 427 0
 512 000a 7047     		bx	lr
 513              	.L45:
 514              		.align	2
 515              	.L44:
 516 000c 002004E0 		.word	-536600576
 517              		.cfi_endproc
 518              	.LFE80:
 520              		.section	.text.HAL_DBGMCU_EnableDBGStopMode,"ax",%progbits
 521              		.align	1
 522              		.global	HAL_DBGMCU_EnableDBGStopMode
 523              		.syntax unified
 524              		.thumb
 525              		.thumb_func
 526              		.fpu softvfp
 528              	HAL_DBGMCU_EnableDBGStopMode:
 529              	.LFB81:
 428:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 429:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /**
 430:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @brief  Enable the Debug Module during STOP mode
 431:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @retval None
 432:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 433:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** void HAL_DBGMCU_EnableDBGStopMode(void)
 434:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** {
 530              		.loc 1 434 0
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 0
 533              		@ frame_needed = 0, uses_anonymous_args = 0
 534              		@ link register save eliminated.
 435:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 535              		.loc 1 435 0
 536 0000 024A     		ldr	r2, .L47
 537 0002 5368     		ldr	r3, [r2, #4]
 538 0004 43F00203 		orr	r3, r3, #2
 539 0008 5360     		str	r3, [r2, #4]
 436:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** }
 540              		.loc 1 436 0
 541 000a 7047     		bx	lr
 542              	.L48:
 543              		.align	2
ARM GAS  /tmp/ccDtGuy5.s 			page 18


 544              	.L47:
 545 000c 002004E0 		.word	-536600576
 546              		.cfi_endproc
 547              	.LFE81:
 549              		.section	.text.HAL_DBGMCU_DisableDBGStopMode,"ax",%progbits
 550              		.align	1
 551              		.global	HAL_DBGMCU_DisableDBGStopMode
 552              		.syntax unified
 553              		.thumb
 554              		.thumb_func
 555              		.fpu softvfp
 557              	HAL_DBGMCU_DisableDBGStopMode:
 558              	.LFB82:
 437:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 438:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /**
 439:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @brief  Disable the Debug Module during STOP mode
 440:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @retval None
 441:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 442:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** void HAL_DBGMCU_DisableDBGStopMode(void)
 443:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** {
 559              		.loc 1 443 0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 0
 562              		@ frame_needed = 0, uses_anonymous_args = 0
 563              		@ link register save eliminated.
 444:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 564              		.loc 1 444 0
 565 0000 024A     		ldr	r2, .L50
 566 0002 5368     		ldr	r3, [r2, #4]
 567 0004 23F00203 		bic	r3, r3, #2
 568 0008 5360     		str	r3, [r2, #4]
 445:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** }
 569              		.loc 1 445 0
 570 000a 7047     		bx	lr
 571              	.L51:
 572              		.align	2
 573              	.L50:
 574 000c 002004E0 		.word	-536600576
 575              		.cfi_endproc
 576              	.LFE82:
 578              		.section	.text.HAL_DBGMCU_EnableDBGStandbyMode,"ax",%progbits
 579              		.align	1
 580              		.global	HAL_DBGMCU_EnableDBGStandbyMode
 581              		.syntax unified
 582              		.thumb
 583              		.thumb_func
 584              		.fpu softvfp
 586              	HAL_DBGMCU_EnableDBGStandbyMode:
 587              	.LFB83:
 446:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 447:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /**
 448:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @brief  Enable the Debug Module during STANDBY mode
 449:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @retval None
 450:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 451:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** void HAL_DBGMCU_EnableDBGStandbyMode(void)
 452:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** {
 588              		.loc 1 452 0
ARM GAS  /tmp/ccDtGuy5.s 			page 19


 589              		.cfi_startproc
 590              		@ args = 0, pretend = 0, frame = 0
 591              		@ frame_needed = 0, uses_anonymous_args = 0
 592              		@ link register save eliminated.
 453:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 593              		.loc 1 453 0
 594 0000 024A     		ldr	r2, .L53
 595 0002 5368     		ldr	r3, [r2, #4]
 596 0004 43F00403 		orr	r3, r3, #4
 597 0008 5360     		str	r3, [r2, #4]
 454:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** }
 598              		.loc 1 454 0
 599 000a 7047     		bx	lr
 600              	.L54:
 601              		.align	2
 602              	.L53:
 603 000c 002004E0 		.word	-536600576
 604              		.cfi_endproc
 605              	.LFE83:
 607              		.section	.text.HAL_DBGMCU_DisableDBGStandbyMode,"ax",%progbits
 608              		.align	1
 609              		.global	HAL_DBGMCU_DisableDBGStandbyMode
 610              		.syntax unified
 611              		.thumb
 612              		.thumb_func
 613              		.fpu softvfp
 615              	HAL_DBGMCU_DisableDBGStandbyMode:
 616              	.LFB84:
 455:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 456:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /**
 457:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @brief  Disable the Debug Module during STANDBY mode
 458:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @retval None
 459:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 460:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** void HAL_DBGMCU_DisableDBGStandbyMode(void)
 461:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** {
 617              		.loc 1 461 0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 0
 620              		@ frame_needed = 0, uses_anonymous_args = 0
 621              		@ link register save eliminated.
 462:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 622              		.loc 1 462 0
 623 0000 024A     		ldr	r2, .L56
 624 0002 5368     		ldr	r3, [r2, #4]
 625 0004 23F00403 		bic	r3, r3, #4
 626 0008 5360     		str	r3, [r2, #4]
 463:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** }
 627              		.loc 1 463 0
 628 000a 7047     		bx	lr
 629              	.L57:
 630              		.align	2
 631              	.L56:
 632 000c 002004E0 		.word	-536600576
 633              		.cfi_endproc
 634              	.LFE84:
 636              		.section	.text.HAL_EnableCompensationCell,"ax",%progbits
 637              		.align	1
ARM GAS  /tmp/ccDtGuy5.s 			page 20


 638              		.global	HAL_EnableCompensationCell
 639              		.syntax unified
 640              		.thumb
 641              		.thumb_func
 642              		.fpu softvfp
 644              	HAL_EnableCompensationCell:
 645              	.LFB85:
 464:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 465:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /**
 466:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @brief  Enables the I/O Compensation Cell.
 467:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @note   The I/O compensation cell can be used only when the device supply
 468:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *         voltage ranges from 2.4 to 3.6 V.  
 469:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @retval None
 470:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 471:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** void HAL_EnableCompensationCell(void)
 472:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** {
 646              		.loc 1 472 0
 647              		.cfi_startproc
 648              		@ args = 0, pretend = 0, frame = 0
 649              		@ frame_needed = 0, uses_anonymous_args = 0
 650              		@ link register save eliminated.
 651              	.LVL15:
 652              	.LBB6:
 653              	.LBB7:
 654              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
ARM GAS  /tmp/ccDtGuy5.s 			page 21


  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccDtGuy5.s 			page 22


  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
ARM GAS  /tmp/ccDtGuy5.s 			page 23


 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
ARM GAS  /tmp/ccDtGuy5.s 			page 24


 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
ARM GAS  /tmp/ccDtGuy5.s 			page 25


 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccDtGuy5.s 			page 26


 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccDtGuy5.s 			page 27


 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 378:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 379:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 384:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfi");
 386:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 387:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 392:Drivers/CMSIS/Include/cmsis_gcc.h ****     a low-power state until one of a number of events occurs.
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("wfe");
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 399:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 403:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("sev");
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 408:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 409:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 410:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccDtGuy5.s 			page 28


 432:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 441:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in integer value.
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV(uint32_t value)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 455:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 459:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 463:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in two unsigned short values.
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 467:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 468:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __REV16(uint32_t value)
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 472:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 475:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 478:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 479:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order in signed short value
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a signed short value with sign extension to integer.
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 482:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 483:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE int32_t __REVSH(int32_t value)
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (short)__builtin_bswap16(value);
 488:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /tmp/ccDtGuy5.s 			page 29


 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t result;
 490:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Number of Bits to rotate
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 505:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 516:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 526:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 528:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 529:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 655              		.loc 2 531 0
 656 0000 0121     		movs	r1, #1
 657              		.syntax unified
 658              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 659 0002 91FAA1F2 		rbit r2, r1
 660              	@ 0 "" 2
 661              	.LVL16:
 662              		.thumb
 663              		.syntax unified
 664              	.LBE7:
 665              	.LBE6:
 473:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
 666              		.loc 1 473 0
 667 0006 B2FA82F2 		clz	r2, r2
ARM GAS  /tmp/ccDtGuy5.s 			page 30


 668 000a 024B     		ldr	r3, .L59
 669 000c 1344     		add	r3, r3, r2
 670 000e 9B00     		lsls	r3, r3, #2
 671 0010 1960     		str	r1, [r3]
 474:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** }
 672              		.loc 1 474 0
 673 0012 7047     		bx	lr
 674              	.L60:
 675              		.align	2
 676              	.L59:
 677 0014 00C18910 		.word	277463296
 678              		.cfi_endproc
 679              	.LFE85:
 681              		.section	.text.HAL_DisableCompensationCell,"ax",%progbits
 682              		.align	1
 683              		.global	HAL_DisableCompensationCell
 684              		.syntax unified
 685              		.thumb
 686              		.thumb_func
 687              		.fpu softvfp
 689              	HAL_DisableCompensationCell:
 690              	.LFB86:
 475:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 476:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /**
 477:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @brief  Power-down the I/O Compensation Cell.
 478:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @note   The I/O compensation cell can be used only when the device supply
 479:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *         voltage ranges from 2.4 to 3.6 V.  
 480:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @retval None
 481:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 482:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** void HAL_DisableCompensationCell(void)
 483:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** {
 691              		.loc 1 483 0
 692              		.cfi_startproc
 693              		@ args = 0, pretend = 0, frame = 0
 694              		@ frame_needed = 0, uses_anonymous_args = 0
 695              		@ link register save eliminated.
 696              	.LVL17:
 697              	.LBB8:
 698              	.LBB9:
 699              		.loc 2 531 0
 700 0000 0122     		movs	r2, #1
 701              		.syntax unified
 702              	@ 531 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 703 0002 92FAA2F2 		rbit r2, r2
 704              	@ 0 "" 2
 705              	.LVL18:
 706              		.thumb
 707              		.syntax unified
 708              	.LBE9:
 709              	.LBE8:
 484:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
 710              		.loc 1 484 0
 711 0006 B2FA82F2 		clz	r2, r2
 712 000a 034B     		ldr	r3, .L62
 713 000c 1344     		add	r3, r3, r2
 714 000e 9B00     		lsls	r3, r3, #2
 715 0010 0022     		movs	r2, #0
ARM GAS  /tmp/ccDtGuy5.s 			page 31


 716 0012 1A60     		str	r2, [r3]
 485:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** }
 717              		.loc 1 485 0
 718 0014 7047     		bx	lr
 719              	.L63:
 720 0016 00BF     		.align	2
 721              	.L62:
 722 0018 00C18910 		.word	277463296
 723              		.cfi_endproc
 724              	.LFE86:
 726              		.section	.text.HAL_GetUID,"ax",%progbits
 727              		.align	1
 728              		.global	HAL_GetUID
 729              		.syntax unified
 730              		.thumb
 731              		.thumb_func
 732              		.fpu softvfp
 734              	HAL_GetUID:
 735              	.LFB87:
 486:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** 
 487:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** /**
 488:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @brief Return the unique device identifier (UID based on 96 bits)
 489:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @param  UID pointer to 3 words array.
 490:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   * @retval Device identifier
 491:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   */
 492:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** void HAL_GetUID(uint32_t *UID)
 493:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** {
 736              		.loc 1 493 0
 737              		.cfi_startproc
 738              		@ args = 0, pretend = 0, frame = 0
 739              		@ frame_needed = 0, uses_anonymous_args = 0
 740              		@ link register save eliminated.
 741              	.LVL19:
 494:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   UID[0] = (uint32_t)(READ_REG(*((uint32_t *)UID_BASE)));
 742              		.loc 1 494 0
 743 0000 044B     		ldr	r3, .L65
 744 0002 1B68     		ldr	r3, [r3]
 745 0004 0360     		str	r3, [r0]
 495:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   UID[1] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 746              		.loc 1 495 0
 747 0006 044B     		ldr	r3, .L65+4
 748 0008 1B68     		ldr	r3, [r3]
 749 000a 4360     		str	r3, [r0, #4]
 496:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c ****   UID[2] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 750              		.loc 1 496 0
 751 000c 034B     		ldr	r3, .L65+8
 752 000e 1B68     		ldr	r3, [r3]
 753 0010 8360     		str	r3, [r0, #8]
 497:Drivers/STM32F2xx_HAL_Driver/Src/stm32f2xx_hal.c **** }
 754              		.loc 1 497 0
 755 0012 7047     		bx	lr
 756              	.L66:
 757              		.align	2
 758              	.L65:
 759 0014 107AFF1F 		.word	536836624
 760 0018 147AFF1F 		.word	536836628
 761 001c 187AFF1F 		.word	536836632
ARM GAS  /tmp/ccDtGuy5.s 			page 32


 762              		.cfi_endproc
 763              	.LFE87:
 765              		.comm	uwTick,4,4
 766              		.text
 767              	.Letext0:
 768              		.file 3 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_d
 769              		.file 4 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdin
 770              		.file 5 "Drivers/CMSIS/Include/core_cm3.h"
 771              		.file 6 "Drivers/CMSIS/Device/ST/STM32F2xx/Include/system_stm32f2xx.h"
 772              		.file 7 "Drivers/CMSIS/Device/ST/STM32F2xx/Include/stm32f205xx.h"
 773              		.file 8 "Drivers/CMSIS/Device/ST/STM32F2xx/Include/stm32f2xx.h"
 774              		.file 9 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h
 775              		.file 10 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_type
 776              		.file 11 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/inc
 777              		.file 12 "/home/nikita/software/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent
 778              		.file 13 "Drivers/STM32F2xx_HAL_Driver/Inc/stm32f2xx_hal_def.h"
 779              		.file 14 "Drivers/STM32F2xx_HAL_Driver/Inc/stm32f2xx_hal_cortex.h"
ARM GAS  /tmp/ccDtGuy5.s 			page 33


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f2xx_hal.c
     /tmp/ccDtGuy5.s:16     .text.HAL_MspInit:0000000000000000 $t
     /tmp/ccDtGuy5.s:23     .text.HAL_MspInit:0000000000000000 HAL_MspInit
     /tmp/ccDtGuy5.s:37     .text.HAL_MspDeInit:0000000000000000 $t
     /tmp/ccDtGuy5.s:44     .text.HAL_MspDeInit:0000000000000000 HAL_MspDeInit
     /tmp/ccDtGuy5.s:57     .text.HAL_DeInit:0000000000000000 $t
     /tmp/ccDtGuy5.s:64     .text.HAL_DeInit:0000000000000000 HAL_DeInit
     /tmp/ccDtGuy5.s:107    .text.HAL_DeInit:0000000000000028 $d
     /tmp/ccDtGuy5.s:112    .text.HAL_InitTick:0000000000000000 $t
     /tmp/ccDtGuy5.s:119    .text.HAL_InitTick:0000000000000000 HAL_InitTick
     /tmp/ccDtGuy5.s:154    .text.HAL_InitTick:0000000000000024 $d
     /tmp/ccDtGuy5.s:160    .text.HAL_Init:0000000000000000 $t
     /tmp/ccDtGuy5.s:167    .text.HAL_Init:0000000000000000 HAL_Init
     /tmp/ccDtGuy5.s:208    .text.HAL_Init:0000000000000030 $d
     /tmp/ccDtGuy5.s:213    .text.HAL_IncTick:0000000000000000 $t
     /tmp/ccDtGuy5.s:220    .text.HAL_IncTick:0000000000000000 HAL_IncTick
     /tmp/ccDtGuy5.s:237    .text.HAL_IncTick:000000000000000c $d
                            *COM*:0000000000000004 uwTick
     /tmp/ccDtGuy5.s:242    .text.HAL_GetTick:0000000000000000 $t
     /tmp/ccDtGuy5.s:249    .text.HAL_GetTick:0000000000000000 HAL_GetTick
     /tmp/ccDtGuy5.s:264    .text.HAL_GetTick:0000000000000008 $d
     /tmp/ccDtGuy5.s:269    .text.HAL_Delay:0000000000000000 $t
     /tmp/ccDtGuy5.s:276    .text.HAL_Delay:0000000000000000 HAL_Delay
     /tmp/ccDtGuy5.s:324    .text.HAL_SuspendTick:0000000000000000 $t
     /tmp/ccDtGuy5.s:331    .text.HAL_SuspendTick:0000000000000000 HAL_SuspendTick
     /tmp/ccDtGuy5.s:348    .text.HAL_SuspendTick:000000000000000c $d
     /tmp/ccDtGuy5.s:353    .text.HAL_ResumeTick:0000000000000000 $t
     /tmp/ccDtGuy5.s:360    .text.HAL_ResumeTick:0000000000000000 HAL_ResumeTick
     /tmp/ccDtGuy5.s:377    .text.HAL_ResumeTick:000000000000000c $d
     /tmp/ccDtGuy5.s:382    .text.HAL_GetHalVersion:0000000000000000 $t
     /tmp/ccDtGuy5.s:389    .text.HAL_GetHalVersion:0000000000000000 HAL_GetHalVersion
     /tmp/ccDtGuy5.s:402    .text.HAL_GetHalVersion:0000000000000004 $d
     /tmp/ccDtGuy5.s:407    .text.HAL_GetREVID:0000000000000000 $t
     /tmp/ccDtGuy5.s:414    .text.HAL_GetREVID:0000000000000000 HAL_GetREVID
     /tmp/ccDtGuy5.s:430    .text.HAL_GetREVID:0000000000000008 $d
     /tmp/ccDtGuy5.s:435    .text.HAL_GetDEVID:0000000000000000 $t
     /tmp/ccDtGuy5.s:442    .text.HAL_GetDEVID:0000000000000000 HAL_GetDEVID
     /tmp/ccDtGuy5.s:458    .text.HAL_GetDEVID:000000000000000c $d
     /tmp/ccDtGuy5.s:463    .text.HAL_DBGMCU_EnableDBGSleepMode:0000000000000000 $t
     /tmp/ccDtGuy5.s:470    .text.HAL_DBGMCU_EnableDBGSleepMode:0000000000000000 HAL_DBGMCU_EnableDBGSleepMode
     /tmp/ccDtGuy5.s:487    .text.HAL_DBGMCU_EnableDBGSleepMode:000000000000000c $d
     /tmp/ccDtGuy5.s:492    .text.HAL_DBGMCU_DisableDBGSleepMode:0000000000000000 $t
     /tmp/ccDtGuy5.s:499    .text.HAL_DBGMCU_DisableDBGSleepMode:0000000000000000 HAL_DBGMCU_DisableDBGSleepMode
     /tmp/ccDtGuy5.s:516    .text.HAL_DBGMCU_DisableDBGSleepMode:000000000000000c $d
     /tmp/ccDtGuy5.s:521    .text.HAL_DBGMCU_EnableDBGStopMode:0000000000000000 $t
     /tmp/ccDtGuy5.s:528    .text.HAL_DBGMCU_EnableDBGStopMode:0000000000000000 HAL_DBGMCU_EnableDBGStopMode
     /tmp/ccDtGuy5.s:545    .text.HAL_DBGMCU_EnableDBGStopMode:000000000000000c $d
     /tmp/ccDtGuy5.s:550    .text.HAL_DBGMCU_DisableDBGStopMode:0000000000000000 $t
     /tmp/ccDtGuy5.s:557    .text.HAL_DBGMCU_DisableDBGStopMode:0000000000000000 HAL_DBGMCU_DisableDBGStopMode
     /tmp/ccDtGuy5.s:574    .text.HAL_DBGMCU_DisableDBGStopMode:000000000000000c $d
     /tmp/ccDtGuy5.s:579    .text.HAL_DBGMCU_EnableDBGStandbyMode:0000000000000000 $t
     /tmp/ccDtGuy5.s:586    .text.HAL_DBGMCU_EnableDBGStandbyMode:0000000000000000 HAL_DBGMCU_EnableDBGStandbyMode
     /tmp/ccDtGuy5.s:603    .text.HAL_DBGMCU_EnableDBGStandbyMode:000000000000000c $d
     /tmp/ccDtGuy5.s:608    .text.HAL_DBGMCU_DisableDBGStandbyMode:0000000000000000 $t
     /tmp/ccDtGuy5.s:615    .text.HAL_DBGMCU_DisableDBGStandbyMode:0000000000000000 HAL_DBGMCU_DisableDBGStandbyMode
     /tmp/ccDtGuy5.s:632    .text.HAL_DBGMCU_DisableDBGStandbyMode:000000000000000c $d
ARM GAS  /tmp/ccDtGuy5.s 			page 34


     /tmp/ccDtGuy5.s:637    .text.HAL_EnableCompensationCell:0000000000000000 $t
     /tmp/ccDtGuy5.s:644    .text.HAL_EnableCompensationCell:0000000000000000 HAL_EnableCompensationCell
     /tmp/ccDtGuy5.s:677    .text.HAL_EnableCompensationCell:0000000000000014 $d
     /tmp/ccDtGuy5.s:682    .text.HAL_DisableCompensationCell:0000000000000000 $t
     /tmp/ccDtGuy5.s:689    .text.HAL_DisableCompensationCell:0000000000000000 HAL_DisableCompensationCell
     /tmp/ccDtGuy5.s:722    .text.HAL_DisableCompensationCell:0000000000000018 $d
     /tmp/ccDtGuy5.s:727    .text.HAL_GetUID:0000000000000000 $t
     /tmp/ccDtGuy5.s:734    .text.HAL_GetUID:0000000000000000 HAL_GetUID
     /tmp/ccDtGuy5.s:759    .text.HAL_GetUID:0000000000000014 $d

UNDEFINED SYMBOLS
HAL_SYSTICK_Config
HAL_NVIC_SetPriority
SystemCoreClock
HAL_NVIC_SetPriorityGrouping
